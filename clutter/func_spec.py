from collections import namedtuple
Spec = namedtuple('Spec', ['return_type', 'parameters'])
Param = namedtuple('Param', ['name', 'type'])
func_specs = {
  '__builtin_bswap32': Spec(
    return_type = 'uint32_t',
    parameters = [
      Param(
        type = 'uint32_t',
        name = 'x',
      ),
    ],
  ),
  '__builtin_bswap64': Spec(
    return_type = 'uint64_t',
    parameters = [
      Param(
        type = 'uint64_t',
        name = 'x',
      ),
    ],
  ),
  'clock': Spec(
    return_type = 'clock_t',
    parameters = [
    ],
  ),
  'time': Spec(
    return_type = 'time_t',
    parameters = [
      Param(
        type = 'time_t *',
        name = '__timer',
      ),
    ],
  ),
  'difftime': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'time_t',
        name = '__time1',
      ),
      Param(
        type = 'time_t',
        name = '__time0',
      ),
    ],
  ),
  'mktime': Spec(
    return_type = 'time_t',
    parameters = [
      Param(
        type = 'struct tm *',
        name = '__tp',
      ),
    ],
  ),
  'strftime': Spec(
    return_type = 'size_t',
    parameters = [
      Param(
        type = 'char *restrict',
        name = '__s',
      ),
      Param(
        type = 'size_t',
        name = '__maxsize',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = 'const struct tm *restrict',
        name = '__tp',
      ),
    ],
  ),
  'strftime_l': Spec(
    return_type = 'size_t',
    parameters = [
      Param(
        type = 'char *restrict',
        name = '__s',
      ),
      Param(
        type = 'size_t',
        name = '__maxsize',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = 'const struct tm *restrict',
        name = '__tp',
      ),
      Param(
        type = '__locale_t',
        name = '__loc',
      ),
    ],
  ),
  'gmtime': Spec(
    return_type = 'struct tm *',
    parameters = [
      Param(
        type = 'const time_t *',
        name = '__timer',
      ),
    ],
  ),
  'localtime': Spec(
    return_type = 'struct tm *',
    parameters = [
      Param(
        type = 'const time_t *',
        name = '__timer',
      ),
    ],
  ),
  'gmtime_r': Spec(
    return_type = 'struct tm *',
    parameters = [
      Param(
        type = 'const time_t *restrict',
        name = '__timer',
      ),
      Param(
        type = 'struct tm *restrict',
        name = '__tp',
      ),
    ],
  ),
  'localtime_r': Spec(
    return_type = 'struct tm *',
    parameters = [
      Param(
        type = 'const time_t *restrict',
        name = '__timer',
      ),
      Param(
        type = 'struct tm *restrict',
        name = '__tp',
      ),
    ],
  ),
  'asctime': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const struct tm *',
        name = '__tp',
      ),
    ],
  ),
  'ctime': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const time_t *',
        name = '__timer',
      ),
    ],
  ),
  'asctime_r': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const struct tm *restrict',
        name = '__tp',
      ),
      Param(
        type = 'char *restrict',
        name = '__buf',
      ),
    ],
  ),
  'ctime_r': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const time_t *restrict',
        name = '__timer',
      ),
      Param(
        type = 'char *restrict',
        name = '__buf',
      ),
    ],
  ),
  'tzset': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'stime': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const time_t *',
        name = '__when',
      ),
    ],
  ),
  'timegm': Spec(
    return_type = 'time_t',
    parameters = [
      Param(
        type = 'struct tm *',
        name = '__tp',
      ),
    ],
  ),
  'timelocal': Spec(
    return_type = 'time_t',
    parameters = [
      Param(
        type = 'struct tm *',
        name = '__tp',
      ),
    ],
  ),
  'dysize': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__year',
      ),
    ],
  ),
  'nanosleep': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const struct timespec *',
        name = '__requested_time',
      ),
      Param(
        type = 'struct timespec *',
        name = '__remaining',
      ),
    ],
  ),
  'clock_getres': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'clockid_t',
        name = '__clock_id',
      ),
      Param(
        type = 'struct timespec *',
        name = '__res',
      ),
    ],
  ),
  'clock_gettime': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'clockid_t',
        name = '__clock_id',
      ),
      Param(
        type = 'struct timespec *',
        name = '__tp',
      ),
    ],
  ),
  'clock_settime': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'clockid_t',
        name = '__clock_id',
      ),
      Param(
        type = 'const struct timespec *',
        name = '__tp',
      ),
    ],
  ),
  'clock_nanosleep': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'clockid_t',
        name = '__clock_id',
      ),
      Param(
        type = 'int',
        name = '__flags',
      ),
      Param(
        type = 'const struct timespec *',
        name = '__req',
      ),
      Param(
        type = 'struct timespec *',
        name = '__rem',
      ),
    ],
  ),
  'clock_getcpuclockid': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pid_t',
        name = '__pid',
      ),
      Param(
        type = 'clockid_t *',
        name = '__clock_id',
      ),
    ],
  ),
  'timer_create': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'clockid_t',
        name = '__clock_id',
      ),
      Param(
        type = 'struct sigevent *restrict',
        name = '__evp',
      ),
      Param(
        type = 'timer_t *restrict',
        name = '__timerid',
      ),
    ],
  ),
  'timer_delete': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'timer_t',
        name = '__timerid',
      ),
    ],
  ),
  'timer_settime': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'timer_t',
        name = '__timerid',
      ),
      Param(
        type = 'int',
        name = '__flags',
      ),
      Param(
        type = 'const struct itimerspec *restrict',
        name = '__value',
      ),
      Param(
        type = 'struct itimerspec *restrict',
        name = '__ovalue',
      ),
    ],
  ),
  'timer_gettime': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'timer_t',
        name = '__timerid',
      ),
      Param(
        type = 'struct itimerspec *',
        name = '__value',
      ),
    ],
  ),
  'timer_getoverrun': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'timer_t',
        name = '__timerid',
      ),
    ],
  ),
  'g_array_new': Spec(
    return_type = 'GArray *',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'zero_terminated',
      ),
      Param(
        type = 'gboolean',
        name = 'clear_',
      ),
      Param(
        type = 'guint',
        name = 'element_size',
      ),
    ],
  ),
  'g_array_sized_new': Spec(
    return_type = 'GArray *',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'zero_terminated',
      ),
      Param(
        type = 'gboolean',
        name = 'clear_',
      ),
      Param(
        type = 'guint',
        name = 'element_size',
      ),
      Param(
        type = 'guint',
        name = 'reserved_size',
      ),
    ],
  ),
  'g_array_free': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
      Param(
        type = 'gboolean',
        name = 'free_segment',
      ),
    ],
  ),
  'g_array_ref': Spec(
    return_type = 'GArray *',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
    ],
  ),
  'g_array_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
    ],
  ),
  'g_array_get_element_size': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
    ],
  ),
  'g_array_append_vals': Spec(
    return_type = 'GArray *',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
      Param(
        type = 'guint',
        name = 'len',
      ),
    ],
  ),
  'g_array_prepend_vals': Spec(
    return_type = 'GArray *',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
      Param(
        type = 'guint',
        name = 'len',
      ),
    ],
  ),
  'g_array_insert_vals': Spec(
    return_type = 'GArray *',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
      Param(
        type = 'guint',
        name = 'len',
      ),
    ],
  ),
  'g_array_set_size': Spec(
    return_type = 'GArray *',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'length',
      ),
    ],
  ),
  'g_array_remove_index': Spec(
    return_type = 'GArray *',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'g_array_remove_index_fast': Spec(
    return_type = 'GArray *',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'g_array_remove_range': Spec(
    return_type = 'GArray *',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
      Param(
        type = 'guint',
        name = 'length',
      ),
    ],
  ),
  'g_array_sort': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'compare_func',
      ),
    ],
  ),
  'g_array_sort_with_data': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'compare_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_array_set_clear_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'clear_func',
      ),
    ],
  ),
  'g_ptr_array_new': Spec(
    return_type = 'GPtrArray *',
    parameters = [
    ],
  ),
  'g_ptr_array_new_with_free_func': Spec(
    return_type = 'GPtrArray *',
    parameters = [
      Param(
        type = 'GDestroyNotify',
        name = 'element_free_func',
      ),
    ],
  ),
  'g_ptr_array_sized_new': Spec(
    return_type = 'GPtrArray *',
    parameters = [
      Param(
        type = 'guint',
        name = 'reserved_size',
      ),
    ],
  ),
  'g_ptr_array_new_full': Spec(
    return_type = 'GPtrArray *',
    parameters = [
      Param(
        type = 'guint',
        name = 'reserved_size',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'element_free_func',
      ),
    ],
  ),
  'g_ptr_array_free': Spec(
    return_type = 'gpointer *',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'gboolean',
        name = 'free_seg',
      ),
    ],
  ),
  'g_ptr_array_ref': Spec(
    return_type = 'GPtrArray *',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
    ],
  ),
  'g_ptr_array_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
    ],
  ),
  'g_ptr_array_set_free_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'element_free_func',
      ),
    ],
  ),
  'g_ptr_array_set_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'gint',
        name = 'length',
      ),
    ],
  ),
  'g_ptr_array_remove_index': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'g_ptr_array_remove_index_fast': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'g_ptr_array_remove': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_ptr_array_remove_fast': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_ptr_array_remove_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
      Param(
        type = 'guint',
        name = 'length',
      ),
    ],
  ),
  'g_ptr_array_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_ptr_array_sort': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'compare_func',
      ),
    ],
  ),
  'g_ptr_array_sort_with_data': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'compare_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_ptr_array_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'GFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_byte_array_new': Spec(
    return_type = 'GByteArray *',
    parameters = [
    ],
  ),
  'g_byte_array_new_take': Spec(
    return_type = 'GByteArray *',
    parameters = [
      Param(
        type = 'guint8 *',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'len',
      ),
    ],
  ),
  'g_byte_array_sized_new': Spec(
    return_type = 'GByteArray *',
    parameters = [
      Param(
        type = 'guint',
        name = 'reserved_size',
      ),
    ],
  ),
  'g_byte_array_free': Spec(
    return_type = 'guint8 *',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
      Param(
        type = 'gboolean',
        name = 'free_segment',
      ),
    ],
  ),
  'g_byte_array_free_to_bytes': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
    ],
  ),
  'g_byte_array_ref': Spec(
    return_type = 'GByteArray *',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
    ],
  ),
  'g_byte_array_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
    ],
  ),
  'g_byte_array_append': Spec(
    return_type = 'GByteArray *',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
      Param(
        type = 'const guint8 *',
        name = 'data',
      ),
      Param(
        type = 'guint',
        name = 'len',
      ),
    ],
  ),
  'g_byte_array_prepend': Spec(
    return_type = 'GByteArray *',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
      Param(
        type = 'const guint8 *',
        name = 'data',
      ),
      Param(
        type = 'guint',
        name = 'len',
      ),
    ],
  ),
  'g_byte_array_set_size': Spec(
    return_type = 'GByteArray *',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'length',
      ),
    ],
  ),
  'g_byte_array_remove_index': Spec(
    return_type = 'GByteArray *',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'g_byte_array_remove_index_fast': Spec(
    return_type = 'GByteArray *',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'g_byte_array_remove_range': Spec(
    return_type = 'GByteArray *',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
      Param(
        type = 'guint',
        name = 'length',
      ),
    ],
  ),
  'g_byte_array_sort': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'compare_func',
      ),
    ],
  ),
  'g_byte_array_sort_with_data': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'compare_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_atomic_int_get': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'volatile gint *',
        name = 'atomic',
      ),
    ],
  ),
  'g_atomic_int_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'volatile gint *',
        name = 'atomic',
      ),
      Param(
        type = 'gint',
        name = 'newval',
      ),
    ],
  ),
  'g_atomic_int_inc': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'volatile gint *',
        name = 'atomic',
      ),
    ],
  ),
  'g_atomic_int_dec_and_test': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'volatile gint *',
        name = 'atomic',
      ),
    ],
  ),
  'g_atomic_int_compare_and_exchange': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'volatile gint *',
        name = 'atomic',
      ),
      Param(
        type = 'gint',
        name = 'oldval',
      ),
      Param(
        type = 'gint',
        name = 'newval',
      ),
    ],
  ),
  'g_atomic_int_add': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'volatile gint *',
        name = 'atomic',
      ),
      Param(
        type = 'gint',
        name = 'val',
      ),
    ],
  ),
  'g_atomic_int_and': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'volatile guint *',
        name = 'atomic',
      ),
      Param(
        type = 'guint',
        name = 'val',
      ),
    ],
  ),
  'g_atomic_int_or': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'volatile guint *',
        name = 'atomic',
      ),
      Param(
        type = 'guint',
        name = 'val',
      ),
    ],
  ),
  'g_atomic_int_xor': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'volatile guint *',
        name = 'atomic',
      ),
      Param(
        type = 'guint',
        name = 'val',
      ),
    ],
  ),
  'g_atomic_pointer_get': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'atomic',
      ),
    ],
  ),
  'g_atomic_pointer_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'atomic',
      ),
      Param(
        type = 'gpointer',
        name = 'newval',
      ),
    ],
  ),
  'g_atomic_pointer_compare_and_exchange': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'atomic',
      ),
      Param(
        type = 'gpointer',
        name = 'oldval',
      ),
      Param(
        type = 'gpointer',
        name = 'newval',
      ),
    ],
  ),
  'g_atomic_pointer_add': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'atomic',
      ),
      Param(
        type = 'gssize',
        name = 'val',
      ),
    ],
  ),
  'g_atomic_pointer_and': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'atomic',
      ),
      Param(
        type = 'gsize',
        name = 'val',
      ),
    ],
  ),
  'g_atomic_pointer_or': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'atomic',
      ),
      Param(
        type = 'gsize',
        name = 'val',
      ),
    ],
  ),
  'g_atomic_pointer_xor': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'atomic',
      ),
      Param(
        type = 'gsize',
        name = 'val',
      ),
    ],
  ),
  'g_atomic_int_exchange_and_add': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'volatile gint *',
        name = 'atomic',
      ),
      Param(
        type = 'gint',
        name = 'val',
      ),
    ],
  ),
  'g_quark_try_string': Spec(
    return_type = 'GQuark',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_quark_from_static_string': Spec(
    return_type = 'GQuark',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_quark_from_string': Spec(
    return_type = 'GQuark',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_quark_to_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
    ],
  ),
  'g_intern_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_intern_static_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_error_new': Spec(
    return_type = 'GError *',
    parameters = [
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_error_new_literal': Spec(
    return_type = 'GError *',
    parameters = [
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const gchar *',
        name = 'message',
      ),
    ],
  ),
  'g_error_new_valist': Spec(
    return_type = 'GError *',
    parameters = [
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'g_error_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GError *',
        name = 'error',
      ),
    ],
  ),
  'g_error_copy': Spec(
    return_type = 'GError *',
    parameters = [
      Param(
        type = 'const GError *',
        name = 'error',
      ),
    ],
  ),
  'g_error_matches': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GError *',
        name = 'error',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
    ],
  ),
  'g_set_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GError **',
        name = 'err',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_set_error_literal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GError **',
        name = 'err',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const gchar *',
        name = 'message',
      ),
    ],
  ),
  'g_propagate_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GError **',
        name = 'dest',
      ),
      Param(
        type = 'GError *',
        name = 'src',
      ),
    ],
  ),
  'g_clear_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GError **',
        name = 'err',
      ),
    ],
  ),
  'g_prefix_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GError **',
        name = 'err',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_propagate_prefixed_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GError **',
        name = 'dest',
      ),
      Param(
        type = 'GError *',
        name = 'src',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_thread_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_thread_ref': Spec(
    return_type = 'GThread *',
    parameters = [
      Param(
        type = 'GThread *',
        name = 'thread',
      ),
    ],
  ),
  'g_thread_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GThread *',
        name = 'thread',
      ),
    ],
  ),
  'g_thread_new': Spec(
    return_type = 'GThread *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GThreadFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_thread_try_new': Spec(
    return_type = 'GThread *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GThreadFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_thread_self': Spec(
    return_type = 'GThread *',
    parameters = [
    ],
  ),
  'g_thread_exit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'retval',
      ),
    ],
  ),
  'g_thread_join': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GThread *',
        name = 'thread',
      ),
    ],
  ),
  'g_thread_yield': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_mutex_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_mutex_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_mutex_lock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_mutex_trylock': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_mutex_unlock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_rw_lock_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRWLock *',
        name = 'rw_lock',
      ),
    ],
  ),
  'g_rw_lock_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRWLock *',
        name = 'rw_lock',
      ),
    ],
  ),
  'g_rw_lock_writer_lock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRWLock *',
        name = 'rw_lock',
      ),
    ],
  ),
  'g_rw_lock_writer_trylock': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GRWLock *',
        name = 'rw_lock',
      ),
    ],
  ),
  'g_rw_lock_writer_unlock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRWLock *',
        name = 'rw_lock',
      ),
    ],
  ),
  'g_rw_lock_reader_lock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRWLock *',
        name = 'rw_lock',
      ),
    ],
  ),
  'g_rw_lock_reader_trylock': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GRWLock *',
        name = 'rw_lock',
      ),
    ],
  ),
  'g_rw_lock_reader_unlock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRWLock *',
        name = 'rw_lock',
      ),
    ],
  ),
  'g_rec_mutex_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRecMutex *',
        name = 'rec_mutex',
      ),
    ],
  ),
  'g_rec_mutex_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRecMutex *',
        name = 'rec_mutex',
      ),
    ],
  ),
  'g_rec_mutex_lock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRecMutex *',
        name = 'rec_mutex',
      ),
    ],
  ),
  'g_rec_mutex_trylock': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GRecMutex *',
        name = 'rec_mutex',
      ),
    ],
  ),
  'g_rec_mutex_unlock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRecMutex *',
        name = 'rec_mutex',
      ),
    ],
  ),
  'g_cond_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCond *',
        name = 'cond',
      ),
    ],
  ),
  'g_cond_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCond *',
        name = 'cond',
      ),
    ],
  ),
  'g_cond_wait': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCond *',
        name = 'cond',
      ),
      Param(
        type = 'GMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_cond_signal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCond *',
        name = 'cond',
      ),
    ],
  ),
  'g_cond_broadcast': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCond *',
        name = 'cond',
      ),
    ],
  ),
  'g_cond_wait_until': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GCond *',
        name = 'cond',
      ),
      Param(
        type = 'GMutex *',
        name = 'mutex',
      ),
      Param(
        type = 'gint64',
        name = 'end_time',
      ),
    ],
  ),
  'g_private_get': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GPrivate *',
        name = 'key',
      ),
    ],
  ),
  'g_private_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPrivate *',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'value',
      ),
    ],
  ),
  'g_private_replace': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPrivate *',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'value',
      ),
    ],
  ),
  'g_once_impl': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GOnce *',
        name = 'once',
      ),
      Param(
        type = 'GThreadFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'arg',
      ),
    ],
  ),
  'g_once_init_enter': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'location',
      ),
    ],
  ),
  'g_once_init_leave': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'location',
      ),
      Param(
        type = 'gsize',
        name = 'result',
      ),
    ],
  ),
  'g_async_queue_new': Spec(
    return_type = 'GAsyncQueue *',
    parameters = [
    ],
  ),
  'g_async_queue_new_full': Spec(
    return_type = 'GAsyncQueue *',
    parameters = [
      Param(
        type = 'GDestroyNotify',
        name = 'item_free_func',
      ),
    ],
  ),
  'g_async_queue_lock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_unlock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_ref': Spec(
    return_type = 'GAsyncQueue *',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_ref_unlocked': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_unref_and_unlock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_push': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_async_queue_push_unlocked': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_async_queue_push_sorted': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_async_queue_push_sorted_unlocked': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_async_queue_pop': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_pop_unlocked': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_try_pop': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_try_pop_unlocked': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_timeout_pop': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
      Param(
        type = 'guint64',
        name = 'timeout',
      ),
    ],
  ),
  'g_async_queue_timeout_pop_unlocked': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
      Param(
        type = 'guint64',
        name = 'timeout',
      ),
    ],
  ),
  'g_async_queue_length': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_length_unlocked': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_sort': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_async_queue_sort_unlocked': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_async_queue_timed_pop': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GTimeVal *',
        name = 'end_time',
      ),
    ],
  ),
  'g_async_queue_timed_pop_unlocked': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GTimeVal *',
        name = 'end_time',
      ),
    ],
  ),
  '__sigismember': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const __sigset_t *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  '__sigaddset': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__sigset_t *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  '__sigdelset': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__sigset_t *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  '__sysv_signal': Spec(
    return_type = '__sighandler_t',
    parameters = [
      Param(
        type = 'int',
        name = '__sig',
      ),
      Param(
        type = '__sighandler_t',
        name = '__handler',
      ),
    ],
  ),
  'signal': Spec(
    return_type = '__sighandler_t',
    parameters = [
      Param(
        type = 'int',
        name = '__sig',
      ),
      Param(
        type = '__sighandler_t',
        name = '__handler',
      ),
    ],
  ),
  'kill': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pid',
      ),
      Param(
        type = 'int',
        name = '__sig',
      ),
    ],
  ),
  'killpg': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pgrp',
      ),
      Param(
        type = 'int',
        name = '__sig',
      ),
    ],
  ),
  'raise': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__sig',
      ),
    ],
  ),
  'ssignal': Spec(
    return_type = '__sighandler_t',
    parameters = [
      Param(
        type = 'int',
        name = '__sig',
      ),
      Param(
        type = '__sighandler_t',
        name = '__handler',
      ),
    ],
  ),
  'gsignal': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__sig',
      ),
    ],
  ),
  'psignal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'int',
        name = '__sig',
      ),
      Param(
        type = 'const char *',
        name = '__s',
      ),
    ],
  ),
  'psiginfo': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const siginfo_t *',
        name = '__pinfo',
      ),
      Param(
        type = 'const char *',
        name = '__s',
      ),
    ],
  ),
  '__sigpause': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__sig_or_mask',
      ),
      Param(
        type = 'int',
        name = '__is_sig',
      ),
    ],
  ),
  'sigblock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__mask',
      ),
    ],
  ),
  'sigsetmask': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__mask',
      ),
    ],
  ),
  'siggetmask': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'sigemptyset': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'sigset_t *',
        name = '__set',
      ),
    ],
  ),
  'sigfillset': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'sigset_t *',
        name = '__set',
      ),
    ],
  ),
  'sigaddset': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'sigset_t *',
        name = '__set',
      ),
      Param(
        type = 'int',
        name = '__signo',
      ),
    ],
  ),
  'sigdelset': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'sigset_t *',
        name = '__set',
      ),
      Param(
        type = 'int',
        name = '__signo',
      ),
    ],
  ),
  'sigismember': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const sigset_t *',
        name = '__set',
      ),
      Param(
        type = 'int',
        name = '__signo',
      ),
    ],
  ),
  'sigprocmask': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__how',
      ),
      Param(
        type = 'const sigset_t *restrict',
        name = '__set',
      ),
      Param(
        type = 'sigset_t *restrict',
        name = '__oset',
      ),
    ],
  ),
  'sigsuspend': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const sigset_t *',
        name = '__set',
      ),
    ],
  ),
  'sigaction': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__sig',
      ),
      Param(
        type = 'const struct sigaction *restrict',
        name = '__act',
      ),
      Param(
        type = 'struct sigaction *restrict',
        name = '__oact',
      ),
    ],
  ),
  'sigpending': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'sigset_t *',
        name = '__set',
      ),
    ],
  ),
  'sigwait': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const sigset_t *restrict',
        name = '__set',
      ),
      Param(
        type = 'int *restrict',
        name = '__sig',
      ),
    ],
  ),
  'sigwaitinfo': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const sigset_t *restrict',
        name = '__set',
      ),
      Param(
        type = 'siginfo_t *restrict',
        name = '__info',
      ),
    ],
  ),
  'sigtimedwait': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const sigset_t *restrict',
        name = '__set',
      ),
      Param(
        type = 'siginfo_t *restrict',
        name = '__info',
      ),
      Param(
        type = 'const struct timespec *restrict',
        name = '__timeout',
      ),
    ],
  ),
  'sigqueue': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pid',
      ),
      Param(
        type = 'int',
        name = '__sig',
      ),
      Param(
        type = 'const union sigval',
        name = '__val',
      ),
    ],
  ),
  'sigvec': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__sig',
      ),
      Param(
        type = 'const struct sigvec *',
        name = '__vec',
      ),
      Param(
        type = 'struct sigvec *',
        name = '__ovec',
      ),
    ],
  ),
  'sigreturn': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'struct sigcontext *',
        name = '__scp',
      ),
    ],
  ),
  'siginterrupt': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__sig',
      ),
      Param(
        type = 'int',
        name = '__interrupt',
      ),
    ],
  ),
  'sigstack': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'struct sigstack *',
        name = '__ss',
      ),
      Param(
        type = 'struct sigstack *',
        name = '__oss',
      ),
    ],
  ),
  'sigaltstack': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const struct sigaltstack *restrict',
        name = '__ss',
      ),
      Param(
        type = 'struct sigaltstack *restrict',
        name = '__oss',
      ),
    ],
  ),
  'pthread_sigmask': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__how',
      ),
      Param(
        type = 'const __sigset_t *restrict',
        name = '__newmask',
      ),
      Param(
        type = '__sigset_t *restrict',
        name = '__oldmask',
      ),
    ],
  ),
  'pthread_kill': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_t',
        name = '__threadid',
      ),
      Param(
        type = 'int',
        name = '__signo',
      ),
    ],
  ),
  '__libc_current_sigrtmin': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  '__libc_current_sigrtmax': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'g_on_error_query': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'prg_name',
      ),
    ],
  ),
  'g_on_error_stack_trace': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'prg_name',
      ),
    ],
  ),
  'g_base64_encode_step': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'const guchar *',
        name = 'in',
      ),
      Param(
        type = 'gsize',
        name = 'len',
      ),
      Param(
        type = 'gboolean',
        name = 'break_lines',
      ),
      Param(
        type = 'gchar *',
        name = 'out',
      ),
      Param(
        type = 'gint *',
        name = 'state',
      ),
      Param(
        type = 'gint *',
        name = 'save',
      ),
    ],
  ),
  'g_base64_encode_close': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'break_lines',
      ),
      Param(
        type = 'gchar *',
        name = 'out',
      ),
      Param(
        type = 'gint *',
        name = 'state',
      ),
      Param(
        type = 'gint *',
        name = 'save',
      ),
    ],
  ),
  'g_base64_encode': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const guchar *',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'len',
      ),
    ],
  ),
  'g_base64_decode_step': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'in',
      ),
      Param(
        type = 'gsize',
        name = 'len',
      ),
      Param(
        type = 'guchar *',
        name = 'out',
      ),
      Param(
        type = 'gint *',
        name = 'state',
      ),
      Param(
        type = 'guint *',
        name = 'save',
      ),
    ],
  ),
  'g_base64_decode': Spec(
    return_type = 'guchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'gsize *',
        name = 'out_len',
      ),
    ],
  ),
  'g_base64_decode_inplace': Spec(
    return_type = 'guchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'text',
      ),
      Param(
        type = 'gsize *',
        name = 'out_len',
      ),
    ],
  ),
  'g_bit_lock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'volatile gint *',
        name = 'address',
      ),
      Param(
        type = 'gint',
        name = 'lock_bit',
      ),
    ],
  ),
  'g_bit_trylock': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'volatile gint *',
        name = 'address',
      ),
      Param(
        type = 'gint',
        name = 'lock_bit',
      ),
    ],
  ),
  'g_bit_unlock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'volatile gint *',
        name = 'address',
      ),
      Param(
        type = 'gint',
        name = 'lock_bit',
      ),
    ],
  ),
  'g_pointer_bit_lock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'address',
      ),
      Param(
        type = 'gint',
        name = 'lock_bit',
      ),
    ],
  ),
  'g_pointer_bit_trylock': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'address',
      ),
      Param(
        type = 'gint',
        name = 'lock_bit',
      ),
    ],
  ),
  'g_pointer_bit_unlock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'address',
      ),
      Param(
        type = 'gint',
        name = 'lock_bit',
      ),
    ],
  ),
  'g_bookmark_file_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_bookmark_file_new': Spec(
    return_type = 'GBookmarkFile *',
    parameters = [
    ],
  ),
  'g_bookmark_file_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
    ],
  ),
  'g_bookmark_file_load_from_file': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_load_from_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_load_from_data_dirs': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'file',
      ),
      Param(
        type = 'gchar **',
        name = 'full_path',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_to_data': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_to_file': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_set_title': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
    ],
  ),
  'g_bookmark_file_get_title': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_set_description': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'description',
      ),
    ],
  ),
  'g_bookmark_file_get_description': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_set_mime_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'mime_type',
      ),
    ],
  ),
  'g_bookmark_file_get_mime_type': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_set_groups': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar **',
        name = 'groups',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
    ],
  ),
  'g_bookmark_file_add_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'group',
      ),
    ],
  ),
  'g_bookmark_file_has_group': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'group',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_get_groups': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_add_application': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'exec',
      ),
    ],
  ),
  'g_bookmark_file_has_application': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_get_applications': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_set_app_info': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'exec',
      ),
      Param(
        type = 'gint',
        name = 'count',
      ),
      Param(
        type = 'time_t',
        name = 'stamp',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_get_app_info': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'gchar **',
        name = 'exec',
      ),
      Param(
        type = 'guint *',
        name = 'count',
      ),
      Param(
        type = 'time_t *',
        name = 'stamp',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_set_is_private': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'gboolean',
        name = 'is_private',
      ),
    ],
  ),
  'g_bookmark_file_get_is_private': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_set_icon': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'href',
      ),
      Param(
        type = 'const gchar *',
        name = 'mime_type',
      ),
    ],
  ),
  'g_bookmark_file_get_icon': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'gchar **',
        name = 'href',
      ),
      Param(
        type = 'gchar **',
        name = 'mime_type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_set_added': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'time_t',
        name = 'added',
      ),
    ],
  ),
  'g_bookmark_file_get_added': Spec(
    return_type = 'time_t',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_set_modified': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'time_t',
        name = 'modified',
      ),
    ],
  ),
  'g_bookmark_file_get_modified': Spec(
    return_type = 'time_t',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_set_visited': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'time_t',
        name = 'visited',
      ),
    ],
  ),
  'g_bookmark_file_get_visited': Spec(
    return_type = 'time_t',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_has_item': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
    ],
  ),
  'g_bookmark_file_get_size': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
    ],
  ),
  'g_bookmark_file_get_uris': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_bookmark_file_remove_group': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'group',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_remove_application': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_remove_item': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_move_item': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'old_uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'new_uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bytes_new': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
    ],
  ),
  'g_bytes_new_take': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
    ],
  ),
  'g_bytes_new_static': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
    ],
  ),
  'g_bytes_new_with_free_func': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'free_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_bytes_new_from_bytes': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
      Param(
        type = 'gsize',
        name = 'offset',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
    ],
  ),
  'g_bytes_get_data': Spec(
    return_type = 'gconstpointer',
    parameters = [
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
      Param(
        type = 'gsize *',
        name = 'size',
      ),
    ],
  ),
  'g_bytes_get_size': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
    ],
  ),
  'g_bytes_ref': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
    ],
  ),
  'g_bytes_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
    ],
  ),
  'g_bytes_unref_to_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
      Param(
        type = 'gsize *',
        name = 'size',
      ),
    ],
  ),
  'g_bytes_unref_to_array': Spec(
    return_type = 'GByteArray *',
    parameters = [
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
    ],
  ),
  'g_bytes_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'bytes',
      ),
    ],
  ),
  'g_bytes_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'bytes1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'bytes2',
      ),
    ],
  ),
  'g_bytes_compare': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'bytes1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'bytes2',
      ),
    ],
  ),
  'g_get_charset': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char **',
        name = 'charset',
      ),
    ],
  ),
  'g_get_codeset': Spec(
    return_type = 'gchar *',
    parameters = [
    ],
  ),
  'g_get_language_names': Spec(
    return_type = 'const gchar *const *',
    parameters = [
    ],
  ),
  'g_get_locale_variants': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'locale',
      ),
    ],
  ),
  'g_checksum_type_get_length': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GChecksumType',
        name = 'checksum_type',
      ),
    ],
  ),
  'g_checksum_new': Spec(
    return_type = 'GChecksum *',
    parameters = [
      Param(
        type = 'GChecksumType',
        name = 'checksum_type',
      ),
    ],
  ),
  'g_checksum_reset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GChecksum *',
        name = 'checksum',
      ),
    ],
  ),
  'g_checksum_copy': Spec(
    return_type = 'GChecksum *',
    parameters = [
      Param(
        type = 'const GChecksum *',
        name = 'checksum',
      ),
    ],
  ),
  'g_checksum_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GChecksum *',
        name = 'checksum',
      ),
    ],
  ),
  'g_checksum_update': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GChecksum *',
        name = 'checksum',
      ),
      Param(
        type = 'const guchar *',
        name = 'data',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
    ],
  ),
  'g_checksum_get_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GChecksum *',
        name = 'checksum',
      ),
    ],
  ),
  'g_checksum_get_digest': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GChecksum *',
        name = 'checksum',
      ),
      Param(
        type = 'guint8 *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize *',
        name = 'digest_len',
      ),
    ],
  ),
  'g_compute_checksum_for_data': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GChecksumType',
        name = 'checksum_type',
      ),
      Param(
        type = 'const guchar *',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
    ],
  ),
  'g_compute_checksum_for_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GChecksumType',
        name = 'checksum_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
    ],
  ),
  'g_compute_checksum_for_bytes': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GChecksumType',
        name = 'checksum_type',
      ),
      Param(
        type = 'GBytes *',
        name = 'data',
      ),
    ],
  ),
  'g_convert_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_iconv_open': Spec(
    return_type = 'GIConv',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'to_codeset',
      ),
      Param(
        type = 'const gchar *',
        name = 'from_codeset',
      ),
    ],
  ),
  'g_iconv': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GIConv',
        name = 'converter',
      ),
      Param(
        type = 'gchar **',
        name = 'inbuf',
      ),
      Param(
        type = 'gsize *',
        name = 'inbytes_left',
      ),
      Param(
        type = 'gchar **',
        name = 'outbuf',
      ),
      Param(
        type = 'gsize *',
        name = 'outbytes_left',
      ),
    ],
  ),
  'g_iconv_close': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GIConv',
        name = 'converter',
      ),
    ],
  ),
  'g_convert': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'const gchar *',
        name = 'to_codeset',
      ),
      Param(
        type = 'const gchar *',
        name = 'from_codeset',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_read',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_convert_with_iconv': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'GIConv',
        name = 'converter',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_read',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_convert_with_fallback': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'const gchar *',
        name = 'to_codeset',
      ),
      Param(
        type = 'const gchar *',
        name = 'from_codeset',
      ),
      Param(
        type = 'const gchar *',
        name = 'fallback',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_read',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_locale_to_utf8': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'opsysstring',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_read',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_locale_from_utf8': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'utf8string',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_read',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_filename_to_utf8': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'opsysstring',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_read',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_filename_from_utf8': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'utf8string',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_read',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_filename_from_uri': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'gchar **',
        name = 'hostname',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_filename_to_uri': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'const gchar *',
        name = 'hostname',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_filename_display_name': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
    ],
  ),
  'g_get_filename_charsets': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar ***',
        name = 'charsets',
      ),
    ],
  ),
  'g_filename_display_basename': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
    ],
  ),
  'g_uri_list_extract_uris': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'uri_list',
      ),
    ],
  ),
  'g_datalist_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
    ],
  ),
  'g_datalist_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
    ],
  ),
  'g_datalist_id_get_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
      Param(
        type = 'GQuark',
        name = 'key_id',
      ),
    ],
  ),
  'g_datalist_id_set_data_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
      Param(
        type = 'GQuark',
        name = 'key_id',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy_func',
      ),
    ],
  ),
  'g_datalist_id_dup_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
      Param(
        type = 'GQuark',
        name = 'key_id',
      ),
      Param(
        type = 'GDuplicateFunc',
        name = 'dup_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_datalist_id_replace_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
      Param(
        type = 'GQuark',
        name = 'key_id',
      ),
      Param(
        type = 'gpointer',
        name = 'oldval',
      ),
      Param(
        type = 'gpointer',
        name = 'newval',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
      Param(
        type = 'GDestroyNotify *',
        name = 'old_destroy',
      ),
    ],
  ),
  'g_datalist_id_remove_no_notify': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
      Param(
        type = 'GQuark',
        name = 'key_id',
      ),
    ],
  ),
  'g_datalist_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
      Param(
        type = 'GDataForeachFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_datalist_set_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
      Param(
        type = 'guint',
        name = 'flags',
      ),
    ],
  ),
  'g_datalist_unset_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
      Param(
        type = 'guint',
        name = 'flags',
      ),
    ],
  ),
  'g_datalist_get_flags': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
    ],
  ),
  'g_dataset_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'dataset_location',
      ),
    ],
  ),
  'g_dataset_id_get_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'dataset_location',
      ),
      Param(
        type = 'GQuark',
        name = 'key_id',
      ),
    ],
  ),
  'g_datalist_get_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_dataset_id_set_data_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'dataset_location',
      ),
      Param(
        type = 'GQuark',
        name = 'key_id',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy_func',
      ),
    ],
  ),
  'g_dataset_id_remove_no_notify': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'dataset_location',
      ),
      Param(
        type = 'GQuark',
        name = 'key_id',
      ),
    ],
  ),
  'g_dataset_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'dataset_location',
      ),
      Param(
        type = 'GDataForeachFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_date_new': Spec(
    return_type = 'GDate *',
    parameters = [
    ],
  ),
  'g_date_new_dmy': Spec(
    return_type = 'GDate *',
    parameters = [
      Param(
        type = 'GDateDay',
        name = 'day',
      ),
      Param(
        type = 'GDateMonth',
        name = 'month',
      ),
      Param(
        type = 'GDateYear',
        name = 'year',
      ),
    ],
  ),
  'g_date_new_julian': Spec(
    return_type = 'GDate *',
    parameters = [
      Param(
        type = 'guint32',
        name = 'julian_day',
      ),
    ],
  ),
  'g_date_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_valid': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_valid_day': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDateDay',
        name = 'day',
      ),
    ],
  ),
  'g_date_valid_month': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDateMonth',
        name = 'month',
      ),
    ],
  ),
  'g_date_valid_year': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDateYear',
        name = 'year',
      ),
    ],
  ),
  'g_date_valid_weekday': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDateWeekday',
        name = 'weekday',
      ),
    ],
  ),
  'g_date_valid_julian': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'guint32',
        name = 'julian_date',
      ),
    ],
  ),
  'g_date_valid_dmy': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDateDay',
        name = 'day',
      ),
      Param(
        type = 'GDateMonth',
        name = 'month',
      ),
      Param(
        type = 'GDateYear',
        name = 'year',
      ),
    ],
  ),
  'g_date_get_weekday': Spec(
    return_type = 'GDateWeekday',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_get_month': Spec(
    return_type = 'GDateMonth',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_get_year': Spec(
    return_type = 'GDateYear',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_get_day': Spec(
    return_type = 'GDateDay',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_get_julian': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_get_day_of_year': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_get_monday_week_of_year': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_get_sunday_week_of_year': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_get_iso8601_week_of_year': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'guint',
        name = 'n_dates',
      ),
    ],
  ),
  'g_date_set_parse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
    ],
  ),
  'g_date_set_time_t': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'time_t',
        name = 'timet',
      ),
    ],
  ),
  'g_date_set_time_val': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'GTimeVal *',
        name = 'timeval',
      ),
    ],
  ),
  'g_date_set_time': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'GTime',
        name = 'time_',
      ),
    ],
  ),
  'g_date_set_month': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'GDateMonth',
        name = 'month',
      ),
    ],
  ),
  'g_date_set_day': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'GDateDay',
        name = 'day',
      ),
    ],
  ),
  'g_date_set_year': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'GDateYear',
        name = 'year',
      ),
    ],
  ),
  'g_date_set_dmy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'GDateDay',
        name = 'day',
      ),
      Param(
        type = 'GDateMonth',
        name = 'month',
      ),
      Param(
        type = 'GDateYear',
        name = 'y',
      ),
    ],
  ),
  'g_date_set_julian': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'guint32',
        name = 'julian_date',
      ),
    ],
  ),
  'g_date_is_first_of_month': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_is_last_of_month': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_add_days': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'guint',
        name = 'n_days',
      ),
    ],
  ),
  'g_date_subtract_days': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'guint',
        name = 'n_days',
      ),
    ],
  ),
  'g_date_add_months': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'guint',
        name = 'n_months',
      ),
    ],
  ),
  'g_date_subtract_months': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'guint',
        name = 'n_months',
      ),
    ],
  ),
  'g_date_add_years': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'guint',
        name = 'n_years',
      ),
    ],
  ),
  'g_date_subtract_years': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'guint',
        name = 'n_years',
      ),
    ],
  ),
  'g_date_is_leap_year': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDateYear',
        name = 'year',
      ),
    ],
  ),
  'g_date_get_days_in_month': Spec(
    return_type = 'guint8',
    parameters = [
      Param(
        type = 'GDateMonth',
        name = 'month',
      ),
      Param(
        type = 'GDateYear',
        name = 'year',
      ),
    ],
  ),
  'g_date_get_monday_weeks_in_year': Spec(
    return_type = 'guint8',
    parameters = [
      Param(
        type = 'GDateYear',
        name = 'year',
      ),
    ],
  ),
  'g_date_get_sunday_weeks_in_year': Spec(
    return_type = 'guint8',
    parameters = [
      Param(
        type = 'GDateYear',
        name = 'year',
      ),
    ],
  ),
  'g_date_days_between': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date1',
      ),
      Param(
        type = 'const GDate *',
        name = 'date2',
      ),
    ],
  ),
  'g_date_compare': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'lhs',
      ),
      Param(
        type = 'const GDate *',
        name = 'rhs',
      ),
    ],
  ),
  'g_date_to_struct_tm': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
      Param(
        type = 'struct tm *',
        name = 'tm',
      ),
    ],
  ),
  'g_date_clamp': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'const GDate *',
        name = 'min_date',
      ),
      Param(
        type = 'const GDate *',
        name = 'max_date',
      ),
    ],
  ),
  'g_date_order': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date1',
      ),
      Param(
        type = 'GDate *',
        name = 'date2',
      ),
    ],
  ),
  'g_date_strftime': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'gchar *',
        name = 's',
      ),
      Param(
        type = 'gsize',
        name = 'slen',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_time_zone_new': Spec(
    return_type = 'GTimeZone *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'identifier',
      ),
    ],
  ),
  'g_time_zone_new_utc': Spec(
    return_type = 'GTimeZone *',
    parameters = [
    ],
  ),
  'g_time_zone_new_local': Spec(
    return_type = 'GTimeZone *',
    parameters = [
    ],
  ),
  'g_time_zone_ref': Spec(
    return_type = 'GTimeZone *',
    parameters = [
      Param(
        type = 'GTimeZone *',
        name = 'tz',
      ),
    ],
  ),
  'g_time_zone_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTimeZone *',
        name = 'tz',
      ),
    ],
  ),
  'g_time_zone_find_interval': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GTimeZone *',
        name = 'tz',
      ),
      Param(
        type = 'GTimeType',
        name = 'type',
      ),
      Param(
        type = 'gint64',
        name = 'time_',
      ),
    ],
  ),
  'g_time_zone_adjust_time': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GTimeZone *',
        name = 'tz',
      ),
      Param(
        type = 'GTimeType',
        name = 'type',
      ),
      Param(
        type = 'gint64 *',
        name = 'time_',
      ),
    ],
  ),
  'g_time_zone_get_abbreviation': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GTimeZone *',
        name = 'tz',
      ),
      Param(
        type = 'gint',
        name = 'interval',
      ),
    ],
  ),
  'g_time_zone_get_offset': Spec(
    return_type = 'gint32',
    parameters = [
      Param(
        type = 'GTimeZone *',
        name = 'tz',
      ),
      Param(
        type = 'gint',
        name = 'interval',
      ),
    ],
  ),
  'g_time_zone_is_dst': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTimeZone *',
        name = 'tz',
      ),
      Param(
        type = 'gint',
        name = 'interval',
      ),
    ],
  ),
  'g_date_time_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_ref': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_new_now': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GTimeZone *',
        name = 'tz',
      ),
    ],
  ),
  'g_date_time_new_now_local': Spec(
    return_type = 'GDateTime *',
    parameters = [
    ],
  ),
  'g_date_time_new_now_utc': Spec(
    return_type = 'GDateTime *',
    parameters = [
    ],
  ),
  'g_date_time_new_from_unix_local': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'gint64',
        name = 't',
      ),
    ],
  ),
  'g_date_time_new_from_unix_utc': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'gint64',
        name = 't',
      ),
    ],
  ),
  'g_date_time_new_from_timeval_local': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'const GTimeVal *',
        name = 'tv',
      ),
    ],
  ),
  'g_date_time_new_from_timeval_utc': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'const GTimeVal *',
        name = 'tv',
      ),
    ],
  ),
  'g_date_time_new': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GTimeZone *',
        name = 'tz',
      ),
      Param(
        type = 'gint',
        name = 'year',
      ),
      Param(
        type = 'gint',
        name = 'month',
      ),
      Param(
        type = 'gint',
        name = 'day',
      ),
      Param(
        type = 'gint',
        name = 'hour',
      ),
      Param(
        type = 'gint',
        name = 'minute',
      ),
      Param(
        type = 'gdouble',
        name = 'seconds',
      ),
    ],
  ),
  'g_date_time_new_local': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'gint',
        name = 'year',
      ),
      Param(
        type = 'gint',
        name = 'month',
      ),
      Param(
        type = 'gint',
        name = 'day',
      ),
      Param(
        type = 'gint',
        name = 'hour',
      ),
      Param(
        type = 'gint',
        name = 'minute',
      ),
      Param(
        type = 'gdouble',
        name = 'seconds',
      ),
    ],
  ),
  'g_date_time_new_utc': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'gint',
        name = 'year',
      ),
      Param(
        type = 'gint',
        name = 'month',
      ),
      Param(
        type = 'gint',
        name = 'day',
      ),
      Param(
        type = 'gint',
        name = 'hour',
      ),
      Param(
        type = 'gint',
        name = 'minute',
      ),
      Param(
        type = 'gdouble',
        name = 'seconds',
      ),
    ],
  ),
  'g_date_time_add': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'GTimeSpan',
        name = 'timespan',
      ),
    ],
  ),
  'g_date_time_add_years': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'gint',
        name = 'years',
      ),
    ],
  ),
  'g_date_time_add_months': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'gint',
        name = 'months',
      ),
    ],
  ),
  'g_date_time_add_weeks': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'gint',
        name = 'weeks',
      ),
    ],
  ),
  'g_date_time_add_days': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'gint',
        name = 'days',
      ),
    ],
  ),
  'g_date_time_add_hours': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'gint',
        name = 'hours',
      ),
    ],
  ),
  'g_date_time_add_minutes': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'gint',
        name = 'minutes',
      ),
    ],
  ),
  'g_date_time_add_seconds': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'gdouble',
        name = 'seconds',
      ),
    ],
  ),
  'g_date_time_add_full': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'gint',
        name = 'years',
      ),
      Param(
        type = 'gint',
        name = 'months',
      ),
      Param(
        type = 'gint',
        name = 'days',
      ),
      Param(
        type = 'gint',
        name = 'hours',
      ),
      Param(
        type = 'gint',
        name = 'minutes',
      ),
      Param(
        type = 'gdouble',
        name = 'seconds',
      ),
    ],
  ),
  'g_date_time_compare': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'dt1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'dt2',
      ),
    ],
  ),
  'g_date_time_difference': Spec(
    return_type = 'GTimeSpan',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'end',
      ),
      Param(
        type = 'GDateTime *',
        name = 'begin',
      ),
    ],
  ),
  'g_date_time_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'dt1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'dt2',
      ),
    ],
  ),
  'g_date_time_get_ymd': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'gint *',
        name = 'year',
      ),
      Param(
        type = 'gint *',
        name = 'month',
      ),
      Param(
        type = 'gint *',
        name = 'day',
      ),
    ],
  ),
  'g_date_time_get_year': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_month': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_day_of_month': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_week_numbering_year': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_week_of_year': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_day_of_week': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_day_of_year': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_hour': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_minute': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_second': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_microsecond': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_seconds': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_to_unix': Spec(
    return_type = 'gint64',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_to_timeval': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'GTimeVal *',
        name = 'tv',
      ),
    ],
  ),
  'g_date_time_get_utc_offset': Spec(
    return_type = 'GTimeSpan',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_timezone_abbreviation': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_is_daylight_savings': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_to_timezone': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'GTimeZone *',
        name = 'tz',
      ),
    ],
  ),
  'g_date_time_to_local': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_to_utc': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_format': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_dir_open': Spec(
    return_type = 'GDir *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
      Param(
        type = 'guint',
        name = 'flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dir_read_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDir *',
        name = 'dir',
      ),
    ],
  ),
  'g_dir_rewind': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDir *',
        name = 'dir',
      ),
    ],
  ),
  'g_dir_close': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDir *',
        name = 'dir',
      ),
    ],
  ),
  'g_getenv': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'variable',
      ),
    ],
  ),
  'g_setenv': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'variable',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
      Param(
        type = 'gboolean',
        name = 'overwrite',
      ),
    ],
  ),
  'g_unsetenv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'variable',
      ),
    ],
  ),
  'g_listenv': Spec(
    return_type = 'gchar **',
    parameters = [
    ],
  ),
  'g_get_environ': Spec(
    return_type = 'gchar **',
    parameters = [
    ],
  ),
  'g_environ_getenv': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'gchar **',
        name = 'envp',
      ),
      Param(
        type = 'const gchar *',
        name = 'variable',
      ),
    ],
  ),
  'g_environ_setenv': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'gchar **',
        name = 'envp',
      ),
      Param(
        type = 'const gchar *',
        name = 'variable',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
      Param(
        type = 'gboolean',
        name = 'overwrite',
      ),
    ],
  ),
  'g_environ_unsetenv': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'gchar **',
        name = 'envp',
      ),
      Param(
        type = 'const gchar *',
        name = 'variable',
      ),
    ],
  ),
  'g_file_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_file_error_from_errno': Spec(
    return_type = 'GFileError',
    parameters = [
      Param(
        type = 'gint',
        name = 'err_no',
      ),
    ],
  ),
  'g_file_test': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'GFileTest',
        name = 'test',
      ),
    ],
  ),
  'g_file_get_contents': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'gchar **',
        name = 'contents',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_contents': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'const gchar *',
        name = 'contents',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_read_link': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_mkdtemp': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'tmpl',
      ),
    ],
  ),
  'g_mkdtemp_full': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'tmpl',
      ),
      Param(
        type = 'gint',
        name = 'mode',
      ),
    ],
  ),
  'g_mkstemp': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'tmpl',
      ),
    ],
  ),
  'g_mkstemp_full': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'tmpl',
      ),
      Param(
        type = 'gint',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'mode',
      ),
    ],
  ),
  'g_file_open_tmp': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'tmpl',
      ),
      Param(
        type = 'gchar **',
        name = 'name_used',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dir_make_tmp': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'tmpl',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_build_path': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'separator',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_element',
      ),
    ],
  ),
  'g_build_pathv': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'separator',
      ),
      Param(
        type = 'gchar **',
        name = 'args',
      ),
    ],
  ),
  'g_build_filename': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'first_element',
      ),
    ],
  ),
  'g_build_filenamev': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar **',
        name = 'args',
      ),
    ],
  ),
  'g_mkdir_with_parents': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'pathname',
      ),
      Param(
        type = 'gint',
        name = 'mode',
      ),
    ],
  ),
  'g_path_is_absolute': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'file_name',
      ),
    ],
  ),
  'g_path_skip_root': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'file_name',
      ),
    ],
  ),
  'g_basename': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'file_name',
      ),
    ],
  ),
  'g_get_current_dir': Spec(
    return_type = 'gchar *',
    parameters = [
    ],
  ),
  'g_path_get_basename': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'file_name',
      ),
    ],
  ),
  'g_path_get_dirname': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'file_name',
      ),
    ],
  ),
  'g_strip_context': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'msgid',
      ),
      Param(
        type = 'const gchar *',
        name = 'msgval',
      ),
    ],
  ),
  'g_dgettext': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
      Param(
        type = 'const gchar *',
        name = 'msgid',
      ),
    ],
  ),
  'g_dcgettext': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
      Param(
        type = 'const gchar *',
        name = 'msgid',
      ),
      Param(
        type = 'gint',
        name = 'category',
      ),
    ],
  ),
  'g_dngettext': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
      Param(
        type = 'const gchar *',
        name = 'msgid',
      ),
      Param(
        type = 'const gchar *',
        name = 'msgid_plural',
      ),
      Param(
        type = 'gulong',
        name = 'n',
      ),
    ],
  ),
  'g_dpgettext': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
      Param(
        type = 'const gchar *',
        name = 'msgctxtid',
      ),
      Param(
        type = 'gsize',
        name = 'msgidoffset',
      ),
    ],
  ),
  'g_dpgettext2': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
      Param(
        type = 'const gchar *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'msgid',
      ),
    ],
  ),
  'g_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'mem',
      ),
    ],
  ),
  'g_clear_pointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer *',
        name = 'pp',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'g_malloc': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gsize',
        name = 'n_bytes',
      ),
    ],
  ),
  'g_malloc0': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gsize',
        name = 'n_bytes',
      ),
    ],
  ),
  'g_realloc': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'mem',
      ),
      Param(
        type = 'gsize',
        name = 'n_bytes',
      ),
    ],
  ),
  'g_try_malloc': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gsize',
        name = 'n_bytes',
      ),
    ],
  ),
  'g_try_malloc0': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gsize',
        name = 'n_bytes',
      ),
    ],
  ),
  'g_try_realloc': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'mem',
      ),
      Param(
        type = 'gsize',
        name = 'n_bytes',
      ),
    ],
  ),
  'g_malloc_n': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gsize',
        name = 'n_blocks',
      ),
      Param(
        type = 'gsize',
        name = 'n_block_bytes',
      ),
    ],
  ),
  'g_malloc0_n': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gsize',
        name = 'n_blocks',
      ),
      Param(
        type = 'gsize',
        name = 'n_block_bytes',
      ),
    ],
  ),
  'g_realloc_n': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'mem',
      ),
      Param(
        type = 'gsize',
        name = 'n_blocks',
      ),
      Param(
        type = 'gsize',
        name = 'n_block_bytes',
      ),
    ],
  ),
  'g_try_malloc_n': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gsize',
        name = 'n_blocks',
      ),
      Param(
        type = 'gsize',
        name = 'n_block_bytes',
      ),
    ],
  ),
  'g_try_malloc0_n': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gsize',
        name = 'n_blocks',
      ),
      Param(
        type = 'gsize',
        name = 'n_block_bytes',
      ),
    ],
  ),
  'g_try_realloc_n': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'mem',
      ),
      Param(
        type = 'gsize',
        name = 'n_blocks',
      ),
      Param(
        type = 'gsize',
        name = 'n_block_bytes',
      ),
    ],
  ),
  'g_mem_set_vtable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMemVTable *',
        name = 'vtable',
      ),
    ],
  ),
  'g_mem_is_system_malloc': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'g_mem_profile': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_node_new': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_node_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'root',
      ),
    ],
  ),
  'g_node_unlink': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_copy_deep': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
      Param(
        type = 'GCopyFunc',
        name = 'copy_func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_node_copy': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_insert': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'parent',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_insert_before': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'parent',
      ),
      Param(
        type = 'GNode *',
        name = 'sibling',
      ),
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_insert_after': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'parent',
      ),
      Param(
        type = 'GNode *',
        name = 'sibling',
      ),
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_prepend': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'parent',
      ),
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_n_nodes': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'root',
      ),
      Param(
        type = 'GTraverseFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_node_get_root': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_is_ancestor': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
      Param(
        type = 'GNode *',
        name = 'descendant',
      ),
    ],
  ),
  'g_node_depth': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_find': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'root',
      ),
      Param(
        type = 'GTraverseType',
        name = 'order',
      ),
      Param(
        type = 'GTraverseFlags',
        name = 'flags',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_node_traverse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'root',
      ),
      Param(
        type = 'GTraverseType',
        name = 'order',
      ),
      Param(
        type = 'GTraverseFlags',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'max_depth',
      ),
      Param(
        type = 'GNodeTraverseFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_node_max_height': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'root',
      ),
    ],
  ),
  'g_node_children_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
      Param(
        type = 'GTraverseFlags',
        name = 'flags',
      ),
      Param(
        type = 'GNodeForeachFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_node_reverse_children': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_n_children': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_nth_child': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
      Param(
        type = 'guint',
        name = 'n',
      ),
    ],
  ),
  'g_node_last_child': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_find_child': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
      Param(
        type = 'GTraverseFlags',
        name = 'flags',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_node_child_position': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
      Param(
        type = 'GNode *',
        name = 'child',
      ),
    ],
  ),
  'g_node_child_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_node_first_sibling': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_last_sibling': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_list_alloc': Spec(
    return_type = 'GList *',
    parameters = [
    ],
  ),
  'g_list_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
    ],
  ),
  'g_list_free_1': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
    ],
  ),
  'g_list_free_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'free_func',
      ),
    ],
  ),
  'g_list_append': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_list_prepend': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_list_insert': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'g_list_insert_sorted': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'func',
      ),
    ],
  ),
  'g_list_insert_sorted_with_data': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_list_insert_before': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'GList *',
        name = 'sibling',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_list_concat': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list1',
      ),
      Param(
        type = 'GList *',
        name = 'list2',
      ),
    ],
  ),
  'g_list_remove': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_list_remove_all': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_list_remove_link': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'GList *',
        name = 'llink',
      ),
    ],
  ),
  'g_list_delete_link': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'GList *',
        name = 'link_',
      ),
    ],
  ),
  'g_list_reverse': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
    ],
  ),
  'g_list_copy': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
    ],
  ),
  'g_list_copy_deep': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'GCopyFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_list_nth': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'guint',
        name = 'n',
      ),
    ],
  ),
  'g_list_nth_prev': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'guint',
        name = 'n',
      ),
    ],
  ),
  'g_list_find': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_list_find_custom': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'func',
      ),
    ],
  ),
  'g_list_position': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'GList *',
        name = 'llink',
      ),
    ],
  ),
  'g_list_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_list_last': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
    ],
  ),
  'g_list_first': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
    ],
  ),
  'g_list_length': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
    ],
  ),
  'g_list_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'GFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_list_sort': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'compare_func',
      ),
    ],
  ),
  'g_list_sort_with_data': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'compare_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_list_nth_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'guint',
        name = 'n',
      ),
    ],
  ),
  'g_hash_table_new': Spec(
    return_type = 'GHashTable *',
    parameters = [
      Param(
        type = 'GHashFunc',
        name = 'hash_func',
      ),
      Param(
        type = 'GEqualFunc',
        name = 'key_equal_func',
      ),
    ],
  ),
  'g_hash_table_new_full': Spec(
    return_type = 'GHashTable *',
    parameters = [
      Param(
        type = 'GHashFunc',
        name = 'hash_func',
      ),
      Param(
        type = 'GEqualFunc',
        name = 'key_equal_func',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'key_destroy_func',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'value_destroy_func',
      ),
    ],
  ),
  'g_hash_table_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
    ],
  ),
  'g_hash_table_insert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'gpointer',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'value',
      ),
    ],
  ),
  'g_hash_table_replace': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'gpointer',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'value',
      ),
    ],
  ),
  'g_hash_table_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'gpointer',
        name = 'key',
      ),
    ],
  ),
  'g_hash_table_remove': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'gconstpointer',
        name = 'key',
      ),
    ],
  ),
  'g_hash_table_remove_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
    ],
  ),
  'g_hash_table_steal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'gconstpointer',
        name = 'key',
      ),
    ],
  ),
  'g_hash_table_steal_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
    ],
  ),
  'g_hash_table_lookup': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'gconstpointer',
        name = 'key',
      ),
    ],
  ),
  'g_hash_table_contains': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'gconstpointer',
        name = 'key',
      ),
    ],
  ),
  'g_hash_table_lookup_extended': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'gconstpointer',
        name = 'lookup_key',
      ),
      Param(
        type = 'gpointer *',
        name = 'orig_key',
      ),
      Param(
        type = 'gpointer *',
        name = 'value',
      ),
    ],
  ),
  'g_hash_table_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'GHFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_hash_table_find': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'GHRFunc',
        name = 'predicate',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_hash_table_foreach_remove': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'GHRFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_hash_table_foreach_steal': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'GHRFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_hash_table_size': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
    ],
  ),
  'g_hash_table_get_keys': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
    ],
  ),
  'g_hash_table_get_values': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
    ],
  ),
  'g_hash_table_iter_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTableIter *',
        name = 'iter',
      ),
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
    ],
  ),
  'g_hash_table_iter_next': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GHashTableIter *',
        name = 'iter',
      ),
      Param(
        type = 'gpointer *',
        name = 'key',
      ),
      Param(
        type = 'gpointer *',
        name = 'value',
      ),
    ],
  ),
  'g_hash_table_iter_get_hash_table': Spec(
    return_type = 'GHashTable *',
    parameters = [
      Param(
        type = 'GHashTableIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_hash_table_iter_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTableIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_hash_table_iter_replace': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTableIter *',
        name = 'iter',
      ),
      Param(
        type = 'gpointer',
        name = 'value',
      ),
    ],
  ),
  'g_hash_table_iter_steal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTableIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_hash_table_ref': Spec(
    return_type = 'GHashTable *',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
    ],
  ),
  'g_hash_table_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
    ],
  ),
  'g_str_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'v2',
      ),
    ],
  ),
  'g_str_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v',
      ),
    ],
  ),
  'g_int_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'v2',
      ),
    ],
  ),
  'g_int_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v',
      ),
    ],
  ),
  'g_int64_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'v2',
      ),
    ],
  ),
  'g_int64_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v',
      ),
    ],
  ),
  'g_double_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'v2',
      ),
    ],
  ),
  'g_double_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v',
      ),
    ],
  ),
  'g_direct_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v',
      ),
    ],
  ),
  'g_direct_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'v2',
      ),
    ],
  ),
  'g_hmac_new': Spec(
    return_type = 'GHmac *',
    parameters = [
      Param(
        type = 'GChecksumType',
        name = 'digest_type',
      ),
      Param(
        type = 'const guchar *',
        name = 'key',
      ),
      Param(
        type = 'gsize',
        name = 'key_len',
      ),
    ],
  ),
  'g_hmac_copy': Spec(
    return_type = 'GHmac *',
    parameters = [
      Param(
        type = 'const GHmac *',
        name = 'hmac',
      ),
    ],
  ),
  'g_hmac_ref': Spec(
    return_type = 'GHmac *',
    parameters = [
      Param(
        type = 'GHmac *',
        name = 'hmac',
      ),
    ],
  ),
  'g_hmac_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHmac *',
        name = 'hmac',
      ),
    ],
  ),
  'g_hmac_update': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHmac *',
        name = 'hmac',
      ),
      Param(
        type = 'const guchar *',
        name = 'data',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
    ],
  ),
  'g_hmac_get_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GHmac *',
        name = 'hmac',
      ),
    ],
  ),
  'g_hmac_get_digest': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHmac *',
        name = 'hmac',
      ),
      Param(
        type = 'guint8 *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize *',
        name = 'digest_len',
      ),
    ],
  ),
  'g_compute_hmac_for_data': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GChecksumType',
        name = 'digest_type',
      ),
      Param(
        type = 'const guchar *',
        name = 'key',
      ),
      Param(
        type = 'gsize',
        name = 'key_len',
      ),
      Param(
        type = 'const guchar *',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
    ],
  ),
  'g_compute_hmac_for_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GChecksumType',
        name = 'digest_type',
      ),
      Param(
        type = 'const guchar *',
        name = 'key',
      ),
      Param(
        type = 'gsize',
        name = 'key_len',
      ),
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
    ],
  ),
  'g_hook_list_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'guint',
        name = 'hook_size',
      ),
    ],
  ),
  'g_hook_list_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
    ],
  ),
  'g_hook_alloc': Spec(
    return_type = 'GHook *',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
    ],
  ),
  'g_hook_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'GHook *',
        name = 'hook',
      ),
    ],
  ),
  'g_hook_ref': Spec(
    return_type = 'GHook *',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'GHook *',
        name = 'hook',
      ),
    ],
  ),
  'g_hook_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'GHook *',
        name = 'hook',
      ),
    ],
  ),
  'g_hook_destroy': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'gulong',
        name = 'hook_id',
      ),
    ],
  ),
  'g_hook_destroy_link': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'GHook *',
        name = 'hook',
      ),
    ],
  ),
  'g_hook_prepend': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'GHook *',
        name = 'hook',
      ),
    ],
  ),
  'g_hook_insert_before': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'GHook *',
        name = 'sibling',
      ),
      Param(
        type = 'GHook *',
        name = 'hook',
      ),
    ],
  ),
  'g_hook_insert_sorted': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'GHook *',
        name = 'hook',
      ),
      Param(
        type = 'GHookCompareFunc',
        name = 'func',
      ),
    ],
  ),
  'g_hook_get': Spec(
    return_type = 'GHook *',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'gulong',
        name = 'hook_id',
      ),
    ],
  ),
  'g_hook_find': Spec(
    return_type = 'GHook *',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'gboolean',
        name = 'need_valids',
      ),
      Param(
        type = 'GHookFindFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_hook_find_data': Spec(
    return_type = 'GHook *',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'gboolean',
        name = 'need_valids',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_hook_find_func': Spec(
    return_type = 'GHook *',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'gboolean',
        name = 'need_valids',
      ),
      Param(
        type = 'gpointer',
        name = 'func',
      ),
    ],
  ),
  'g_hook_find_func_data': Spec(
    return_type = 'GHook *',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'gboolean',
        name = 'need_valids',
      ),
      Param(
        type = 'gpointer',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_hook_first_valid': Spec(
    return_type = 'GHook *',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'gboolean',
        name = 'may_be_in_call',
      ),
    ],
  ),
  'g_hook_next_valid': Spec(
    return_type = 'GHook *',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'GHook *',
        name = 'hook',
      ),
      Param(
        type = 'gboolean',
        name = 'may_be_in_call',
      ),
    ],
  ),
  'g_hook_compare_ids': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GHook *',
        name = 'new_hook',
      ),
      Param(
        type = 'GHook *',
        name = 'sibling',
      ),
    ],
  ),
  'g_hook_list_invoke': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'gboolean',
        name = 'may_recurse',
      ),
    ],
  ),
  'g_hook_list_invoke_check': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'gboolean',
        name = 'may_recurse',
      ),
    ],
  ),
  'g_hook_list_marshal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'gboolean',
        name = 'may_recurse',
      ),
      Param(
        type = 'GHookMarshaller',
        name = 'marshaller',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_hook_list_marshal_check': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'gboolean',
        name = 'may_recurse',
      ),
      Param(
        type = 'GHookCheckMarshaller',
        name = 'marshaller',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_hostname_is_non_ascii': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'hostname',
      ),
    ],
  ),
  'g_hostname_is_ascii_encoded': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'hostname',
      ),
    ],
  ),
  'g_hostname_is_ip_address': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'hostname',
      ),
    ],
  ),
  'g_hostname_to_ascii': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'hostname',
      ),
    ],
  ),
  'g_hostname_to_unicode': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'hostname',
      ),
    ],
  ),
  'g_poll': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GPollFD *',
        name = 'fds',
      ),
      Param(
        type = 'guint',
        name = 'nfds',
      ),
      Param(
        type = 'gint',
        name = 'timeout',
      ),
    ],
  ),
  'g_slist_alloc': Spec(
    return_type = 'GSList *',
    parameters = [
    ],
  ),
  'g_slist_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
    ],
  ),
  'g_slist_free_1': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
    ],
  ),
  'g_slist_free_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'free_func',
      ),
    ],
  ),
  'g_slist_append': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_slist_prepend': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_slist_insert': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'g_slist_insert_sorted': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'func',
      ),
    ],
  ),
  'g_slist_insert_sorted_with_data': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_slist_insert_before': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'slist',
      ),
      Param(
        type = 'GSList *',
        name = 'sibling',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_slist_concat': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list1',
      ),
      Param(
        type = 'GSList *',
        name = 'list2',
      ),
    ],
  ),
  'g_slist_remove': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_slist_remove_all': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_slist_remove_link': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'GSList *',
        name = 'link_',
      ),
    ],
  ),
  'g_slist_delete_link': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'GSList *',
        name = 'link_',
      ),
    ],
  ),
  'g_slist_reverse': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
    ],
  ),
  'g_slist_copy': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
    ],
  ),
  'g_slist_copy_deep': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'GCopyFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_slist_nth': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'guint',
        name = 'n',
      ),
    ],
  ),
  'g_slist_find': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_slist_find_custom': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'func',
      ),
    ],
  ),
  'g_slist_position': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'GSList *',
        name = 'llink',
      ),
    ],
  ),
  'g_slist_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_slist_last': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
    ],
  ),
  'g_slist_length': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
    ],
  ),
  'g_slist_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'GFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_slist_sort': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'compare_func',
      ),
    ],
  ),
  'g_slist_sort_with_data': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'compare_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_slist_nth_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'guint',
        name = 'n',
      ),
    ],
  ),
  'g_main_context_new': Spec(
    return_type = 'GMainContext *',
    parameters = [
    ],
  ),
  'g_main_context_ref': Spec(
    return_type = 'GMainContext *',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_main_context_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_main_context_default': Spec(
    return_type = 'GMainContext *',
    parameters = [
    ],
  ),
  'g_main_context_iteration': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'gboolean',
        name = 'may_block',
      ),
    ],
  ),
  'g_main_context_pending': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_main_context_find_source_by_id': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'guint',
        name = 'source_id',
      ),
    ],
  ),
  'g_main_context_find_source_by_user_data': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_main_context_find_source_by_funcs_user_data': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'GSourceFuncs *',
        name = 'funcs',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_main_context_wakeup': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_main_context_acquire': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_main_context_release': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_main_context_is_owner': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_main_context_wait': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'GCond *',
        name = 'cond',
      ),
      Param(
        type = 'GMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_main_context_prepare': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'gint *',
        name = 'priority',
      ),
    ],
  ),
  'g_main_context_query': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'gint',
        name = 'max_priority',
      ),
      Param(
        type = 'gint *',
        name = 'timeout_',
      ),
      Param(
        type = 'GPollFD *',
        name = 'fds',
      ),
      Param(
        type = 'gint',
        name = 'n_fds',
      ),
    ],
  ),
  'g_main_context_check': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'gint',
        name = 'max_priority',
      ),
      Param(
        type = 'GPollFD *',
        name = 'fds',
      ),
      Param(
        type = 'gint',
        name = 'n_fds',
      ),
    ],
  ),
  'g_main_context_dispatch': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_main_context_set_poll_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'GPollFunc',
        name = 'func',
      ),
    ],
  ),
  'g_main_context_get_poll_func': Spec(
    return_type = 'GPollFunc',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_main_context_add_poll': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'GPollFD *',
        name = 'fd',
      ),
      Param(
        type = 'gint',
        name = 'priority',
      ),
    ],
  ),
  'g_main_context_remove_poll': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'GPollFD *',
        name = 'fd',
      ),
    ],
  ),
  'g_main_depth': Spec(
    return_type = 'gint',
    parameters = [
    ],
  ),
  'g_main_current_source': Spec(
    return_type = 'GSource *',
    parameters = [
    ],
  ),
  'g_main_context_push_thread_default': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_main_context_pop_thread_default': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_main_context_get_thread_default': Spec(
    return_type = 'GMainContext *',
    parameters = [
    ],
  ),
  'g_main_context_ref_thread_default': Spec(
    return_type = 'GMainContext *',
    parameters = [
    ],
  ),
  'g_main_loop_new': Spec(
    return_type = 'GMainLoop *',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'gboolean',
        name = 'is_running',
      ),
    ],
  ),
  'g_main_loop_run': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainLoop *',
        name = 'loop',
      ),
    ],
  ),
  'g_main_loop_quit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainLoop *',
        name = 'loop',
      ),
    ],
  ),
  'g_main_loop_ref': Spec(
    return_type = 'GMainLoop *',
    parameters = [
      Param(
        type = 'GMainLoop *',
        name = 'loop',
      ),
    ],
  ),
  'g_main_loop_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainLoop *',
        name = 'loop',
      ),
    ],
  ),
  'g_main_loop_is_running': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMainLoop *',
        name = 'loop',
      ),
    ],
  ),
  'g_main_loop_get_context': Spec(
    return_type = 'GMainContext *',
    parameters = [
      Param(
        type = 'GMainLoop *',
        name = 'loop',
      ),
    ],
  ),
  'g_source_new': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GSourceFuncs *',
        name = 'source_funcs',
      ),
      Param(
        type = 'guint',
        name = 'struct_size',
      ),
    ],
  ),
  'g_source_ref': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
    ],
  ),
  'g_source_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
    ],
  ),
  'g_source_attach': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_source_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
    ],
  ),
  'g_source_set_priority': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'gint',
        name = 'priority',
      ),
    ],
  ),
  'g_source_get_priority': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
    ],
  ),
  'g_source_set_can_recurse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'gboolean',
        name = 'can_recurse',
      ),
    ],
  ),
  'g_source_get_can_recurse': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
    ],
  ),
  'g_source_get_id': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
    ],
  ),
  'g_source_get_context': Spec(
    return_type = 'GMainContext *',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
    ],
  ),
  'g_source_set_callback': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_source_set_funcs': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'GSourceFuncs *',
        name = 'funcs',
      ),
    ],
  ),
  'g_source_is_destroyed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
    ],
  ),
  'g_source_set_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'const char *',
        name = 'name',
      ),
    ],
  ),
  'g_source_get_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
    ],
  ),
  'g_source_set_name_by_id': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'tag',
      ),
      Param(
        type = 'const char *',
        name = 'name',
      ),
    ],
  ),
  'g_source_set_callback_indirect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'gpointer',
        name = 'callback_data',
      ),
      Param(
        type = 'GSourceCallbackFuncs *',
        name = 'callback_funcs',
      ),
    ],
  ),
  'g_source_add_poll': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'GPollFD *',
        name = 'fd',
      ),
    ],
  ),
  'g_source_remove_poll': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'GPollFD *',
        name = 'fd',
      ),
    ],
  ),
  'g_source_add_child_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'GSource *',
        name = 'child_source',
      ),
    ],
  ),
  'g_source_remove_child_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'GSource *',
        name = 'child_source',
      ),
    ],
  ),
  'g_source_get_current_time': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'GTimeVal *',
        name = 'timeval',
      ),
    ],
  ),
  'g_source_get_time': Spec(
    return_type = 'gint64',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
    ],
  ),
  'g_idle_source_new': Spec(
    return_type = 'GSource *',
    parameters = [
    ],
  ),
  'g_child_watch_source_new': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GPid',
        name = 'pid',
      ),
    ],
  ),
  'g_timeout_source_new': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'guint',
        name = 'interval',
      ),
    ],
  ),
  'g_timeout_source_new_seconds': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'guint',
        name = 'interval',
      ),
    ],
  ),
  'g_get_current_time': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTimeVal *',
        name = 'result',
      ),
    ],
  ),
  'g_get_monotonic_time': Spec(
    return_type = 'gint64',
    parameters = [
    ],
  ),
  'g_get_real_time': Spec(
    return_type = 'gint64',
    parameters = [
    ],
  ),
  'g_source_remove': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'guint',
        name = 'tag',
      ),
    ],
  ),
  'g_source_remove_by_user_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_source_remove_by_funcs_user_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSourceFuncs *',
        name = 'funcs',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_timeout_add_full': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gint',
        name = 'priority',
      ),
      Param(
        type = 'guint',
        name = 'interval',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_timeout_add': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'guint',
        name = 'interval',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_timeout_add_seconds_full': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gint',
        name = 'priority',
      ),
      Param(
        type = 'guint',
        name = 'interval',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_timeout_add_seconds': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'guint',
        name = 'interval',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_child_watch_add_full': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gint',
        name = 'priority',
      ),
      Param(
        type = 'GPid',
        name = 'pid',
      ),
      Param(
        type = 'GChildWatchFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_child_watch_add': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GPid',
        name = 'pid',
      ),
      Param(
        type = 'GChildWatchFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_idle_add': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSourceFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_idle_add_full': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gint',
        name = 'priority',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_idle_remove_by_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_main_context_invoke_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'gint',
        name = 'priority',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_main_context_invoke': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_unicode_script_to_iso15924': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GUnicodeScript',
        name = 'script',
      ),
    ],
  ),
  'g_unicode_script_from_iso15924': Spec(
    return_type = 'GUnicodeScript',
    parameters = [
      Param(
        type = 'guint32',
        name = 'iso15924',
      ),
    ],
  ),
  'g_unichar_isalnum': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_isalpha': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_iscntrl': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_isdigit': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_isgraph': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_islower': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_isprint': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_ispunct': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_isspace': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_isupper': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_isxdigit': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_istitle': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_isdefined': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_iswide': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_iswide_cjk': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_iszerowidth': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_ismark': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_toupper': Spec(
    return_type = 'gunichar',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_tolower': Spec(
    return_type = 'gunichar',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_totitle': Spec(
    return_type = 'gunichar',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_digit_value': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_xdigit_value': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_type': Spec(
    return_type = 'GUnicodeType',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_break_type': Spec(
    return_type = 'GUnicodeBreakType',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_combining_class': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'uc',
      ),
    ],
  ),
  'g_unichar_get_mirror_char': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'ch',
      ),
      Param(
        type = 'gunichar *',
        name = 'mirrored_ch',
      ),
    ],
  ),
  'g_unichar_get_script': Spec(
    return_type = 'GUnicodeScript',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'ch',
      ),
    ],
  ),
  'g_unichar_validate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'ch',
      ),
    ],
  ),
  'g_unichar_compose': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'a',
      ),
      Param(
        type = 'gunichar',
        name = 'b',
      ),
      Param(
        type = 'gunichar *',
        name = 'ch',
      ),
    ],
  ),
  'g_unichar_decompose': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'ch',
      ),
      Param(
        type = 'gunichar *',
        name = 'a',
      ),
      Param(
        type = 'gunichar *',
        name = 'b',
      ),
    ],
  ),
  'g_unichar_fully_decompose': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'ch',
      ),
      Param(
        type = 'gboolean',
        name = 'compat',
      ),
      Param(
        type = 'gunichar *',
        name = 'result',
      ),
      Param(
        type = 'gsize',
        name = 'result_len',
      ),
    ],
  ),
  'g_unicode_canonical_ordering': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gunichar *',
        name = 'string',
      ),
      Param(
        type = 'gsize',
        name = 'len',
      ),
    ],
  ),
  'g_unicode_canonical_decomposition': Spec(
    return_type = 'gunichar *',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'ch',
      ),
      Param(
        type = 'gsize *',
        name = 'result_len',
      ),
    ],
  ),
  'g_utf8_get_char': Spec(
    return_type = 'gunichar',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'p',
      ),
    ],
  ),
  'g_utf8_get_char_validated': Spec(
    return_type = 'gunichar',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'p',
      ),
      Param(
        type = 'gssize',
        name = 'max_len',
      ),
    ],
  ),
  'g_utf8_offset_to_pointer': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'glong',
        name = 'offset',
      ),
    ],
  ),
  'g_utf8_pointer_to_offset': Spec(
    return_type = 'glong',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'const gchar *',
        name = 'pos',
      ),
    ],
  ),
  'g_utf8_prev_char': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'p',
      ),
    ],
  ),
  'g_utf8_find_next_char': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'p',
      ),
      Param(
        type = 'const gchar *',
        name = 'end',
      ),
    ],
  ),
  'g_utf8_find_prev_char': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'const gchar *',
        name = 'p',
      ),
    ],
  ),
  'g_utf8_strlen': Spec(
    return_type = 'glong',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'p',
      ),
      Param(
        type = 'gssize',
        name = 'max',
      ),
    ],
  ),
  'g_utf8_substring': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'glong',
        name = 'start_pos',
      ),
      Param(
        type = 'glong',
        name = 'end_pos',
      ),
    ],
  ),
  'g_utf8_strncpy': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'dest',
      ),
      Param(
        type = 'const gchar *',
        name = 'src',
      ),
      Param(
        type = 'gsize',
        name = 'n',
      ),
    ],
  ),
  'g_utf8_strchr': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'p',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_utf8_strrchr': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'p',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_utf8_strreverse': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_utf8_to_utf16': Spec(
    return_type = 'gunichar2 *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'glong',
        name = 'len',
      ),
      Param(
        type = 'glong *',
        name = 'items_read',
      ),
      Param(
        type = 'glong *',
        name = 'items_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_utf8_to_ucs4': Spec(
    return_type = 'gunichar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'glong',
        name = 'len',
      ),
      Param(
        type = 'glong *',
        name = 'items_read',
      ),
      Param(
        type = 'glong *',
        name = 'items_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_utf8_to_ucs4_fast': Spec(
    return_type = 'gunichar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'glong',
        name = 'len',
      ),
      Param(
        type = 'glong *',
        name = 'items_written',
      ),
    ],
  ),
  'g_utf16_to_ucs4': Spec(
    return_type = 'gunichar *',
    parameters = [
      Param(
        type = 'const gunichar2 *',
        name = 'str',
      ),
      Param(
        type = 'glong',
        name = 'len',
      ),
      Param(
        type = 'glong *',
        name = 'items_read',
      ),
      Param(
        type = 'glong *',
        name = 'items_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_utf16_to_utf8': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gunichar2 *',
        name = 'str',
      ),
      Param(
        type = 'glong',
        name = 'len',
      ),
      Param(
        type = 'glong *',
        name = 'items_read',
      ),
      Param(
        type = 'glong *',
        name = 'items_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_ucs4_to_utf16': Spec(
    return_type = 'gunichar2 *',
    parameters = [
      Param(
        type = 'const gunichar *',
        name = 'str',
      ),
      Param(
        type = 'glong',
        name = 'len',
      ),
      Param(
        type = 'glong *',
        name = 'items_read',
      ),
      Param(
        type = 'glong *',
        name = 'items_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_ucs4_to_utf8': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gunichar *',
        name = 'str',
      ),
      Param(
        type = 'glong',
        name = 'len',
      ),
      Param(
        type = 'glong *',
        name = 'items_read',
      ),
      Param(
        type = 'glong *',
        name = 'items_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_unichar_to_utf8': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
      Param(
        type = 'gchar *',
        name = 'outbuf',
      ),
    ],
  ),
  'g_utf8_validate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'max_len',
      ),
      Param(
        type = 'const gchar **',
        name = 'end',
      ),
    ],
  ),
  'g_utf8_strup': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_utf8_strdown': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_utf8_casefold': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_utf8_normalize': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'GNormalizeMode',
        name = 'mode',
      ),
    ],
  ),
  'g_utf8_collate': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str1',
      ),
      Param(
        type = 'const gchar *',
        name = 'str2',
      ),
    ],
  ),
  'g_utf8_collate_key': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_utf8_collate_key_for_filename': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  '_g_utf8_make_valid': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_get_user_name': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'g_get_real_name': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'g_get_home_dir': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'g_get_tmp_dir': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'g_get_host_name': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'g_get_prgname': Spec(
    return_type = 'gchar *',
    parameters = [
    ],
  ),
  'g_set_prgname': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'prgname',
      ),
    ],
  ),
  'g_get_application_name': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'g_set_application_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'application_name',
      ),
    ],
  ),
  'g_reload_user_special_dirs_cache': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_get_user_data_dir': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'g_get_user_config_dir': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'g_get_user_cache_dir': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'g_get_system_data_dirs': Spec(
    return_type = 'const gchar *const *',
    parameters = [
    ],
  ),
  'g_get_system_config_dirs': Spec(
    return_type = 'const gchar *const *',
    parameters = [
    ],
  ),
  'g_get_user_runtime_dir': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'g_get_user_special_dir': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GUserDirectory',
        name = 'directory',
      ),
    ],
  ),
  'g_parse_debug_string': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'const GDebugKey *',
        name = 'keys',
      ),
      Param(
        type = 'guint',
        name = 'nkeys',
      ),
    ],
  ),
  'g_snprintf': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'string',
      ),
      Param(
        type = 'gulong',
        name = 'n',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_vsnprintf': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'string',
      ),
      Param(
        type = 'gulong',
        name = 'n',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'g_nullify_pointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer *',
        name = 'nullify_location',
      ),
    ],
  ),
  'g_format_size_full': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'guint64',
        name = 'size',
      ),
      Param(
        type = 'GFormatSizeFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_format_size': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'guint64',
        name = 'size',
      ),
    ],
  ),
  'g_format_size_for_display': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'goffset',
        name = 'size',
      ),
    ],
  ),
  'g_atexit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVoidFunc',
        name = 'func',
      ),
    ],
  ),
  'g_find_program_in_path': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'program',
      ),
    ],
  ),
  'g_bit_nth_lsf': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gulong',
        name = 'mask',
      ),
      Param(
        type = 'gint',
        name = 'nth_bit',
      ),
    ],
  ),
  'g_bit_nth_msf': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gulong',
        name = 'mask',
      ),
      Param(
        type = 'gint',
        name = 'nth_bit',
      ),
    ],
  ),
  'g_bit_storage': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gulong',
        name = 'number',
      ),
    ],
  ),
  'g_bit_nth_lsf': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gulong',
        name = 'mask',
      ),
      Param(
        type = 'gint',
        name = 'nth_bit',
      ),
    ],
  ),
  'g_bit_nth_msf': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gulong',
        name = 'mask',
      ),
      Param(
        type = 'gint',
        name = 'nth_bit',
      ),
    ],
  ),
  'g_bit_storage': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gulong',
        name = 'number',
      ),
    ],
  ),
  'g_string_new': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'init',
      ),
    ],
  ),
  'g_string_new_len': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'init',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_string_sized_new': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'gsize',
        name = 'dfl_size',
      ),
    ],
  ),
  'g_string_free': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gboolean',
        name = 'free_segment',
      ),
    ],
  ),
  'g_string_free_to_bytes': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
    ],
  ),
  'g_string_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GString *',
        name = 'v',
      ),
      Param(
        type = 'const GString *',
        name = 'v2',
      ),
    ],
  ),
  'g_string_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const GString *',
        name = 'str',
      ),
    ],
  ),
  'g_string_assign': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'rval',
      ),
    ],
  ),
  'g_string_truncate': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gsize',
        name = 'len',
      ),
    ],
  ),
  'g_string_set_size': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gsize',
        name = 'len',
      ),
    ],
  ),
  'g_string_insert_len': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'pos',
      ),
      Param(
        type = 'const gchar *',
        name = 'val',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_string_append': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'val',
      ),
    ],
  ),
  'g_string_append_len': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'val',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_string_append_c': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gchar',
        name = 'c',
      ),
    ],
  ),
  'g_string_append_unichar': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gunichar',
        name = 'wc',
      ),
    ],
  ),
  'g_string_prepend': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'val',
      ),
    ],
  ),
  'g_string_prepend_c': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gchar',
        name = 'c',
      ),
    ],
  ),
  'g_string_prepend_unichar': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gunichar',
        name = 'wc',
      ),
    ],
  ),
  'g_string_prepend_len': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'val',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_string_insert': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'pos',
      ),
      Param(
        type = 'const gchar *',
        name = 'val',
      ),
    ],
  ),
  'g_string_insert_c': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'pos',
      ),
      Param(
        type = 'gchar',
        name = 'c',
      ),
    ],
  ),
  'g_string_insert_unichar': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'pos',
      ),
      Param(
        type = 'gunichar',
        name = 'wc',
      ),
    ],
  ),
  'g_string_overwrite': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gsize',
        name = 'pos',
      ),
      Param(
        type = 'const gchar *',
        name = 'val',
      ),
    ],
  ),
  'g_string_overwrite_len': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gsize',
        name = 'pos',
      ),
      Param(
        type = 'const gchar *',
        name = 'val',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_string_erase': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'pos',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_string_ascii_down': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
    ],
  ),
  'g_string_ascii_up': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
    ],
  ),
  'g_string_vprintf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'g_string_printf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_string_append_vprintf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'g_string_append_printf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_string_append_uri_escaped': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'unescaped',
      ),
      Param(
        type = 'const gchar *',
        name = 'reserved_chars_allowed',
      ),
      Param(
        type = 'gboolean',
        name = 'allow_utf8',
      ),
    ],
  ),
  'g_string_append_c_inline': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'gstring',
      ),
      Param(
        type = 'gchar',
        name = 'c',
      ),
    ],
  ),
  'g_string_down': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
    ],
  ),
  'g_string_up': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
    ],
  ),
  'g_io_channel_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
    ],
  ),
  'g_io_channel_ref': Spec(
    return_type = 'GIOChannel *',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
    ],
  ),
  'g_io_channel_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
    ],
  ),
  'g_io_channel_read': Spec(
    return_type = 'GIOError',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gchar *',
        name = 'buf',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_read',
      ),
    ],
  ),
  'g_io_channel_write': Spec(
    return_type = 'GIOError',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'const gchar *',
        name = 'buf',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
    ],
  ),
  'g_io_channel_seek': Spec(
    return_type = 'GIOError',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gint64',
        name = 'offset',
      ),
      Param(
        type = 'GSeekType',
        name = 'type',
      ),
    ],
  ),
  'g_io_channel_close': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
    ],
  ),
  'g_io_channel_shutdown': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gboolean',
        name = 'flush',
      ),
      Param(
        type = 'GError **',
        name = 'err',
      ),
    ],
  ),
  'g_io_add_watch_full': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gint',
        name = 'priority',
      ),
      Param(
        type = 'GIOCondition',
        name = 'condition',
      ),
      Param(
        type = 'GIOFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_io_create_watch': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'GIOCondition',
        name = 'condition',
      ),
    ],
  ),
  'g_io_add_watch': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'GIOCondition',
        name = 'condition',
      ),
      Param(
        type = 'GIOFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_io_channel_set_buffer_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
    ],
  ),
  'g_io_channel_get_buffer_size': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
    ],
  ),
  'g_io_channel_get_buffer_condition': Spec(
    return_type = 'GIOCondition',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
    ],
  ),
  'g_io_channel_set_flags': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'GIOFlags',
        name = 'flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_get_flags': Spec(
    return_type = 'GIOFlags',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
    ],
  ),
  'g_io_channel_set_line_term': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'const gchar *',
        name = 'line_term',
      ),
      Param(
        type = 'gint',
        name = 'length',
      ),
    ],
  ),
  'g_io_channel_get_line_term': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gint *',
        name = 'length',
      ),
    ],
  ),
  'g_io_channel_set_buffered': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gboolean',
        name = 'buffered',
      ),
    ],
  ),
  'g_io_channel_get_buffered': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
    ],
  ),
  'g_io_channel_set_encoding': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'const gchar *',
        name = 'encoding',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_get_encoding': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
    ],
  ),
  'g_io_channel_set_close_on_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gboolean',
        name = 'do_close',
      ),
    ],
  ),
  'g_io_channel_get_close_on_unref': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
    ],
  ),
  'g_io_channel_flush': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_read_line': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gchar **',
        name = 'str_return',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'gsize *',
        name = 'terminator_pos',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_read_line_string': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'GString *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize *',
        name = 'terminator_pos',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_read_to_end': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gchar **',
        name = 'str_return',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_read_chars': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gchar *',
        name = 'buf',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_read',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_read_unichar': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gunichar *',
        name = 'thechar',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_write_chars': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'const gchar *',
        name = 'buf',
      ),
      Param(
        type = 'gssize',
        name = 'count',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_write_unichar': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gunichar',
        name = 'thechar',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_seek_position': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gint64',
        name = 'offset',
      ),
      Param(
        type = 'GSeekType',
        name = 'type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_new_file': Spec(
    return_type = 'GIOChannel *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'const gchar *',
        name = 'mode',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_io_channel_error_from_errno': Spec(
    return_type = 'GIOChannelError',
    parameters = [
      Param(
        type = 'gint',
        name = 'en',
      ),
    ],
  ),
  'g_io_channel_unix_new': Spec(
    return_type = 'GIOChannel *',
    parameters = [
      Param(
        type = 'int',
        name = 'fd',
      ),
    ],
  ),
  'g_io_channel_unix_get_fd': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
    ],
  ),
  'g_key_file_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_key_file_new': Spec(
    return_type = 'GKeyFile *',
    parameters = [
    ],
  ),
  'g_key_file_ref': Spec(
    return_type = 'GKeyFile *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
    ],
  ),
  'g_key_file_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
    ],
  ),
  'g_key_file_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
    ],
  ),
  'g_key_file_set_list_separator': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'gchar',
        name = 'separator',
      ),
    ],
  ),
  'g_key_file_load_from_file': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'file',
      ),
      Param(
        type = 'GKeyFileFlags',
        name = 'flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_load_from_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
      Param(
        type = 'GKeyFileFlags',
        name = 'flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_load_from_dirs': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'file',
      ),
      Param(
        type = 'const gchar **',
        name = 'search_dirs',
      ),
      Param(
        type = 'gchar **',
        name = 'full_path',
      ),
      Param(
        type = 'GKeyFileFlags',
        name = 'flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_load_from_data_dirs': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'file',
      ),
      Param(
        type = 'gchar **',
        name = 'full_path',
      ),
      Param(
        type = 'GKeyFileFlags',
        name = 'flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_to_data': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_get_start_group': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
    ],
  ),
  'g_key_file_get_groups': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_key_file_get_keys': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_has_group': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
    ],
  ),
  'g_key_file_has_key': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_get_value': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'g_key_file_get_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_string': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_key_file_get_locale_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *',
        name = 'locale',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_locale_string': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *',
        name = 'locale',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_key_file_get_boolean': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_boolean': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gboolean',
        name = 'value',
      ),
    ],
  ),
  'g_key_file_get_integer': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_integer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gint',
        name = 'value',
      ),
    ],
  ),
  'g_key_file_get_int64': Spec(
    return_type = 'gint64',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_int64': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gint64',
        name = 'value',
      ),
    ],
  ),
  'g_key_file_get_uint64': Spec(
    return_type = 'guint64',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_uint64': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'guint64',
        name = 'value',
      ),
    ],
  ),
  'g_key_file_get_double': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_double': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gdouble',
        name = 'value',
      ),
    ],
  ),
  'g_key_file_get_string_list': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_string_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *const []',
        name = 'list',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
    ],
  ),
  'g_key_file_get_locale_string_list': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *',
        name = 'locale',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_locale_string_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *',
        name = 'locale',
      ),
      Param(
        type = 'const gchar *const []',
        name = 'list',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
    ],
  ),
  'g_key_file_get_boolean_list': Spec(
    return_type = 'gboolean *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_boolean_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gboolean []',
        name = 'list',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
    ],
  ),
  'g_key_file_get_integer_list': Spec(
    return_type = 'gint *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_double_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gdouble []',
        name = 'list',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
    ],
  ),
  'g_key_file_get_double_list': Spec(
    return_type = 'gdouble *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_integer_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gint []',
        name = 'list',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
    ],
  ),
  'g_key_file_set_comment': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *',
        name = 'comment',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_get_comment': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_remove_comment': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_remove_key': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_remove_group': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_mapped_file_new': Spec(
    return_type = 'GMappedFile *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'gboolean',
        name = 'writable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_mapped_file_new_from_fd': Spec(
    return_type = 'GMappedFile *',
    parameters = [
      Param(
        type = 'gint',
        name = 'fd',
      ),
      Param(
        type = 'gboolean',
        name = 'writable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_mapped_file_get_length': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GMappedFile *',
        name = 'file',
      ),
    ],
  ),
  'g_mapped_file_get_contents': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GMappedFile *',
        name = 'file',
      ),
    ],
  ),
  'g_mapped_file_get_bytes': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'GMappedFile *',
        name = 'file',
      ),
    ],
  ),
  'g_mapped_file_ref': Spec(
    return_type = 'GMappedFile *',
    parameters = [
      Param(
        type = 'GMappedFile *',
        name = 'file',
      ),
    ],
  ),
  'g_mapped_file_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMappedFile *',
        name = 'file',
      ),
    ],
  ),
  'g_mapped_file_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMappedFile *',
        name = 'file',
      ),
    ],
  ),
  'g_markup_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_markup_parse_context_new': Spec(
    return_type = 'GMarkupParseContext *',
    parameters = [
      Param(
        type = 'const GMarkupParser *',
        name = 'parser',
      ),
      Param(
        type = 'GMarkupParseFlags',
        name = 'flags',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'user_data_dnotify',
      ),
    ],
  ),
  'g_markup_parse_context_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMarkupParseContext *',
        name = 'context',
      ),
    ],
  ),
  'g_markup_parse_context_parse': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMarkupParseContext *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'gssize',
        name = 'text_len',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_markup_parse_context_push': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMarkupParseContext *',
        name = 'context',
      ),
      Param(
        type = 'const GMarkupParser *',
        name = 'parser',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_markup_parse_context_pop': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GMarkupParseContext *',
        name = 'context',
      ),
    ],
  ),
  'g_markup_parse_context_end_parse': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMarkupParseContext *',
        name = 'context',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_markup_parse_context_get_element': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GMarkupParseContext *',
        name = 'context',
      ),
    ],
  ),
  'g_markup_parse_context_get_element_stack': Spec(
    return_type = 'const GSList *',
    parameters = [
      Param(
        type = 'GMarkupParseContext *',
        name = 'context',
      ),
    ],
  ),
  'g_markup_parse_context_get_position': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMarkupParseContext *',
        name = 'context',
      ),
      Param(
        type = 'gint *',
        name = 'line_number',
      ),
      Param(
        type = 'gint *',
        name = 'char_number',
      ),
    ],
  ),
  'g_markup_parse_context_get_user_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GMarkupParseContext *',
        name = 'context',
      ),
    ],
  ),
  'g_markup_escape_text': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
    ],
  ),
  'g_markup_printf_escaped': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'format',
      ),
    ],
  ),
  'g_markup_vprintf_escaped': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'format',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'g_markup_collect_attributes': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'element_name',
      ),
      Param(
        type = 'const gchar **',
        name = 'attribute_names',
      ),
      Param(
        type = 'const gchar **',
        name = 'attribute_values',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
      Param(
        type = 'GMarkupCollectType',
        name = 'first_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_attr',
      ),
    ],
  ),
  'g_printf_string_upper_bound': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'g_log_set_handler': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'log_domain',
      ),
      Param(
        type = 'GLogLevelFlags',
        name = 'log_levels',
      ),
      Param(
        type = 'GLogFunc',
        name = 'log_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_log_remove_handler': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'log_domain',
      ),
      Param(
        type = 'guint',
        name = 'handler_id',
      ),
    ],
  ),
  'g_log_default_handler': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'log_domain',
      ),
      Param(
        type = 'GLogLevelFlags',
        name = 'log_level',
      ),
      Param(
        type = 'const gchar *',
        name = 'message',
      ),
      Param(
        type = 'gpointer',
        name = 'unused_data',
      ),
    ],
  ),
  'g_log_set_default_handler': Spec(
    return_type = 'GLogFunc',
    parameters = [
      Param(
        type = 'GLogFunc',
        name = 'log_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_log': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'log_domain',
      ),
      Param(
        type = 'GLogLevelFlags',
        name = 'log_level',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_logv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'log_domain',
      ),
      Param(
        type = 'GLogLevelFlags',
        name = 'log_level',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'g_log_set_fatal_mask': Spec(
    return_type = 'GLogLevelFlags',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'log_domain',
      ),
      Param(
        type = 'GLogLevelFlags',
        name = 'fatal_mask',
      ),
    ],
  ),
  'g_log_set_always_fatal': Spec(
    return_type = 'GLogLevelFlags',
    parameters = [
      Param(
        type = 'GLogLevelFlags',
        name = 'fatal_mask',
      ),
    ],
  ),
  '_g_log_fallback_handler': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'log_domain',
      ),
      Param(
        type = 'GLogLevelFlags',
        name = 'log_level',
      ),
      Param(
        type = 'const gchar *',
        name = 'message',
      ),
      Param(
        type = 'gpointer',
        name = 'unused_data',
      ),
    ],
  ),
  'g_return_if_fail_warning': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'log_domain',
      ),
      Param(
        type = 'const char *',
        name = 'pretty_function',
      ),
      Param(
        type = 'const char *',
        name = 'expression',
      ),
    ],
  ),
  'g_warn_message': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'domain',
      ),
      Param(
        type = 'const char *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'line',
      ),
      Param(
        type = 'const char *',
        name = 'func',
      ),
      Param(
        type = 'const char *',
        name = 'warnexpr',
      ),
    ],
  ),
  'g_assert_warning': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'log_domain',
      ),
      Param(
        type = 'const char *',
        name = 'file',
      ),
      Param(
        type = 'const int',
        name = 'line',
      ),
      Param(
        type = 'const char *',
        name = 'pretty_function',
      ),
      Param(
        type = 'const char *',
        name = 'expression',
      ),
    ],
  ),
  'g_print': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_set_print_handler': Spec(
    return_type = 'GPrintFunc',
    parameters = [
      Param(
        type = 'GPrintFunc',
        name = 'func',
      ),
    ],
  ),
  'g_printerr': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_set_printerr_handler': Spec(
    return_type = 'GPrintFunc',
    parameters = [
      Param(
        type = 'GPrintFunc',
        name = 'func',
      ),
    ],
  ),
  'g_option_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_option_context_new': Spec(
    return_type = 'GOptionContext *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'parameter_string',
      ),
    ],
  ),
  'g_option_context_set_summary': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'summary',
      ),
    ],
  ),
  'g_option_context_get_summary': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
    ],
  ),
  'g_option_context_set_description': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'description',
      ),
    ],
  ),
  'g_option_context_get_description': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
    ],
  ),
  'g_option_context_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
    ],
  ),
  'g_option_context_set_help_enabled': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
      Param(
        type = 'gboolean',
        name = 'help_enabled',
      ),
    ],
  ),
  'g_option_context_get_help_enabled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
    ],
  ),
  'g_option_context_set_ignore_unknown_options': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
      Param(
        type = 'gboolean',
        name = 'ignore_unknown',
      ),
    ],
  ),
  'g_option_context_get_ignore_unknown_options': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
    ],
  ),
  'g_option_context_add_main_entries': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
      Param(
        type = 'const GOptionEntry *',
        name = 'entries',
      ),
      Param(
        type = 'const gchar *',
        name = 'translation_domain',
      ),
    ],
  ),
  'g_option_context_parse': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
      Param(
        type = 'gint *',
        name = 'argc',
      ),
      Param(
        type = 'gchar ***',
        name = 'argv',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_option_context_set_translate_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
      Param(
        type = 'GTranslateFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy_notify',
      ),
    ],
  ),
  'g_option_context_set_translation_domain': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
    ],
  ),
  'g_option_context_add_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
      Param(
        type = 'GOptionGroup *',
        name = 'group',
      ),
    ],
  ),
  'g_option_context_set_main_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
      Param(
        type = 'GOptionGroup *',
        name = 'group',
      ),
    ],
  ),
  'g_option_context_get_main_group': Spec(
    return_type = 'GOptionGroup *',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
    ],
  ),
  'g_option_context_get_help': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
      Param(
        type = 'gboolean',
        name = 'main_help',
      ),
      Param(
        type = 'GOptionGroup *',
        name = 'group',
      ),
    ],
  ),
  'g_option_group_new': Spec(
    return_type = 'GOptionGroup *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'description',
      ),
      Param(
        type = 'const gchar *',
        name = 'help_description',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'g_option_group_set_parse_hooks': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionGroup *',
        name = 'group',
      ),
      Param(
        type = 'GOptionParseFunc',
        name = 'pre_parse_func',
      ),
      Param(
        type = 'GOptionParseFunc',
        name = 'post_parse_func',
      ),
    ],
  ),
  'g_option_group_set_error_hook': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionGroup *',
        name = 'group',
      ),
      Param(
        type = 'GOptionErrorFunc',
        name = 'error_func',
      ),
    ],
  ),
  'g_option_group_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionGroup *',
        name = 'group',
      ),
    ],
  ),
  'g_option_group_add_entries': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionGroup *',
        name = 'group',
      ),
      Param(
        type = 'const GOptionEntry *',
        name = 'entries',
      ),
    ],
  ),
  'g_option_group_set_translate_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionGroup *',
        name = 'group',
      ),
      Param(
        type = 'GTranslateFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy_notify',
      ),
    ],
  ),
  'g_option_group_set_translation_domain': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionGroup *',
        name = 'group',
      ),
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
    ],
  ),
  'g_pattern_spec_new': Spec(
    return_type = 'GPatternSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'pattern',
      ),
    ],
  ),
  'g_pattern_spec_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPatternSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_pattern_spec_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPatternSpec *',
        name = 'pspec1',
      ),
      Param(
        type = 'GPatternSpec *',
        name = 'pspec2',
      ),
    ],
  ),
  'g_pattern_match': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPatternSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'guint',
        name = 'string_length',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'string_reversed',
      ),
    ],
  ),
  'g_pattern_match_string': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPatternSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_pattern_match_simple': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'pattern',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_spaced_primes_closest': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'guint',
        name = 'num',
      ),
    ],
  ),
  'g_qsort_with_data': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'pbase',
      ),
      Param(
        type = 'gint',
        name = 'total_elems',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'compare_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_queue_new': Spec(
    return_type = 'GQueue *',
    parameters = [
    ],
  ),
  'g_queue_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_free_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'free_func',
      ),
    ],
  ),
  'g_queue_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_is_empty': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_get_length': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_reverse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_copy': Spec(
    return_type = 'GQueue *',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_queue_find': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_queue_find_custom': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'func',
      ),
    ],
  ),
  'g_queue_sort': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'compare_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_queue_push_head': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_queue_push_tail': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_queue_push_nth': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'gint',
        name = 'n',
      ),
    ],
  ),
  'g_queue_pop_head': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_pop_tail': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_pop_nth': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'guint',
        name = 'n',
      ),
    ],
  ),
  'g_queue_peek_head': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_peek_tail': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_peek_nth': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'guint',
        name = 'n',
      ),
    ],
  ),
  'g_queue_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_queue_remove': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_queue_remove_all': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_queue_insert_before': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GList *',
        name = 'sibling',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_queue_insert_after': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GList *',
        name = 'sibling',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_queue_insert_sorted': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_queue_push_head_link': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GList *',
        name = 'link_',
      ),
    ],
  ),
  'g_queue_push_tail_link': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GList *',
        name = 'link_',
      ),
    ],
  ),
  'g_queue_push_nth_link': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gint',
        name = 'n',
      ),
      Param(
        type = 'GList *',
        name = 'link_',
      ),
    ],
  ),
  'g_queue_pop_head_link': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_pop_tail_link': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_pop_nth_link': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'guint',
        name = 'n',
      ),
    ],
  ),
  'g_queue_peek_head_link': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_peek_tail_link': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_peek_nth_link': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'guint',
        name = 'n',
      ),
    ],
  ),
  'g_queue_link_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GList *',
        name = 'link_',
      ),
    ],
  ),
  'g_queue_unlink': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GList *',
        name = 'link_',
      ),
    ],
  ),
  'g_queue_delete_link': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GList *',
        name = 'link_',
      ),
    ],
  ),
  'g_rand_new_with_seed': Spec(
    return_type = 'GRand *',
    parameters = [
      Param(
        type = 'guint32',
        name = 'seed',
      ),
    ],
  ),
  'g_rand_new_with_seed_array': Spec(
    return_type = 'GRand *',
    parameters = [
      Param(
        type = 'const guint32 *',
        name = 'seed',
      ),
      Param(
        type = 'guint',
        name = 'seed_length',
      ),
    ],
  ),
  'g_rand_new': Spec(
    return_type = 'GRand *',
    parameters = [
    ],
  ),
  'g_rand_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRand *',
        name = 'rand_',
      ),
    ],
  ),
  'g_rand_copy': Spec(
    return_type = 'GRand *',
    parameters = [
      Param(
        type = 'GRand *',
        name = 'rand_',
      ),
    ],
  ),
  'g_rand_set_seed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRand *',
        name = 'rand_',
      ),
      Param(
        type = 'guint32',
        name = 'seed',
      ),
    ],
  ),
  'g_rand_set_seed_array': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRand *',
        name = 'rand_',
      ),
      Param(
        type = 'const guint32 *',
        name = 'seed',
      ),
      Param(
        type = 'guint',
        name = 'seed_length',
      ),
    ],
  ),
  'g_rand_int': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GRand *',
        name = 'rand_',
      ),
    ],
  ),
  'g_rand_int_range': Spec(
    return_type = 'gint32',
    parameters = [
      Param(
        type = 'GRand *',
        name = 'rand_',
      ),
      Param(
        type = 'gint32',
        name = 'begin',
      ),
      Param(
        type = 'gint32',
        name = 'end',
      ),
    ],
  ),
  'g_rand_double': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GRand *',
        name = 'rand_',
      ),
    ],
  ),
  'g_rand_double_range': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GRand *',
        name = 'rand_',
      ),
      Param(
        type = 'gdouble',
        name = 'begin',
      ),
      Param(
        type = 'gdouble',
        name = 'end',
      ),
    ],
  ),
  'g_random_set_seed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint32',
        name = 'seed',
      ),
    ],
  ),
  'g_random_int': Spec(
    return_type = 'guint32',
    parameters = [
    ],
  ),
  'g_random_int_range': Spec(
    return_type = 'gint32',
    parameters = [
      Param(
        type = 'gint32',
        name = 'begin',
      ),
      Param(
        type = 'gint32',
        name = 'end',
      ),
    ],
  ),
  'g_random_double': Spec(
    return_type = 'gdouble',
    parameters = [
    ],
  ),
  'g_random_double_range': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'gdouble',
        name = 'begin',
      ),
      Param(
        type = 'gdouble',
        name = 'end',
      ),
    ],
  ),
  'g_regex_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_regex_new': Spec(
    return_type = 'GRegex *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'pattern',
      ),
      Param(
        type = 'GRegexCompileFlags',
        name = 'compile_options',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_regex_ref': Spec(
    return_type = 'GRegex *',
    parameters = [
      Param(
        type = 'GRegex *',
        name = 'regex',
      ),
    ],
  ),
  'g_regex_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRegex *',
        name = 'regex',
      ),
    ],
  ),
  'g_regex_get_pattern': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
    ],
  ),
  'g_regex_get_max_backref': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
    ],
  ),
  'g_regex_get_capture_count': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
    ],
  ),
  'g_regex_get_has_cr_or_lf': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
    ],
  ),
  'g_regex_get_string_number': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_regex_escape_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'gint',
        name = 'length',
      ),
    ],
  ),
  'g_regex_escape_nul': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'gint',
        name = 'length',
      ),
    ],
  ),
  'g_regex_get_compile_flags': Spec(
    return_type = 'GRegexCompileFlags',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
    ],
  ),
  'g_regex_get_match_flags': Spec(
    return_type = 'GRegexMatchFlags',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
    ],
  ),
  'g_regex_match_simple': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'pattern',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'GRegexCompileFlags',
        name = 'compile_options',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
    ],
  ),
  'g_regex_match': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
      Param(
        type = 'GMatchInfo **',
        name = 'match_info',
      ),
    ],
  ),
  'g_regex_match_full': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'string_len',
      ),
      Param(
        type = 'gint',
        name = 'start_position',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
      Param(
        type = 'GMatchInfo **',
        name = 'match_info',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_regex_match_all': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
      Param(
        type = 'GMatchInfo **',
        name = 'match_info',
      ),
    ],
  ),
  'g_regex_match_all_full': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'string_len',
      ),
      Param(
        type = 'gint',
        name = 'start_position',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
      Param(
        type = 'GMatchInfo **',
        name = 'match_info',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_regex_split_simple': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'pattern',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'GRegexCompileFlags',
        name = 'compile_options',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
    ],
  ),
  'g_regex_split': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
    ],
  ),
  'g_regex_split_full': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'string_len',
      ),
      Param(
        type = 'gint',
        name = 'start_position',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
      Param(
        type = 'gint',
        name = 'max_tokens',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_regex_replace': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'string_len',
      ),
      Param(
        type = 'gint',
        name = 'start_position',
      ),
      Param(
        type = 'const gchar *',
        name = 'replacement',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_regex_replace_literal': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'string_len',
      ),
      Param(
        type = 'gint',
        name = 'start_position',
      ),
      Param(
        type = 'const gchar *',
        name = 'replacement',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_regex_replace_eval': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'string_len',
      ),
      Param(
        type = 'gint',
        name = 'start_position',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
      Param(
        type = 'GRegexEvalCallback',
        name = 'eval',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_regex_check_replacement': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'replacement',
      ),
      Param(
        type = 'gboolean *',
        name = 'has_references',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_match_info_get_regex': Spec(
    return_type = 'GRegex *',
    parameters = [
      Param(
        type = 'const GMatchInfo *',
        name = 'match_info',
      ),
    ],
  ),
  'g_match_info_get_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const GMatchInfo *',
        name = 'match_info',
      ),
    ],
  ),
  'g_match_info_ref': Spec(
    return_type = 'GMatchInfo *',
    parameters = [
      Param(
        type = 'GMatchInfo *',
        name = 'match_info',
      ),
    ],
  ),
  'g_match_info_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMatchInfo *',
        name = 'match_info',
      ),
    ],
  ),
  'g_match_info_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMatchInfo *',
        name = 'match_info',
      ),
    ],
  ),
  'g_match_info_next': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMatchInfo *',
        name = 'match_info',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_match_info_matches': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GMatchInfo *',
        name = 'match_info',
      ),
    ],
  ),
  'g_match_info_get_match_count': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GMatchInfo *',
        name = 'match_info',
      ),
    ],
  ),
  'g_match_info_is_partial_match': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GMatchInfo *',
        name = 'match_info',
      ),
    ],
  ),
  'g_match_info_expand_references': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GMatchInfo *',
        name = 'match_info',
      ),
      Param(
        type = 'const gchar *',
        name = 'string_to_expand',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_match_info_fetch': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GMatchInfo *',
        name = 'match_info',
      ),
      Param(
        type = 'gint',
        name = 'match_num',
      ),
    ],
  ),
  'g_match_info_fetch_pos': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GMatchInfo *',
        name = 'match_info',
      ),
      Param(
        type = 'gint',
        name = 'match_num',
      ),
      Param(
        type = 'gint *',
        name = 'start_pos',
      ),
      Param(
        type = 'gint *',
        name = 'end_pos',
      ),
    ],
  ),
  'g_match_info_fetch_named': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GMatchInfo *',
        name = 'match_info',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_match_info_fetch_named_pos': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GMatchInfo *',
        name = 'match_info',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'gint *',
        name = 'start_pos',
      ),
      Param(
        type = 'gint *',
        name = 'end_pos',
      ),
    ],
  ),
  'g_match_info_fetch_all': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'const GMatchInfo *',
        name = 'match_info',
      ),
    ],
  ),
  'g_scanner_new': Spec(
    return_type = 'GScanner *',
    parameters = [
      Param(
        type = 'const GScannerConfig *',
        name = 'config_templ',
      ),
    ],
  ),
  'g_scanner_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
    ],
  ),
  'g_scanner_input_file': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'gint',
        name = 'input_fd',
      ),
    ],
  ),
  'g_scanner_sync_file_offset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
    ],
  ),
  'g_scanner_input_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'guint',
        name = 'text_len',
      ),
    ],
  ),
  'g_scanner_get_next_token': Spec(
    return_type = 'GTokenType',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
    ],
  ),
  'g_scanner_peek_next_token': Spec(
    return_type = 'GTokenType',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
    ],
  ),
  'g_scanner_cur_token': Spec(
    return_type = 'GTokenType',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
    ],
  ),
  'g_scanner_cur_value': Spec(
    return_type = 'GTokenValue',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
    ],
  ),
  'g_scanner_cur_line': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
    ],
  ),
  'g_scanner_cur_position': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
    ],
  ),
  'g_scanner_eof': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
    ],
  ),
  'g_scanner_set_scope': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'guint',
        name = 'scope_id',
      ),
    ],
  ),
  'g_scanner_scope_add_symbol': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'guint',
        name = 'scope_id',
      ),
      Param(
        type = 'const gchar *',
        name = 'symbol',
      ),
      Param(
        type = 'gpointer',
        name = 'value',
      ),
    ],
  ),
  'g_scanner_scope_remove_symbol': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'guint',
        name = 'scope_id',
      ),
      Param(
        type = 'const gchar *',
        name = 'symbol',
      ),
    ],
  ),
  'g_scanner_scope_lookup_symbol': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'guint',
        name = 'scope_id',
      ),
      Param(
        type = 'const gchar *',
        name = 'symbol',
      ),
    ],
  ),
  'g_scanner_scope_foreach_symbol': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'guint',
        name = 'scope_id',
      ),
      Param(
        type = 'GHFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_scanner_lookup_symbol': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'const gchar *',
        name = 'symbol',
      ),
    ],
  ),
  'g_scanner_unexp_token': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'GTokenType',
        name = 'expected_token',
      ),
      Param(
        type = 'const gchar *',
        name = 'identifier_spec',
      ),
      Param(
        type = 'const gchar *',
        name = 'symbol_spec',
      ),
      Param(
        type = 'const gchar *',
        name = 'symbol_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'message',
      ),
      Param(
        type = 'gint',
        name = 'is_error',
      ),
    ],
  ),
  'g_scanner_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_scanner_warn': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_sequence_new': Spec(
    return_type = 'GSequence *',
    parameters = [
      Param(
        type = 'GDestroyNotify',
        name = 'data_destroy',
      ),
    ],
  ),
  'g_sequence_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
    ],
  ),
  'g_sequence_get_length': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
    ],
  ),
  'g_sequence_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'GFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_sequence_foreach_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'begin',
      ),
      Param(
        type = 'GSequenceIter *',
        name = 'end',
      ),
      Param(
        type = 'GFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_sequence_sort': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'cmp_func',
      ),
      Param(
        type = 'gpointer',
        name = 'cmp_data',
      ),
    ],
  ),
  'g_sequence_sort_iter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'GSequenceIterCompareFunc',
        name = 'cmp_func',
      ),
      Param(
        type = 'gpointer',
        name = 'cmp_data',
      ),
    ],
  ),
  'g_sequence_get_begin_iter': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
    ],
  ),
  'g_sequence_get_end_iter': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
    ],
  ),
  'g_sequence_get_iter_at_pos': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
    ],
  ),
  'g_sequence_append': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_sequence_prepend': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_sequence_insert_before': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_sequence_move': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'src',
      ),
      Param(
        type = 'GSequenceIter *',
        name = 'dest',
      ),
    ],
  ),
  'g_sequence_swap': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'a',
      ),
      Param(
        type = 'GSequenceIter *',
        name = 'b',
      ),
    ],
  ),
  'g_sequence_insert_sorted': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'cmp_func',
      ),
      Param(
        type = 'gpointer',
        name = 'cmp_data',
      ),
    ],
  ),
  'g_sequence_insert_sorted_iter': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GSequenceIterCompareFunc',
        name = 'iter_cmp',
      ),
      Param(
        type = 'gpointer',
        name = 'cmp_data',
      ),
    ],
  ),
  'g_sequence_sort_changed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'cmp_func',
      ),
      Param(
        type = 'gpointer',
        name = 'cmp_data',
      ),
    ],
  ),
  'g_sequence_sort_changed_iter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
      Param(
        type = 'GSequenceIterCompareFunc',
        name = 'iter_cmp',
      ),
      Param(
        type = 'gpointer',
        name = 'cmp_data',
      ),
    ],
  ),
  'g_sequence_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_sequence_remove_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'begin',
      ),
      Param(
        type = 'GSequenceIter *',
        name = 'end',
      ),
    ],
  ),
  'g_sequence_move_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'dest',
      ),
      Param(
        type = 'GSequenceIter *',
        name = 'begin',
      ),
      Param(
        type = 'GSequenceIter *',
        name = 'end',
      ),
    ],
  ),
  'g_sequence_search': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'cmp_func',
      ),
      Param(
        type = 'gpointer',
        name = 'cmp_data',
      ),
    ],
  ),
  'g_sequence_search_iter': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GSequenceIterCompareFunc',
        name = 'iter_cmp',
      ),
      Param(
        type = 'gpointer',
        name = 'cmp_data',
      ),
    ],
  ),
  'g_sequence_lookup': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'cmp_func',
      ),
      Param(
        type = 'gpointer',
        name = 'cmp_data',
      ),
    ],
  ),
  'g_sequence_lookup_iter': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GSequenceIterCompareFunc',
        name = 'iter_cmp',
      ),
      Param(
        type = 'gpointer',
        name = 'cmp_data',
      ),
    ],
  ),
  'g_sequence_get': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_sequence_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_sequence_iter_is_begin': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_sequence_iter_is_end': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_sequence_iter_next': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_sequence_iter_prev': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_sequence_iter_get_position': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_sequence_iter_move': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'delta',
      ),
    ],
  ),
  'g_sequence_iter_get_sequence': Spec(
    return_type = 'GSequence *',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_sequence_iter_compare': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'a',
      ),
      Param(
        type = 'GSequenceIter *',
        name = 'b',
      ),
    ],
  ),
  'g_sequence_range_get_midpoint': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'begin',
      ),
      Param(
        type = 'GSequenceIter *',
        name = 'end',
      ),
    ],
  ),
  'g_shell_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_shell_quote': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'unquoted_string',
      ),
    ],
  ),
  'g_shell_unquote': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'quoted_string',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_shell_parse_argv': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'command_line',
      ),
      Param(
        type = 'gint *',
        name = 'argcp',
      ),
      Param(
        type = 'gchar ***',
        name = 'argvp',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_slice_alloc': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gsize',
        name = 'block_size',
      ),
    ],
  ),
  'g_slice_alloc0': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gsize',
        name = 'block_size',
      ),
    ],
  ),
  'g_slice_copy': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gsize',
        name = 'block_size',
      ),
      Param(
        type = 'gconstpointer',
        name = 'mem_block',
      ),
    ],
  ),
  'g_slice_free1': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gsize',
        name = 'block_size',
      ),
      Param(
        type = 'gpointer',
        name = 'mem_block',
      ),
    ],
  ),
  'g_slice_free_chain_with_offset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gsize',
        name = 'block_size',
      ),
      Param(
        type = 'gpointer',
        name = 'mem_chain',
      ),
      Param(
        type = 'gsize',
        name = 'next_offset',
      ),
    ],
  ),
  'g_slice_set_config': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSliceConfig',
        name = 'ckey',
      ),
      Param(
        type = 'gint64',
        name = 'value',
      ),
    ],
  ),
  'g_slice_get_config': Spec(
    return_type = 'gint64',
    parameters = [
      Param(
        type = 'GSliceConfig',
        name = 'ckey',
      ),
    ],
  ),
  'g_slice_get_config_state': Spec(
    return_type = 'gint64 *',
    parameters = [
      Param(
        type = 'GSliceConfig',
        name = 'ckey',
      ),
      Param(
        type = 'gint64',
        name = 'address',
      ),
      Param(
        type = 'guint *',
        name = 'n_values',
      ),
    ],
  ),
  'g_spawn_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_spawn_exit_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_spawn_async': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'working_directory',
      ),
      Param(
        type = 'gchar **',
        name = 'argv',
      ),
      Param(
        type = 'gchar **',
        name = 'envp',
      ),
      Param(
        type = 'GSpawnFlags',
        name = 'flags',
      ),
      Param(
        type = 'GSpawnChildSetupFunc',
        name = 'child_setup',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GPid *',
        name = 'child_pid',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_spawn_async_with_pipes': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'working_directory',
      ),
      Param(
        type = 'gchar **',
        name = 'argv',
      ),
      Param(
        type = 'gchar **',
        name = 'envp',
      ),
      Param(
        type = 'GSpawnFlags',
        name = 'flags',
      ),
      Param(
        type = 'GSpawnChildSetupFunc',
        name = 'child_setup',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GPid *',
        name = 'child_pid',
      ),
      Param(
        type = 'gint *',
        name = 'standard_input',
      ),
      Param(
        type = 'gint *',
        name = 'standard_output',
      ),
      Param(
        type = 'gint *',
        name = 'standard_error',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_spawn_sync': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'working_directory',
      ),
      Param(
        type = 'gchar **',
        name = 'argv',
      ),
      Param(
        type = 'gchar **',
        name = 'envp',
      ),
      Param(
        type = 'GSpawnFlags',
        name = 'flags',
      ),
      Param(
        type = 'GSpawnChildSetupFunc',
        name = 'child_setup',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'gchar **',
        name = 'standard_output',
      ),
      Param(
        type = 'gchar **',
        name = 'standard_error',
      ),
      Param(
        type = 'gint *',
        name = 'exit_status',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_spawn_command_line_sync': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'command_line',
      ),
      Param(
        type = 'gchar **',
        name = 'standard_output',
      ),
      Param(
        type = 'gchar **',
        name = 'standard_error',
      ),
      Param(
        type = 'gint *',
        name = 'exit_status',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_spawn_command_line_async': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'command_line',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_spawn_check_exit_status': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gint',
        name = 'exit_status',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_spawn_close_pid': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPid',
        name = 'pid',
      ),
    ],
  ),
  'g_ascii_tolower': Spec(
    return_type = 'gchar',
    parameters = [
      Param(
        type = 'gchar',
        name = 'c',
      ),
    ],
  ),
  'g_ascii_toupper': Spec(
    return_type = 'gchar',
    parameters = [
      Param(
        type = 'gchar',
        name = 'c',
      ),
    ],
  ),
  'g_ascii_digit_value': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gchar',
        name = 'c',
      ),
    ],
  ),
  'g_ascii_xdigit_value': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gchar',
        name = 'c',
      ),
    ],
  ),
  'g_strdelimit': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'delimiters',
      ),
      Param(
        type = 'gchar',
        name = 'new_delimiter',
      ),
    ],
  ),
  'g_strcanon': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'valid_chars',
      ),
      Param(
        type = 'gchar',
        name = 'substitutor',
      ),
    ],
  ),
  'g_strerror': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'gint',
        name = 'errnum',
      ),
    ],
  ),
  'g_strsignal': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'gint',
        name = 'signum',
      ),
    ],
  ),
  'g_strreverse': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_strlcpy': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'dest',
      ),
      Param(
        type = 'const gchar *',
        name = 'src',
      ),
      Param(
        type = 'gsize',
        name = 'dest_size',
      ),
    ],
  ),
  'g_strlcat': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'dest',
      ),
      Param(
        type = 'const gchar *',
        name = 'src',
      ),
      Param(
        type = 'gsize',
        name = 'dest_size',
      ),
    ],
  ),
  'g_strstr_len': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'haystack',
      ),
      Param(
        type = 'gssize',
        name = 'haystack_len',
      ),
      Param(
        type = 'const gchar *',
        name = 'needle',
      ),
    ],
  ),
  'g_strrstr': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'haystack',
      ),
      Param(
        type = 'const gchar *',
        name = 'needle',
      ),
    ],
  ),
  'g_strrstr_len': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'haystack',
      ),
      Param(
        type = 'gssize',
        name = 'haystack_len',
      ),
      Param(
        type = 'const gchar *',
        name = 'needle',
      ),
    ],
  ),
  'g_str_has_suffix': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'const gchar *',
        name = 'suffix',
      ),
    ],
  ),
  'g_str_has_prefix': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'const gchar *',
        name = 'prefix',
      ),
    ],
  ),
  'g_strtod': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'nptr',
      ),
      Param(
        type = 'gchar **',
        name = 'endptr',
      ),
    ],
  ),
  'g_ascii_strtod': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'nptr',
      ),
      Param(
        type = 'gchar **',
        name = 'endptr',
      ),
    ],
  ),
  'g_ascii_strtoull': Spec(
    return_type = 'guint64',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'nptr',
      ),
      Param(
        type = 'gchar **',
        name = 'endptr',
      ),
      Param(
        type = 'guint',
        name = 'base',
      ),
    ],
  ),
  'g_ascii_strtoll': Spec(
    return_type = 'gint64',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'nptr',
      ),
      Param(
        type = 'gchar **',
        name = 'endptr',
      ),
      Param(
        type = 'guint',
        name = 'base',
      ),
    ],
  ),
  'g_ascii_dtostr': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'buffer',
      ),
      Param(
        type = 'gint',
        name = 'buf_len',
      ),
      Param(
        type = 'gdouble',
        name = 'd',
      ),
    ],
  ),
  'g_ascii_formatd': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'buffer',
      ),
      Param(
        type = 'gint',
        name = 'buf_len',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'gdouble',
        name = 'd',
      ),
    ],
  ),
  'g_strchug': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_strchomp': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_ascii_strcasecmp': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 's1',
      ),
      Param(
        type = 'const gchar *',
        name = 's2',
      ),
    ],
  ),
  'g_ascii_strncasecmp': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 's1',
      ),
      Param(
        type = 'const gchar *',
        name = 's2',
      ),
      Param(
        type = 'gsize',
        name = 'n',
      ),
    ],
  ),
  'g_ascii_strdown': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_ascii_strup': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_strcasecmp': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 's1',
      ),
      Param(
        type = 'const gchar *',
        name = 's2',
      ),
    ],
  ),
  'g_strncasecmp': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 's1',
      ),
      Param(
        type = 'const gchar *',
        name = 's2',
      ),
      Param(
        type = 'guint',
        name = 'n',
      ),
    ],
  ),
  'g_strdown': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_strup': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_strdup': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
    ],
  ),
  'g_strdup_printf': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_strdup_vprintf': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'g_strndup': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gsize',
        name = 'n',
      ),
    ],
  ),
  'g_strnfill': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gsize',
        name = 'length',
      ),
      Param(
        type = 'gchar',
        name = 'fill_char',
      ),
    ],
  ),
  'g_strconcat': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string1',
      ),
    ],
  ),
  'g_strjoin': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'separator',
      ),
    ],
  ),
  'g_strcompress': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'source',
      ),
    ],
  ),
  'g_strescape': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'source',
      ),
      Param(
        type = 'const gchar *',
        name = 'exceptions',
      ),
    ],
  ),
  'g_memdup': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'mem',
      ),
      Param(
        type = 'guint',
        name = 'byte_size',
      ),
    ],
  ),
  'g_strsplit': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'delimiter',
      ),
      Param(
        type = 'gint',
        name = 'max_tokens',
      ),
    ],
  ),
  'g_strsplit_set': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'delimiters',
      ),
      Param(
        type = 'gint',
        name = 'max_tokens',
      ),
    ],
  ),
  'g_strjoinv': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'separator',
      ),
      Param(
        type = 'gchar **',
        name = 'str_array',
      ),
    ],
  ),
  'g_strfreev': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gchar **',
        name = 'str_array',
      ),
    ],
  ),
  'g_strdupv': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'gchar **',
        name = 'str_array',
      ),
    ],
  ),
  'g_strv_length': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gchar **',
        name = 'str_array',
      ),
    ],
  ),
  'g_stpcpy': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'dest',
      ),
      Param(
        type = 'const char *',
        name = 'src',
      ),
    ],
  ),
  'g_string_chunk_new': Spec(
    return_type = 'GStringChunk *',
    parameters = [
      Param(
        type = 'gsize',
        name = 'size',
      ),
    ],
  ),
  'g_string_chunk_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStringChunk *',
        name = 'chunk',
      ),
    ],
  ),
  'g_string_chunk_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStringChunk *',
        name = 'chunk',
      ),
    ],
  ),
  'g_string_chunk_insert': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GStringChunk *',
        name = 'chunk',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_string_chunk_insert_len': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GStringChunk *',
        name = 'chunk',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_string_chunk_insert_const': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GStringChunk *',
        name = 'chunk',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_strcmp0': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = 'str1',
      ),
      Param(
        type = 'const char *',
        name = 'str2',
      ),
    ],
  ),
  'g_test_minimized_result': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'double',
        name = 'minimized_quantity',
      ),
      Param(
        type = 'const char *',
        name = 'format',
      ),
    ],
  ),
  'g_test_maximized_result': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'double',
        name = 'maximized_quantity',
      ),
      Param(
        type = 'const char *',
        name = 'format',
      ),
    ],
  ),
  'g_test_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'int *',
        name = 'argc',
      ),
      Param(
        type = 'char ***',
        name = 'argv',
      ),
    ],
  ),
  'g_test_run': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'g_test_add_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'testpath',
      ),
      Param(
        type = 'GTestFunc',
        name = 'test_func',
      ),
    ],
  ),
  'g_test_add_data_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'testpath',
      ),
      Param(
        type = 'gconstpointer',
        name = 'test_data',
      ),
      Param(
        type = 'GTestDataFunc',
        name = 'test_func',
      ),
    ],
  ),
  'g_test_add_data_func_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'testpath',
      ),
      Param(
        type = 'gpointer',
        name = 'test_data',
      ),
      Param(
        type = 'GTestDataFunc',
        name = 'test_func',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'data_free_func',
      ),
    ],
  ),
  'g_test_fail': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_test_message': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'format',
      ),
    ],
  ),
  'g_test_bug_base': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'uri_pattern',
      ),
    ],
  ),
  'g_test_bug': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'bug_uri_snippet',
      ),
    ],
  ),
  'g_test_timer_start': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_test_timer_elapsed': Spec(
    return_type = 'double',
    parameters = [
    ],
  ),
  'g_test_timer_last': Spec(
    return_type = 'double',
    parameters = [
    ],
  ),
  'g_test_queue_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'gfree_pointer',
      ),
    ],
  ),
  'g_test_queue_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDestroyNotify',
        name = 'destroy_func',
      ),
      Param(
        type = 'gpointer',
        name = 'destroy_data',
      ),
    ],
  ),
  'g_test_trap_fork': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'guint64',
        name = 'usec_timeout',
      ),
      Param(
        type = 'GTestTrapFlags',
        name = 'test_trap_flags',
      ),
    ],
  ),
  'g_test_trap_has_passed': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'g_test_trap_reached_timeout': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'g_test_rand_int': Spec(
    return_type = 'gint32',
    parameters = [
    ],
  ),
  'g_test_rand_int_range': Spec(
    return_type = 'gint32',
    parameters = [
      Param(
        type = 'gint32',
        name = 'begin',
      ),
      Param(
        type = 'gint32',
        name = 'end',
      ),
    ],
  ),
  'g_test_rand_double': Spec(
    return_type = 'double',
    parameters = [
    ],
  ),
  'g_test_rand_double_range': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'double',
        name = 'range_start',
      ),
      Param(
        type = 'double',
        name = 'range_end',
      ),
    ],
  ),
  'g_test_create_case': Spec(
    return_type = 'GTestCase *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'test_name',
      ),
      Param(
        type = 'gsize',
        name = 'data_size',
      ),
      Param(
        type = 'gconstpointer',
        name = 'test_data',
      ),
      Param(
        type = 'GTestFixtureFunc',
        name = 'data_setup',
      ),
      Param(
        type = 'GTestFixtureFunc',
        name = 'data_test',
      ),
      Param(
        type = 'GTestFixtureFunc',
        name = 'data_teardown',
      ),
    ],
  ),
  'g_test_create_suite': Spec(
    return_type = 'GTestSuite *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'suite_name',
      ),
    ],
  ),
  'g_test_get_root': Spec(
    return_type = 'GTestSuite *',
    parameters = [
    ],
  ),
  'g_test_suite_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTestSuite *',
        name = 'suite',
      ),
      Param(
        type = 'GTestCase *',
        name = 'test_case',
      ),
    ],
  ),
  'g_test_suite_add_suite': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTestSuite *',
        name = 'suite',
      ),
      Param(
        type = 'GTestSuite *',
        name = 'nestedsuite',
      ),
    ],
  ),
  'g_test_run_suite': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GTestSuite *',
        name = 'suite',
      ),
    ],
  ),
  'g_test_trap_assertions': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'domain',
      ),
      Param(
        type = 'const char *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'line',
      ),
      Param(
        type = 'const char *',
        name = 'func',
      ),
      Param(
        type = 'guint64',
        name = 'assertion_flags',
      ),
      Param(
        type = 'const char *',
        name = 'pattern',
      ),
    ],
  ),
  'g_assertion_message': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'domain',
      ),
      Param(
        type = 'const char *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'line',
      ),
      Param(
        type = 'const char *',
        name = 'func',
      ),
      Param(
        type = 'const char *',
        name = 'message',
      ),
    ],
  ),
  'g_assertion_message_expr': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'domain',
      ),
      Param(
        type = 'const char *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'line',
      ),
      Param(
        type = 'const char *',
        name = 'func',
      ),
      Param(
        type = 'const char *',
        name = 'expr',
      ),
    ],
  ),
  'g_assertion_message_cmpstr': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'domain',
      ),
      Param(
        type = 'const char *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'line',
      ),
      Param(
        type = 'const char *',
        name = 'func',
      ),
      Param(
        type = 'const char *',
        name = 'expr',
      ),
      Param(
        type = 'const char *',
        name = 'arg1',
      ),
      Param(
        type = 'const char *',
        name = 'cmp',
      ),
      Param(
        type = 'const char *',
        name = 'arg2',
      ),
    ],
  ),
  'g_assertion_message_cmpnum': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'domain',
      ),
      Param(
        type = 'const char *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'line',
      ),
      Param(
        type = 'const char *',
        name = 'func',
      ),
      Param(
        type = 'const char *',
        name = 'expr',
      ),
      Param(
        type = 'long double',
        name = 'arg1',
      ),
      Param(
        type = 'const char *',
        name = 'cmp',
      ),
      Param(
        type = 'long double',
        name = 'arg2',
      ),
      Param(
        type = 'char',
        name = 'numtype',
      ),
    ],
  ),
  'g_assertion_message_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'domain',
      ),
      Param(
        type = 'const char *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'line',
      ),
      Param(
        type = 'const char *',
        name = 'func',
      ),
      Param(
        type = 'const char *',
        name = 'expr',
      ),
      Param(
        type = 'const GError *',
        name = 'error',
      ),
      Param(
        type = 'GQuark',
        name = 'error_domain',
      ),
      Param(
        type = 'int',
        name = 'error_code',
      ),
    ],
  ),
  'g_test_add_vtable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'testpath',
      ),
      Param(
        type = 'gsize',
        name = 'data_size',
      ),
      Param(
        type = 'gconstpointer',
        name = 'test_data',
      ),
      Param(
        type = 'GTestFixtureFunc',
        name = 'data_setup',
      ),
      Param(
        type = 'GTestFixtureFunc',
        name = 'data_test',
      ),
      Param(
        type = 'GTestFixtureFunc',
        name = 'data_teardown',
      ),
    ],
  ),
  'g_test_log_type_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GTestLogType',
        name = 'log_type',
      ),
    ],
  ),
  'g_test_log_buffer_new': Spec(
    return_type = 'GTestLogBuffer *',
    parameters = [
    ],
  ),
  'g_test_log_buffer_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTestLogBuffer *',
        name = 'tbuffer',
      ),
    ],
  ),
  'g_test_log_buffer_push': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTestLogBuffer *',
        name = 'tbuffer',
      ),
      Param(
        type = 'guint',
        name = 'n_bytes',
      ),
      Param(
        type = 'const guint8 *',
        name = 'bytes',
      ),
    ],
  ),
  'g_test_log_buffer_pop': Spec(
    return_type = 'GTestLogMsg *',
    parameters = [
      Param(
        type = 'GTestLogBuffer *',
        name = 'tbuffer',
      ),
    ],
  ),
  'g_test_log_msg_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTestLogMsg *',
        name = 'tmsg',
      ),
    ],
  ),
  'g_test_log_set_fatal_handler': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTestLogFatalFunc',
        name = 'log_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_test_expect_message': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'log_domain',
      ),
      Param(
        type = 'GLogLevelFlags',
        name = 'log_level',
      ),
      Param(
        type = 'const gchar *',
        name = 'pattern',
      ),
    ],
  ),
  'g_test_assert_expected_messages_internal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'domain',
      ),
      Param(
        type = 'const char *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'line',
      ),
      Param(
        type = 'const char *',
        name = 'func',
      ),
    ],
  ),
  'g_thread_pool_new': Spec(
    return_type = 'GThreadPool *',
    parameters = [
      Param(
        type = 'GFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'gint',
        name = 'max_threads',
      ),
      Param(
        type = 'gboolean',
        name = 'exclusive',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_thread_pool_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GThreadPool *',
        name = 'pool',
      ),
      Param(
        type = 'gboolean',
        name = 'immediate',
      ),
      Param(
        type = 'gboolean',
        name = 'wait_',
      ),
    ],
  ),
  'g_thread_pool_push': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GThreadPool *',
        name = 'pool',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_thread_pool_unprocessed': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GThreadPool *',
        name = 'pool',
      ),
    ],
  ),
  'g_thread_pool_set_sort_function': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GThreadPool *',
        name = 'pool',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_thread_pool_set_max_threads': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GThreadPool *',
        name = 'pool',
      ),
      Param(
        type = 'gint',
        name = 'max_threads',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_thread_pool_get_max_threads': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GThreadPool *',
        name = 'pool',
      ),
    ],
  ),
  'g_thread_pool_get_num_threads': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GThreadPool *',
        name = 'pool',
      ),
    ],
  ),
  'g_thread_pool_set_max_unused_threads': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gint',
        name = 'max_threads',
      ),
    ],
  ),
  'g_thread_pool_get_max_unused_threads': Spec(
    return_type = 'gint',
    parameters = [
    ],
  ),
  'g_thread_pool_get_num_unused_threads': Spec(
    return_type = 'guint',
    parameters = [
    ],
  ),
  'g_thread_pool_stop_unused_threads': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_thread_pool_set_max_idle_time': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'interval',
      ),
    ],
  ),
  'g_thread_pool_get_max_idle_time': Spec(
    return_type = 'guint',
    parameters = [
    ],
  ),
  'g_timer_new': Spec(
    return_type = 'GTimer *',
    parameters = [
    ],
  ),
  'g_timer_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTimer *',
        name = 'timer',
      ),
    ],
  ),
  'g_timer_start': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTimer *',
        name = 'timer',
      ),
    ],
  ),
  'g_timer_stop': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTimer *',
        name = 'timer',
      ),
    ],
  ),
  'g_timer_reset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTimer *',
        name = 'timer',
      ),
    ],
  ),
  'g_timer_continue': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTimer *',
        name = 'timer',
      ),
    ],
  ),
  'g_timer_elapsed': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GTimer *',
        name = 'timer',
      ),
      Param(
        type = 'gulong *',
        name = 'microseconds',
      ),
    ],
  ),
  'g_usleep': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gulong',
        name = 'microseconds',
      ),
    ],
  ),
  'g_time_val_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTimeVal *',
        name = 'time_',
      ),
      Param(
        type = 'glong',
        name = 'microseconds',
      ),
    ],
  ),
  'g_time_val_from_iso8601': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'iso_date',
      ),
      Param(
        type = 'GTimeVal *',
        name = 'time_',
      ),
    ],
  ),
  'g_time_val_to_iso8601': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GTimeVal *',
        name = 'time_',
      ),
    ],
  ),
  'g_trash_stack_push': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTrashStack **',
        name = 'stack_p',
      ),
      Param(
        type = 'gpointer',
        name = 'data_p',
      ),
    ],
  ),
  'g_trash_stack_pop': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTrashStack **',
        name = 'stack_p',
      ),
    ],
  ),
  'g_trash_stack_peek': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTrashStack **',
        name = 'stack_p',
      ),
    ],
  ),
  'g_trash_stack_height': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GTrashStack **',
        name = 'stack_p',
      ),
    ],
  ),
  'g_trash_stack_push': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTrashStack **',
        name = 'stack_p',
      ),
      Param(
        type = 'gpointer',
        name = 'data_p',
      ),
    ],
  ),
  'g_trash_stack_pop': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTrashStack **',
        name = 'stack_p',
      ),
    ],
  ),
  'g_trash_stack_peek': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTrashStack **',
        name = 'stack_p',
      ),
    ],
  ),
  'g_trash_stack_height': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GTrashStack **',
        name = 'stack_p',
      ),
    ],
  ),
  'g_tree_new': Spec(
    return_type = 'GTree *',
    parameters = [
      Param(
        type = 'GCompareFunc',
        name = 'key_compare_func',
      ),
    ],
  ),
  'g_tree_new_with_data': Spec(
    return_type = 'GTree *',
    parameters = [
      Param(
        type = 'GCompareDataFunc',
        name = 'key_compare_func',
      ),
      Param(
        type = 'gpointer',
        name = 'key_compare_data',
      ),
    ],
  ),
  'g_tree_new_full': Spec(
    return_type = 'GTree *',
    parameters = [
      Param(
        type = 'GCompareDataFunc',
        name = 'key_compare_func',
      ),
      Param(
        type = 'gpointer',
        name = 'key_compare_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'key_destroy_func',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'value_destroy_func',
      ),
    ],
  ),
  'g_tree_ref': Spec(
    return_type = 'GTree *',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
    ],
  ),
  'g_tree_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
    ],
  ),
  'g_tree_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
    ],
  ),
  'g_tree_insert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
      Param(
        type = 'gpointer',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'value',
      ),
    ],
  ),
  'g_tree_replace': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
      Param(
        type = 'gpointer',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'value',
      ),
    ],
  ),
  'g_tree_remove': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
      Param(
        type = 'gconstpointer',
        name = 'key',
      ),
    ],
  ),
  'g_tree_steal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
      Param(
        type = 'gconstpointer',
        name = 'key',
      ),
    ],
  ),
  'g_tree_lookup': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
      Param(
        type = 'gconstpointer',
        name = 'key',
      ),
    ],
  ),
  'g_tree_lookup_extended': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
      Param(
        type = 'gconstpointer',
        name = 'lookup_key',
      ),
      Param(
        type = 'gpointer *',
        name = 'orig_key',
      ),
      Param(
        type = 'gpointer *',
        name = 'value',
      ),
    ],
  ),
  'g_tree_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
      Param(
        type = 'GTraverseFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_tree_traverse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
      Param(
        type = 'GTraverseFunc',
        name = 'traverse_func',
      ),
      Param(
        type = 'GTraverseType',
        name = 'traverse_type',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_tree_search': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'search_func',
      ),
      Param(
        type = 'gconstpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_tree_height': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
    ],
  ),
  'g_tree_nnodes': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
    ],
  ),
  'g_uri_unescape_string': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'escaped_string',
      ),
      Param(
        type = 'const char *',
        name = 'illegal_characters',
      ),
    ],
  ),
  'g_uri_unescape_segment': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'escaped_string',
      ),
      Param(
        type = 'const char *',
        name = 'escaped_string_end',
      ),
      Param(
        type = 'const char *',
        name = 'illegal_characters',
      ),
    ],
  ),
  'g_uri_parse_scheme': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'uri',
      ),
    ],
  ),
  'g_uri_escape_string': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'unescaped',
      ),
      Param(
        type = 'const char *',
        name = 'reserved_chars_allowed',
      ),
      Param(
        type = 'gboolean',
        name = 'allow_utf8',
      ),
    ],
  ),
  'g_variant_type_string_is_valid': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'type_string',
      ),
    ],
  ),
  'g_variant_type_string_scan': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'limit',
      ),
      Param(
        type = 'const gchar **',
        name = 'endptr',
      ),
    ],
  ),
  'g_variant_type_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_copy': Spec(
    return_type = 'GVariantType *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_new': Spec(
    return_type = 'GVariantType *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'type_string',
      ),
    ],
  ),
  'g_variant_type_get_string_length': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_peek_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_dup_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_is_definite': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_is_container': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_is_basic': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_is_maybe': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_is_array': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_is_tuple': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_is_dict_entry': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_is_variant': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'type1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'type2',
      ),
    ],
  ),
  'g_variant_type_is_subtype_of': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'supertype',
      ),
    ],
  ),
  'g_variant_type_element': Spec(
    return_type = 'const GVariantType *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_first': Spec(
    return_type = 'const GVariantType *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_next': Spec(
    return_type = 'const GVariantType *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_n_items': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_key': Spec(
    return_type = 'const GVariantType *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_value': Spec(
    return_type = 'const GVariantType *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_new_array': Spec(
    return_type = 'GVariantType *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'element',
      ),
    ],
  ),
  'g_variant_type_new_maybe': Spec(
    return_type = 'GVariantType *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'element',
      ),
    ],
  ),
  'g_variant_type_new_tuple': Spec(
    return_type = 'GVariantType *',
    parameters = [
      Param(
        type = 'const GVariantType *const *',
        name = 'items',
      ),
      Param(
        type = 'gint',
        name = 'length',
      ),
    ],
  ),
  'g_variant_type_new_dict_entry': Spec(
    return_type = 'GVariantType *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'key',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_type_checked_': Spec(
    return_type = 'const GVariantType *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = '',
      ),
    ],
  ),
  'g_variant_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_ref': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_ref_sink': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_is_floating': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_take_ref': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_type': Spec(
    return_type = 'const GVariantType *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_type_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_is_of_type': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_is_container': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_classify': Spec(
    return_type = 'GVariantClass',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_boolean': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_byte': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'guchar',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_int16': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'gint16',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_uint16': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'guint16',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_int32': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'gint32',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_uint32': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'guint32',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_int64': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'gint64',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_uint64': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'guint64',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_handle': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'gint32',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_double': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'gdouble',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_string': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_variant_new_object_path': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
    ],
  ),
  'g_variant_is_object_path': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_variant_new_signature': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'signature',
      ),
    ],
  ),
  'g_variant_is_signature': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_variant_new_variant': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_strv': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const gchar *const *',
        name = 'strv',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
    ],
  ),
  'g_variant_new_objv': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const gchar *const *',
        name = 'strv',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
    ],
  ),
  'g_variant_new_bytestring': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_variant_new_bytestring_array': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const gchar *const *',
        name = 'strv',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
    ],
  ),
  'g_variant_new_fixed_array': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'element_type',
      ),
      Param(
        type = 'gconstpointer',
        name = 'elements',
      ),
      Param(
        type = 'gsize',
        name = 'n_elements',
      ),
      Param(
        type = 'gsize',
        name = 'element_size',
      ),
    ],
  ),
  'g_variant_get_boolean': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_byte': Spec(
    return_type = 'guchar',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_int16': Spec(
    return_type = 'gint16',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_uint16': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_int32': Spec(
    return_type = 'gint32',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_uint32': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_int64': Spec(
    return_type = 'gint64',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_uint64': Spec(
    return_type = 'guint64',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_handle': Spec(
    return_type = 'gint32',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_double': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_variant': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_variant_dup_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_variant_get_strv': Spec(
    return_type = 'const gchar **',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_variant_dup_strv': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_variant_get_objv': Spec(
    return_type = 'const gchar **',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_variant_dup_objv': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_variant_get_bytestring': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_dup_bytestring': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_variant_get_bytestring_array': Spec(
    return_type = 'const gchar **',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_variant_dup_bytestring_array': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_variant_new_maybe': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'child_type',
      ),
      Param(
        type = 'GVariant *',
        name = 'child',
      ),
    ],
  ),
  'g_variant_new_array': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'child_type',
      ),
      Param(
        type = 'GVariant *const *',
        name = 'children',
      ),
      Param(
        type = 'gsize',
        name = 'n_children',
      ),
    ],
  ),
  'g_variant_new_tuple': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *const *',
        name = 'children',
      ),
      Param(
        type = 'gsize',
        name = 'n_children',
      ),
    ],
  ),
  'g_variant_new_dict_entry': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'key',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_maybe': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_n_children': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_child': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize',
        name = 'index_',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
    ],
  ),
  'g_variant_get_child_value': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize',
        name = 'index_',
      ),
    ],
  ),
  'g_variant_lookup': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'dictionary',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
    ],
  ),
  'g_variant_lookup_value': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'dictionary',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'expected_type',
      ),
    ],
  ),
  'g_variant_get_fixed_array': Spec(
    return_type = 'gconstpointer',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize *',
        name = 'n_elements',
      ),
      Param(
        type = 'gsize',
        name = 'element_size',
      ),
    ],
  ),
  'g_variant_get_size': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_data': Spec(
    return_type = 'gconstpointer',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_data_as_bytes': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_store': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_variant_print': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gboolean',
        name = 'type_annotate',
      ),
    ],
  ),
  'g_variant_print_string': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gboolean',
        name = 'type_annotate',
      ),
    ],
  ),
  'g_variant_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'value',
      ),
    ],
  ),
  'g_variant_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'one',
      ),
      Param(
        type = 'gconstpointer',
        name = 'two',
      ),
    ],
  ),
  'g_variant_get_normal_form': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_is_normal_form': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_byteswap': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_from_bytes': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
      Param(
        type = 'gboolean',
        name = 'trusted',
      ),
    ],
  ),
  'g_variant_new_from_data': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
      Param(
        type = 'gboolean',
        name = 'trusted',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_variant_iter_new': Spec(
    return_type = 'GVariantIter *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_iter_init': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GVariantIter *',
        name = 'iter',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_iter_copy': Spec(
    return_type = 'GVariantIter *',
    parameters = [
      Param(
        type = 'GVariantIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_variant_iter_n_children': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GVariantIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_variant_iter_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariantIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_variant_iter_next_value': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariantIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_variant_iter_next': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVariantIter *',
        name = 'iter',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
    ],
  ),
  'g_variant_iter_loop': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVariantIter *',
        name = 'iter',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
    ],
  ),
  'g_variant_parser_get_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_variant_builder_new': Spec(
    return_type = 'GVariantBuilder *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_builder_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariantBuilder *',
        name = 'builder',
      ),
    ],
  ),
  'g_variant_builder_ref': Spec(
    return_type = 'GVariantBuilder *',
    parameters = [
      Param(
        type = 'GVariantBuilder *',
        name = 'builder',
      ),
    ],
  ),
  'g_variant_builder_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariantBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_builder_end': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariantBuilder *',
        name = 'builder',
      ),
    ],
  ),
  'g_variant_builder_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariantBuilder *',
        name = 'builder',
      ),
    ],
  ),
  'g_variant_builder_open': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariantBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_builder_close': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariantBuilder *',
        name = 'builder',
      ),
    ],
  ),
  'g_variant_builder_add_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariantBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_builder_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariantBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
    ],
  ),
  'g_variant_builder_add_parsed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariantBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_variant_new': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
    ],
  ),
  'g_variant_get': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
    ],
  ),
  'g_variant_new_va': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
      Param(
        type = 'const gchar **',
        name = 'endptr',
      ),
      Param(
        type = 'va_list *',
        name = 'app',
      ),
    ],
  ),
  'g_variant_get_va': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
      Param(
        type = 'const gchar **',
        name = 'endptr',
      ),
      Param(
        type = 'va_list *',
        name = 'app',
      ),
    ],
  ),
  'g_variant_check_format_string': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
      Param(
        type = 'gboolean',
        name = 'copy_only',
      ),
    ],
  ),
  'g_variant_parse': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'const gchar *',
        name = 'limit',
      ),
      Param(
        type = 'const gchar **',
        name = 'endptr',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_variant_new_parsed': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_variant_new_parsed_va': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'va_list *',
        name = 'app',
      ),
    ],
  ),
  'g_variant_compare': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'one',
      ),
      Param(
        type = 'gconstpointer',
        name = 'two',
      ),
    ],
  ),
  'glib_check_version': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'guint',
        name = 'required_major',
      ),
      Param(
        type = 'guint',
        name = 'required_minor',
      ),
      Param(
        type = 'guint',
        name = 'required_micro',
      ),
    ],
  ),
  'g_mem_chunk_new': Spec(
    return_type = 'GMemChunk *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'gint',
        name = 'atom_size',
      ),
      Param(
        type = 'gsize',
        name = 'area_size',
      ),
      Param(
        type = 'gint',
        name = 'type',
      ),
    ],
  ),
  'g_mem_chunk_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMemChunk *',
        name = 'mem_chunk',
      ),
    ],
  ),
  'g_mem_chunk_alloc': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GMemChunk *',
        name = 'mem_chunk',
      ),
    ],
  ),
  'g_mem_chunk_alloc0': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GMemChunk *',
        name = 'mem_chunk',
      ),
    ],
  ),
  'g_mem_chunk_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMemChunk *',
        name = 'mem_chunk',
      ),
      Param(
        type = 'gpointer',
        name = 'mem',
      ),
    ],
  ),
  'g_mem_chunk_clean': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMemChunk *',
        name = 'mem_chunk',
      ),
    ],
  ),
  'g_mem_chunk_reset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMemChunk *',
        name = 'mem_chunk',
      ),
    ],
  ),
  'g_mem_chunk_print': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMemChunk *',
        name = 'mem_chunk',
      ),
    ],
  ),
  'g_mem_chunk_info': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_blow_chunks': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_allocator_new': Spec(
    return_type = 'GAllocator *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'guint',
        name = 'n_preallocs',
      ),
    ],
  ),
  'g_allocator_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAllocator *',
        name = 'allocator',
      ),
    ],
  ),
  'g_list_push_allocator': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAllocator *',
        name = 'allocator',
      ),
    ],
  ),
  'g_list_pop_allocator': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_slist_push_allocator': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAllocator *',
        name = 'allocator',
      ),
    ],
  ),
  'g_slist_pop_allocator': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_node_push_allocator': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAllocator *',
        name = 'allocator',
      ),
    ],
  ),
  'g_node_pop_allocator': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_cache_new': Spec(
    return_type = 'GCache *',
    parameters = [
      Param(
        type = 'GCacheNewFunc',
        name = 'value_new_func',
      ),
      Param(
        type = 'GCacheDestroyFunc',
        name = 'value_destroy_func',
      ),
      Param(
        type = 'GCacheDupFunc',
        name = 'key_dup_func',
      ),
      Param(
        type = 'GCacheDestroyFunc',
        name = 'key_destroy_func',
      ),
      Param(
        type = 'GHashFunc',
        name = 'hash_key_func',
      ),
      Param(
        type = 'GHashFunc',
        name = 'hash_value_func',
      ),
      Param(
        type = 'GEqualFunc',
        name = 'key_equal_func',
      ),
    ],
  ),
  'g_cache_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCache *',
        name = 'cache',
      ),
    ],
  ),
  'g_cache_insert': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GCache *',
        name = 'cache',
      ),
      Param(
        type = 'gpointer',
        name = 'key',
      ),
    ],
  ),
  'g_cache_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCache *',
        name = 'cache',
      ),
      Param(
        type = 'gconstpointer',
        name = 'value',
      ),
    ],
  ),
  'g_cache_key_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCache *',
        name = 'cache',
      ),
      Param(
        type = 'GHFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_cache_value_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCache *',
        name = 'cache',
      ),
      Param(
        type = 'GHFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_completion_new': Spec(
    return_type = 'GCompletion *',
    parameters = [
      Param(
        type = 'GCompletionFunc',
        name = 'func',
      ),
    ],
  ),
  'g_completion_add_items': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCompletion *',
        name = 'cmp',
      ),
      Param(
        type = 'GList *',
        name = 'items',
      ),
    ],
  ),
  'g_completion_remove_items': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCompletion *',
        name = 'cmp',
      ),
      Param(
        type = 'GList *',
        name = 'items',
      ),
    ],
  ),
  'g_completion_clear_items': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCompletion *',
        name = 'cmp',
      ),
    ],
  ),
  'g_completion_complete': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GCompletion *',
        name = 'cmp',
      ),
      Param(
        type = 'const gchar *',
        name = 'prefix',
      ),
      Param(
        type = 'gchar **',
        name = 'new_prefix',
      ),
    ],
  ),
  'g_completion_complete_utf8': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GCompletion *',
        name = 'cmp',
      ),
      Param(
        type = 'const gchar *',
        name = 'prefix',
      ),
      Param(
        type = 'gchar **',
        name = 'new_prefix',
      ),
    ],
  ),
  'g_completion_set_compare': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCompletion *',
        name = 'cmp',
      ),
      Param(
        type = 'GCompletionStrncmpFunc',
        name = 'strncmp_func',
      ),
    ],
  ),
  'g_completion_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCompletion *',
        name = 'cmp',
      ),
    ],
  ),
  'g_relation_new': Spec(
    return_type = 'GRelation *',
    parameters = [
      Param(
        type = 'gint',
        name = 'fields',
      ),
    ],
  ),
  'g_relation_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRelation *',
        name = 'relation',
      ),
    ],
  ),
  'g_relation_index': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRelation *',
        name = 'relation',
      ),
      Param(
        type = 'gint',
        name = 'field',
      ),
      Param(
        type = 'GHashFunc',
        name = 'hash_func',
      ),
      Param(
        type = 'GEqualFunc',
        name = 'key_equal_func',
      ),
    ],
  ),
  'g_relation_insert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRelation *',
        name = 'relation',
      ),
    ],
  ),
  'g_relation_delete': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GRelation *',
        name = 'relation',
      ),
      Param(
        type = 'gconstpointer',
        name = 'key',
      ),
      Param(
        type = 'gint',
        name = 'field',
      ),
    ],
  ),
  'g_relation_select': Spec(
    return_type = 'GTuples *',
    parameters = [
      Param(
        type = 'GRelation *',
        name = 'relation',
      ),
      Param(
        type = 'gconstpointer',
        name = 'key',
      ),
      Param(
        type = 'gint',
        name = 'field',
      ),
    ],
  ),
  'g_relation_count': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GRelation *',
        name = 'relation',
      ),
      Param(
        type = 'gconstpointer',
        name = 'key',
      ),
      Param(
        type = 'gint',
        name = 'field',
      ),
    ],
  ),
  'g_relation_exists': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GRelation *',
        name = 'relation',
      ),
    ],
  ),
  'g_relation_print': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRelation *',
        name = 'relation',
      ),
    ],
  ),
  'g_tuples_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTuples *',
        name = 'tuples',
      ),
    ],
  ),
  'g_tuples_index': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTuples *',
        name = 'tuples',
      ),
      Param(
        type = 'gint',
        name = 'index_',
      ),
      Param(
        type = 'gint',
        name = 'field',
      ),
    ],
  ),
  'g_thread_create': Spec(
    return_type = 'GThread *',
    parameters = [
      Param(
        type = 'GThreadFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'gboolean',
        name = 'joinable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_thread_create_full': Spec(
    return_type = 'GThread *',
    parameters = [
      Param(
        type = 'GThreadFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'gulong',
        name = 'stack_size',
      ),
      Param(
        type = 'gboolean',
        name = 'joinable',
      ),
      Param(
        type = 'gboolean',
        name = 'bound',
      ),
      Param(
        type = 'GThreadPriority',
        name = 'priority',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_thread_set_priority': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GThread *',
        name = 'thread',
      ),
      Param(
        type = 'GThreadPriority',
        name = 'priority',
      ),
    ],
  ),
  'g_thread_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFunc',
        name = 'thread_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  '__bswap_32': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'unsigned int',
        name = '__bsx',
      ),
    ],
  ),
  '__bswap_64': Spec(
    return_type = 'unsigned long long',
    parameters = [
      Param(
        type = 'unsigned long long',
        name = '__bsx',
      ),
    ],
  ),
  '__sched_cpucount': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'size_t',
        name = '__setsize',
      ),
      Param(
        type = 'const cpu_set_t *',
        name = '__setp',
      ),
    ],
  ),
  '__sched_cpualloc': Spec(
    return_type = 'cpu_set_t *',
    parameters = [
      Param(
        type = 'size_t',
        name = '__count',
      ),
    ],
  ),
  '__sched_cpufree': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cpu_set_t *',
        name = '__set',
      ),
    ],
  ),
  'sched_setparam': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pid',
      ),
      Param(
        type = 'const struct sched_param *',
        name = '__param',
      ),
    ],
  ),
  'sched_getparam': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pid',
      ),
      Param(
        type = 'struct sched_param *',
        name = '__param',
      ),
    ],
  ),
  'sched_setscheduler': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pid',
      ),
      Param(
        type = 'int',
        name = '__policy',
      ),
      Param(
        type = 'const struct sched_param *',
        name = '__param',
      ),
    ],
  ),
  'sched_getscheduler': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pid',
      ),
    ],
  ),
  'sched_yield': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'sched_get_priority_max': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__algorithm',
      ),
    ],
  ),
  'sched_get_priority_min': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__algorithm',
      ),
    ],
  ),
  'sched_rr_get_interval': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pid',
      ),
      Param(
        type = 'struct timespec *',
        name = '__t',
      ),
    ],
  ),
  'pthread_create': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_t *restrict',
        name = '__newthread',
      ),
      Param(
        type = 'const pthread_attr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'void *(*)(void *)',
        name = '__start_routine',
      ),
      Param(
        type = 'void *restrict',
        name = '__arg',
      ),
    ],
  ),
  'pthread_exit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'void *',
        name = '__retval',
      ),
    ],
  ),
  'pthread_join': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_t',
        name = '__th',
      ),
      Param(
        type = 'void **',
        name = '__thread_return',
      ),
    ],
  ),
  'pthread_detach': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_t',
        name = '__th',
      ),
    ],
  ),
  'pthread_self': Spec(
    return_type = 'pthread_t',
    parameters = [
    ],
  ),
  'pthread_equal': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_t',
        name = '__thread1',
      ),
      Param(
        type = 'pthread_t',
        name = '__thread2',
      ),
    ],
  ),
  'pthread_attr_init': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_attr_t *',
        name = '__attr',
      ),
    ],
  ),
  'pthread_attr_destroy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_attr_t *',
        name = '__attr',
      ),
    ],
  ),
  'pthread_attr_getdetachstate': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_attr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int *',
        name = '__detachstate',
      ),
    ],
  ),
  'pthread_attr_setdetachstate': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_attr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__detachstate',
      ),
    ],
  ),
  'pthread_attr_getguardsize': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_attr_t *',
        name = '__attr',
      ),
      Param(
        type = 'size_t *',
        name = '__guardsize',
      ),
    ],
  ),
  'pthread_attr_setguardsize': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_attr_t *',
        name = '__attr',
      ),
      Param(
        type = 'size_t',
        name = '__guardsize',
      ),
    ],
  ),
  'pthread_attr_getschedparam': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_attr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'struct sched_param *restrict',
        name = '__param',
      ),
    ],
  ),
  'pthread_attr_setschedparam': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_attr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'const struct sched_param *restrict',
        name = '__param',
      ),
    ],
  ),
  'pthread_attr_getschedpolicy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_attr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'int *restrict',
        name = '__policy',
      ),
    ],
  ),
  'pthread_attr_setschedpolicy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_attr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__policy',
      ),
    ],
  ),
  'pthread_attr_getinheritsched': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_attr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'int *restrict',
        name = '__inherit',
      ),
    ],
  ),
  'pthread_attr_setinheritsched': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_attr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__inherit',
      ),
    ],
  ),
  'pthread_attr_getscope': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_attr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'int *restrict',
        name = '__scope',
      ),
    ],
  ),
  'pthread_attr_setscope': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_attr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__scope',
      ),
    ],
  ),
  'pthread_attr_getstackaddr': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_attr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'void **restrict',
        name = '__stackaddr',
      ),
    ],
  ),
  'pthread_attr_setstackaddr': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_attr_t *',
        name = '__attr',
      ),
      Param(
        type = 'void *',
        name = '__stackaddr',
      ),
    ],
  ),
  'pthread_attr_getstacksize': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_attr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'size_t *restrict',
        name = '__stacksize',
      ),
    ],
  ),
  'pthread_attr_setstacksize': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_attr_t *',
        name = '__attr',
      ),
      Param(
        type = 'size_t',
        name = '__stacksize',
      ),
    ],
  ),
  'pthread_attr_getstack': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_attr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'void **restrict',
        name = '__stackaddr',
      ),
      Param(
        type = 'size_t *restrict',
        name = '__stacksize',
      ),
    ],
  ),
  'pthread_attr_setstack': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_attr_t *',
        name = '__attr',
      ),
      Param(
        type = 'void *',
        name = '__stackaddr',
      ),
      Param(
        type = 'size_t',
        name = '__stacksize',
      ),
    ],
  ),
  'pthread_setschedparam': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_t',
        name = '__target_thread',
      ),
      Param(
        type = 'int',
        name = '__policy',
      ),
      Param(
        type = 'const struct sched_param *',
        name = '__param',
      ),
    ],
  ),
  'pthread_getschedparam': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_t',
        name = '__target_thread',
      ),
      Param(
        type = 'int *restrict',
        name = '__policy',
      ),
      Param(
        type = 'struct sched_param *restrict',
        name = '__param',
      ),
    ],
  ),
  'pthread_setschedprio': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_t',
        name = '__target_thread',
      ),
      Param(
        type = 'int',
        name = '__prio',
      ),
    ],
  ),
  'pthread_once': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_once_t *',
        name = '__once_control',
      ),
      Param(
        type = 'void (*)(void)',
        name = '__init_routine',
      ),
    ],
  ),
  'pthread_setcancelstate': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__state',
      ),
      Param(
        type = 'int *',
        name = '__oldstate',
      ),
    ],
  ),
  'pthread_setcanceltype': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__type',
      ),
      Param(
        type = 'int *',
        name = '__oldtype',
      ),
    ],
  ),
  'pthread_cancel': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_t',
        name = '__th',
      ),
    ],
  ),
  'pthread_testcancel': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  '__pthread_register_cancel': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = '__pthread_unwind_buf_t *',
        name = '__buf',
      ),
    ],
  ),
  '__pthread_unregister_cancel': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = '__pthread_unwind_buf_t *',
        name = '__buf',
      ),
    ],
  ),
  '__pthread_unwind_next': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = '__pthread_unwind_buf_t *',
        name = '__buf',
      ),
    ],
  ),
  '__sigsetjmp': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'struct __jmp_buf_tag *',
        name = '__env',
      ),
      Param(
        type = 'int',
        name = '__savemask',
      ),
    ],
  ),
  'pthread_mutex_init': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutex_t *',
        name = '__mutex',
      ),
      Param(
        type = 'const pthread_mutexattr_t *',
        name = '__mutexattr',
      ),
    ],
  ),
  'pthread_mutex_destroy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutex_t *',
        name = '__mutex',
      ),
    ],
  ),
  'pthread_mutex_trylock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutex_t *',
        name = '__mutex',
      ),
    ],
  ),
  'pthread_mutex_lock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutex_t *',
        name = '__mutex',
      ),
    ],
  ),
  'pthread_mutex_timedlock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutex_t *restrict',
        name = '__mutex',
      ),
      Param(
        type = 'const struct timespec *restrict',
        name = '__abstime',
      ),
    ],
  ),
  'pthread_mutex_unlock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutex_t *',
        name = '__mutex',
      ),
    ],
  ),
  'pthread_mutex_getprioceiling': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_mutex_t *restrict',
        name = '__mutex',
      ),
      Param(
        type = 'int *restrict',
        name = '__prioceiling',
      ),
    ],
  ),
  'pthread_mutex_setprioceiling': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutex_t *restrict',
        name = '__mutex',
      ),
      Param(
        type = 'int',
        name = '__prioceiling',
      ),
      Param(
        type = 'int *restrict',
        name = '__old_ceiling',
      ),
    ],
  ),
  'pthread_mutex_consistent': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutex_t *',
        name = '__mutex',
      ),
    ],
  ),
  'pthread_mutexattr_init': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutexattr_t *',
        name = '__attr',
      ),
    ],
  ),
  'pthread_mutexattr_destroy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutexattr_t *',
        name = '__attr',
      ),
    ],
  ),
  'pthread_mutexattr_getpshared': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_mutexattr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'int *restrict',
        name = '__pshared',
      ),
    ],
  ),
  'pthread_mutexattr_setpshared': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutexattr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__pshared',
      ),
    ],
  ),
  'pthread_mutexattr_gettype': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_mutexattr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'int *restrict',
        name = '__kind',
      ),
    ],
  ),
  'pthread_mutexattr_settype': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutexattr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__kind',
      ),
    ],
  ),
  'pthread_mutexattr_getprotocol': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_mutexattr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'int *restrict',
        name = '__protocol',
      ),
    ],
  ),
  'pthread_mutexattr_setprotocol': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutexattr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__protocol',
      ),
    ],
  ),
  'pthread_mutexattr_getprioceiling': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_mutexattr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'int *restrict',
        name = '__prioceiling',
      ),
    ],
  ),
  'pthread_mutexattr_setprioceiling': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutexattr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__prioceiling',
      ),
    ],
  ),
  'pthread_mutexattr_getrobust': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_mutexattr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int *',
        name = '__robustness',
      ),
    ],
  ),
  'pthread_mutexattr_setrobust': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutexattr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__robustness',
      ),
    ],
  ),
  'pthread_rwlock_init': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlock_t *restrict',
        name = '__rwlock',
      ),
      Param(
        type = 'const pthread_rwlockattr_t *restrict',
        name = '__attr',
      ),
    ],
  ),
  'pthread_rwlock_destroy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlock_t *',
        name = '__rwlock',
      ),
    ],
  ),
  'pthread_rwlock_rdlock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlock_t *',
        name = '__rwlock',
      ),
    ],
  ),
  'pthread_rwlock_tryrdlock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlock_t *',
        name = '__rwlock',
      ),
    ],
  ),
  'pthread_rwlock_timedrdlock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlock_t *restrict',
        name = '__rwlock',
      ),
      Param(
        type = 'const struct timespec *restrict',
        name = '__abstime',
      ),
    ],
  ),
  'pthread_rwlock_wrlock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlock_t *',
        name = '__rwlock',
      ),
    ],
  ),
  'pthread_rwlock_trywrlock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlock_t *',
        name = '__rwlock',
      ),
    ],
  ),
  'pthread_rwlock_timedwrlock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlock_t *restrict',
        name = '__rwlock',
      ),
      Param(
        type = 'const struct timespec *restrict',
        name = '__abstime',
      ),
    ],
  ),
  'pthread_rwlock_unlock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlock_t *',
        name = '__rwlock',
      ),
    ],
  ),
  'pthread_rwlockattr_init': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlockattr_t *',
        name = '__attr',
      ),
    ],
  ),
  'pthread_rwlockattr_destroy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlockattr_t *',
        name = '__attr',
      ),
    ],
  ),
  'pthread_rwlockattr_getpshared': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_rwlockattr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'int *restrict',
        name = '__pshared',
      ),
    ],
  ),
  'pthread_rwlockattr_setpshared': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlockattr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__pshared',
      ),
    ],
  ),
  'pthread_rwlockattr_getkind_np': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_rwlockattr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'int *restrict',
        name = '__pref',
      ),
    ],
  ),
  'pthread_rwlockattr_setkind_np': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlockattr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__pref',
      ),
    ],
  ),
  'pthread_cond_init': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_cond_t *restrict',
        name = '__cond',
      ),
      Param(
        type = 'const pthread_condattr_t *restrict',
        name = '__cond_attr',
      ),
    ],
  ),
  'pthread_cond_destroy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_cond_t *',
        name = '__cond',
      ),
    ],
  ),
  'pthread_cond_signal': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_cond_t *',
        name = '__cond',
      ),
    ],
  ),
  'pthread_cond_broadcast': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_cond_t *',
        name = '__cond',
      ),
    ],
  ),
  'pthread_cond_wait': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_cond_t *restrict',
        name = '__cond',
      ),
      Param(
        type = 'pthread_mutex_t *restrict',
        name = '__mutex',
      ),
    ],
  ),
  'pthread_cond_timedwait': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_cond_t *restrict',
        name = '__cond',
      ),
      Param(
        type = 'pthread_mutex_t *restrict',
        name = '__mutex',
      ),
      Param(
        type = 'const struct timespec *restrict',
        name = '__abstime',
      ),
    ],
  ),
  'pthread_condattr_init': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_condattr_t *',
        name = '__attr',
      ),
    ],
  ),
  'pthread_condattr_destroy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_condattr_t *',
        name = '__attr',
      ),
    ],
  ),
  'pthread_condattr_getpshared': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_condattr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'int *restrict',
        name = '__pshared',
      ),
    ],
  ),
  'pthread_condattr_setpshared': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_condattr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__pshared',
      ),
    ],
  ),
  'pthread_condattr_getclock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_condattr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = '__clockid_t *restrict',
        name = '__clock_id',
      ),
    ],
  ),
  'pthread_condattr_setclock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_condattr_t *',
        name = '__attr',
      ),
      Param(
        type = '__clockid_t',
        name = '__clock_id',
      ),
    ],
  ),
  'pthread_spin_init': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_spinlock_t *',
        name = '__lock',
      ),
      Param(
        type = 'int',
        name = '__pshared',
      ),
    ],
  ),
  'pthread_spin_destroy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_spinlock_t *',
        name = '__lock',
      ),
    ],
  ),
  'pthread_spin_lock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_spinlock_t *',
        name = '__lock',
      ),
    ],
  ),
  'pthread_spin_trylock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_spinlock_t *',
        name = '__lock',
      ),
    ],
  ),
  'pthread_spin_unlock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_spinlock_t *',
        name = '__lock',
      ),
    ],
  ),
  'pthread_barrier_init': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_barrier_t *restrict',
        name = '__barrier',
      ),
      Param(
        type = 'const pthread_barrierattr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'unsigned int',
        name = '__count',
      ),
    ],
  ),
  'pthread_barrier_destroy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_barrier_t *',
        name = '__barrier',
      ),
    ],
  ),
  'pthread_barrier_wait': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_barrier_t *',
        name = '__barrier',
      ),
    ],
  ),
  'pthread_barrierattr_init': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_barrierattr_t *',
        name = '__attr',
      ),
    ],
  ),
  'pthread_barrierattr_destroy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_barrierattr_t *',
        name = '__attr',
      ),
    ],
  ),
  'pthread_barrierattr_getpshared': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_barrierattr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'int *restrict',
        name = '__pshared',
      ),
    ],
  ),
  'pthread_barrierattr_setpshared': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_barrierattr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__pshared',
      ),
    ],
  ),
  'pthread_key_create': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_key_t *',
        name = '__key',
      ),
      Param(
        type = 'void (*)(void *)',
        name = '__destr_function',
      ),
    ],
  ),
  'pthread_key_delete': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_key_t',
        name = '__key',
      ),
    ],
  ),
  'pthread_getspecific': Spec(
    return_type = 'void *',
    parameters = [
      Param(
        type = 'pthread_key_t',
        name = '__key',
      ),
    ],
  ),
  'pthread_setspecific': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_key_t',
        name = '__key',
      ),
      Param(
        type = 'const void *',
        name = '__pointer',
      ),
    ],
  ),
  'pthread_getcpuclockid': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_t',
        name = '__thread_id',
      ),
      Param(
        type = '__clockid_t *',
        name = '__clock_id',
      ),
    ],
  ),
  'pthread_atfork': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'void (*)(void)',
        name = '__prepare',
      ),
      Param(
        type = 'void (*)(void)',
        name = '__parent',
      ),
      Param(
        type = 'void (*)(void)',
        name = '__child',
      ),
    ],
  ),
  'g_static_mutex_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_static_mutex_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_static_mutex_get_mutex_impl': Spec(
    return_type = 'GMutex *',
    parameters = [
      Param(
        type = 'GStaticMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_static_rec_mutex_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticRecMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_static_rec_mutex_lock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticRecMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_static_rec_mutex_trylock': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GStaticRecMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_static_rec_mutex_unlock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticRecMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_static_rec_mutex_lock_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticRecMutex *',
        name = 'mutex',
      ),
      Param(
        type = 'guint',
        name = 'depth',
      ),
    ],
  ),
  'g_static_rec_mutex_unlock_full': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GStaticRecMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_static_rec_mutex_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticRecMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_static_rw_lock_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticRWLock *',
        name = 'lock',
      ),
    ],
  ),
  'g_static_rw_lock_reader_lock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticRWLock *',
        name = 'lock',
      ),
    ],
  ),
  'g_static_rw_lock_reader_trylock': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GStaticRWLock *',
        name = 'lock',
      ),
    ],
  ),
  'g_static_rw_lock_reader_unlock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticRWLock *',
        name = 'lock',
      ),
    ],
  ),
  'g_static_rw_lock_writer_lock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticRWLock *',
        name = 'lock',
      ),
    ],
  ),
  'g_static_rw_lock_writer_trylock': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GStaticRWLock *',
        name = 'lock',
      ),
    ],
  ),
  'g_static_rw_lock_writer_unlock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticRWLock *',
        name = 'lock',
      ),
    ],
  ),
  'g_static_rw_lock_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticRWLock *',
        name = 'lock',
      ),
    ],
  ),
  'g_private_new': Spec(
    return_type = 'GPrivate *',
    parameters = [
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_static_private_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticPrivate *',
        name = 'private_key',
      ),
    ],
  ),
  'g_static_private_get': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GStaticPrivate *',
        name = 'private_key',
      ),
    ],
  ),
  'g_static_private_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticPrivate *',
        name = 'private_key',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_static_private_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticPrivate *',
        name = 'private_key',
      ),
    ],
  ),
  'g_once_init_enter_impl': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'volatile gsize *',
        name = 'location',
      ),
    ],
  ),
  'g_thread_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'vtable',
      ),
    ],
  ),
  'g_thread_init_with_errorcheck_mutexes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'vtable',
      ),
    ],
  ),
  'g_thread_get_initialized': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'g_mutex_new': Spec(
    return_type = 'GMutex *',
    parameters = [
    ],
  ),
  'g_mutex_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_cond_new': Spec(
    return_type = 'GCond *',
    parameters = [
    ],
  ),
  'g_cond_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCond *',
        name = 'cond',
      ),
    ],
  ),
  'g_cond_timed_wait': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GCond *',
        name = 'cond',
      ),
      Param(
        type = 'GMutex *',
        name = 'mutex',
      ),
      Param(
        type = 'GTimeVal *',
        name = 'timeval',
      ),
    ],
  ),
  'cairo_version': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'cairo_version_string': Spec(
    return_type = 'const char *',
    parameters = [
    ],
  ),
  'cairo_create': Spec(
    return_type = 'cairo_t *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'target',
      ),
    ],
  ),
  'cairo_reference': Spec(
    return_type = 'cairo_t *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_reference_count': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_user_data': Spec(
    return_type = 'void *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
    ],
  ),
  'cairo_set_user_data': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
      Param(
        type = 'void *',
        name = 'user_data',
      ),
      Param(
        type = 'cairo_destroy_func_t',
        name = 'destroy',
      ),
    ],
  ),
  'cairo_save': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_restore': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_push_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_push_group_with_content': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_content_t',
        name = 'content',
      ),
    ],
  ),
  'cairo_pop_group': Spec(
    return_type = 'cairo_pattern_t *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_pop_group_to_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_set_operator': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_operator_t',
        name = 'op',
      ),
    ],
  ),
  'cairo_set_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_pattern_t *',
        name = 'source',
      ),
    ],
  ),
  'cairo_set_source_rgb': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'red',
      ),
      Param(
        type = 'double',
        name = 'green',
      ),
      Param(
        type = 'double',
        name = 'blue',
      ),
    ],
  ),
  'cairo_set_source_rgba': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'red',
      ),
      Param(
        type = 'double',
        name = 'green',
      ),
      Param(
        type = 'double',
        name = 'blue',
      ),
      Param(
        type = 'double',
        name = 'alpha',
      ),
    ],
  ),
  'cairo_set_source_surface': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
    ],
  ),
  'cairo_set_tolerance': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'tolerance',
      ),
    ],
  ),
  'cairo_set_antialias': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_antialias_t',
        name = 'antialias',
      ),
    ],
  ),
  'cairo_set_fill_rule': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_fill_rule_t',
        name = 'fill_rule',
      ),
    ],
  ),
  'cairo_set_line_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'width',
      ),
    ],
  ),
  'cairo_set_line_cap': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_line_cap_t',
        name = 'line_cap',
      ),
    ],
  ),
  'cairo_set_line_join': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_line_join_t',
        name = 'line_join',
      ),
    ],
  ),
  'cairo_set_dash': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const double *',
        name = 'dashes',
      ),
      Param(
        type = 'int',
        name = 'num_dashes',
      ),
      Param(
        type = 'double',
        name = 'offset',
      ),
    ],
  ),
  'cairo_set_miter_limit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'limit',
      ),
    ],
  ),
  'cairo_translate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'tx',
      ),
      Param(
        type = 'double',
        name = 'ty',
      ),
    ],
  ),
  'cairo_scale': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'sx',
      ),
      Param(
        type = 'double',
        name = 'sy',
      ),
    ],
  ),
  'cairo_rotate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'angle',
      ),
    ],
  ),
  'cairo_transform': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const cairo_matrix_t *',
        name = 'matrix',
      ),
    ],
  ),
  'cairo_set_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const cairo_matrix_t *',
        name = 'matrix',
      ),
    ],
  ),
  'cairo_identity_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_user_to_device': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double *',
        name = 'x',
      ),
      Param(
        type = 'double *',
        name = 'y',
      ),
    ],
  ),
  'cairo_user_to_device_distance': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double *',
        name = 'dx',
      ),
      Param(
        type = 'double *',
        name = 'dy',
      ),
    ],
  ),
  'cairo_device_to_user': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double *',
        name = 'x',
      ),
      Param(
        type = 'double *',
        name = 'y',
      ),
    ],
  ),
  'cairo_device_to_user_distance': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double *',
        name = 'dx',
      ),
      Param(
        type = 'double *',
        name = 'dy',
      ),
    ],
  ),
  'cairo_new_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_move_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
    ],
  ),
  'cairo_new_sub_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_line_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
    ],
  ),
  'cairo_curve_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'x1',
      ),
      Param(
        type = 'double',
        name = 'y1',
      ),
      Param(
        type = 'double',
        name = 'x2',
      ),
      Param(
        type = 'double',
        name = 'y2',
      ),
      Param(
        type = 'double',
        name = 'x3',
      ),
      Param(
        type = 'double',
        name = 'y3',
      ),
    ],
  ),
  'cairo_arc': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'xc',
      ),
      Param(
        type = 'double',
        name = 'yc',
      ),
      Param(
        type = 'double',
        name = 'radius',
      ),
      Param(
        type = 'double',
        name = 'angle1',
      ),
      Param(
        type = 'double',
        name = 'angle2',
      ),
    ],
  ),
  'cairo_arc_negative': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'xc',
      ),
      Param(
        type = 'double',
        name = 'yc',
      ),
      Param(
        type = 'double',
        name = 'radius',
      ),
      Param(
        type = 'double',
        name = 'angle1',
      ),
      Param(
        type = 'double',
        name = 'angle2',
      ),
    ],
  ),
  'cairo_rel_move_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'dx',
      ),
      Param(
        type = 'double',
        name = 'dy',
      ),
    ],
  ),
  'cairo_rel_line_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'dx',
      ),
      Param(
        type = 'double',
        name = 'dy',
      ),
    ],
  ),
  'cairo_rel_curve_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'dx1',
      ),
      Param(
        type = 'double',
        name = 'dy1',
      ),
      Param(
        type = 'double',
        name = 'dx2',
      ),
      Param(
        type = 'double',
        name = 'dy2',
      ),
      Param(
        type = 'double',
        name = 'dx3',
      ),
      Param(
        type = 'double',
        name = 'dy3',
      ),
    ],
  ),
  'cairo_rectangle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
      Param(
        type = 'double',
        name = 'width',
      ),
      Param(
        type = 'double',
        name = 'height',
      ),
    ],
  ),
  'cairo_close_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_path_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double *',
        name = 'x1',
      ),
      Param(
        type = 'double *',
        name = 'y1',
      ),
      Param(
        type = 'double *',
        name = 'x2',
      ),
      Param(
        type = 'double *',
        name = 'y2',
      ),
    ],
  ),
  'cairo_paint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_paint_with_alpha': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'alpha',
      ),
    ],
  ),
  'cairo_mask': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_mask_surface': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'double',
        name = 'surface_x',
      ),
      Param(
        type = 'double',
        name = 'surface_y',
      ),
    ],
  ),
  'cairo_stroke': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_stroke_preserve': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_fill': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_fill_preserve': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_copy_page': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_show_page': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_in_stroke': Spec(
    return_type = 'cairo_bool_t',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
    ],
  ),
  'cairo_in_fill': Spec(
    return_type = 'cairo_bool_t',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
    ],
  ),
  'cairo_in_clip': Spec(
    return_type = 'cairo_bool_t',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
    ],
  ),
  'cairo_stroke_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double *',
        name = 'x1',
      ),
      Param(
        type = 'double *',
        name = 'y1',
      ),
      Param(
        type = 'double *',
        name = 'x2',
      ),
      Param(
        type = 'double *',
        name = 'y2',
      ),
    ],
  ),
  'cairo_fill_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double *',
        name = 'x1',
      ),
      Param(
        type = 'double *',
        name = 'y1',
      ),
      Param(
        type = 'double *',
        name = 'x2',
      ),
      Param(
        type = 'double *',
        name = 'y2',
      ),
    ],
  ),
  'cairo_reset_clip': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_clip': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_clip_preserve': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_clip_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double *',
        name = 'x1',
      ),
      Param(
        type = 'double *',
        name = 'y1',
      ),
      Param(
        type = 'double *',
        name = 'x2',
      ),
      Param(
        type = 'double *',
        name = 'y2',
      ),
    ],
  ),
  'cairo_copy_clip_rectangle_list': Spec(
    return_type = 'cairo_rectangle_list_t *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_rectangle_list_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_rectangle_list_t *',
        name = 'rectangle_list',
      ),
    ],
  ),
  'cairo_glyph_allocate': Spec(
    return_type = 'cairo_glyph_t *',
    parameters = [
      Param(
        type = 'int',
        name = 'num_glyphs',
      ),
    ],
  ),
  'cairo_glyph_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_glyph_t *',
        name = 'glyphs',
      ),
    ],
  ),
  'cairo_text_cluster_allocate': Spec(
    return_type = 'cairo_text_cluster_t *',
    parameters = [
      Param(
        type = 'int',
        name = 'num_clusters',
      ),
    ],
  ),
  'cairo_text_cluster_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_text_cluster_t *',
        name = 'clusters',
      ),
    ],
  ),
  'cairo_font_options_create': Spec(
    return_type = 'cairo_font_options_t *',
    parameters = [
    ],
  ),
  'cairo_font_options_copy': Spec(
    return_type = 'cairo_font_options_t *',
    parameters = [
      Param(
        type = 'const cairo_font_options_t *',
        name = 'original',
      ),
    ],
  ),
  'cairo_font_options_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_font_options_status': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_font_options_merge': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_font_options_t *',
        name = 'options',
      ),
      Param(
        type = 'const cairo_font_options_t *',
        name = 'other',
      ),
    ],
  ),
  'cairo_font_options_equal': Spec(
    return_type = 'cairo_bool_t',
    parameters = [
      Param(
        type = 'const cairo_font_options_t *',
        name = 'options',
      ),
      Param(
        type = 'const cairo_font_options_t *',
        name = 'other',
      ),
    ],
  ),
  'cairo_font_options_hash': Spec(
    return_type = 'unsigned long',
    parameters = [
      Param(
        type = 'const cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_font_options_set_antialias': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_font_options_t *',
        name = 'options',
      ),
      Param(
        type = 'cairo_antialias_t',
        name = 'antialias',
      ),
    ],
  ),
  'cairo_font_options_get_antialias': Spec(
    return_type = 'cairo_antialias_t',
    parameters = [
      Param(
        type = 'const cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_font_options_set_subpixel_order': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_font_options_t *',
        name = 'options',
      ),
      Param(
        type = 'cairo_subpixel_order_t',
        name = 'subpixel_order',
      ),
    ],
  ),
  'cairo_font_options_get_subpixel_order': Spec(
    return_type = 'cairo_subpixel_order_t',
    parameters = [
      Param(
        type = 'const cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_font_options_set_hint_style': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_font_options_t *',
        name = 'options',
      ),
      Param(
        type = 'cairo_hint_style_t',
        name = 'hint_style',
      ),
    ],
  ),
  'cairo_font_options_get_hint_style': Spec(
    return_type = 'cairo_hint_style_t',
    parameters = [
      Param(
        type = 'const cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_font_options_set_hint_metrics': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_font_options_t *',
        name = 'options',
      ),
      Param(
        type = 'cairo_hint_metrics_t',
        name = 'hint_metrics',
      ),
    ],
  ),
  'cairo_font_options_get_hint_metrics': Spec(
    return_type = 'cairo_hint_metrics_t',
    parameters = [
      Param(
        type = 'const cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_select_font_face': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const char *',
        name = 'family',
      ),
      Param(
        type = 'cairo_font_slant_t',
        name = 'slant',
      ),
      Param(
        type = 'cairo_font_weight_t',
        name = 'weight',
      ),
    ],
  ),
  'cairo_set_font_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'size',
      ),
    ],
  ),
  'cairo_set_font_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const cairo_matrix_t *',
        name = 'matrix',
      ),
    ],
  ),
  'cairo_get_font_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
    ],
  ),
  'cairo_set_font_options': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_get_font_options': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_set_font_face': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_get_font_face': Spec(
    return_type = 'cairo_font_face_t *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_set_scaled_font': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
    ],
  ),
  'cairo_get_scaled_font': Spec(
    return_type = 'cairo_scaled_font_t *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_show_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const char *',
        name = 'utf8',
      ),
    ],
  ),
  'cairo_show_glyphs': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const cairo_glyph_t *',
        name = 'glyphs',
      ),
      Param(
        type = 'int',
        name = 'num_glyphs',
      ),
    ],
  ),
  'cairo_show_text_glyphs': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const char *',
        name = 'utf8',
      ),
      Param(
        type = 'int',
        name = 'utf8_len',
      ),
      Param(
        type = 'const cairo_glyph_t *',
        name = 'glyphs',
      ),
      Param(
        type = 'int',
        name = 'num_glyphs',
      ),
      Param(
        type = 'const cairo_text_cluster_t *',
        name = 'clusters',
      ),
      Param(
        type = 'int',
        name = 'num_clusters',
      ),
      Param(
        type = 'cairo_text_cluster_flags_t',
        name = 'cluster_flags',
      ),
    ],
  ),
  'cairo_text_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const char *',
        name = 'utf8',
      ),
    ],
  ),
  'cairo_glyph_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const cairo_glyph_t *',
        name = 'glyphs',
      ),
      Param(
        type = 'int',
        name = 'num_glyphs',
      ),
    ],
  ),
  'cairo_text_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const char *',
        name = 'utf8',
      ),
      Param(
        type = 'cairo_text_extents_t *',
        name = 'extents',
      ),
    ],
  ),
  'cairo_glyph_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const cairo_glyph_t *',
        name = 'glyphs',
      ),
      Param(
        type = 'int',
        name = 'num_glyphs',
      ),
      Param(
        type = 'cairo_text_extents_t *',
        name = 'extents',
      ),
    ],
  ),
  'cairo_font_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_font_extents_t *',
        name = 'extents',
      ),
    ],
  ),
  'cairo_font_face_reference': Spec(
    return_type = 'cairo_font_face_t *',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_font_face_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_font_face_get_reference_count': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_font_face_status': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_font_face_get_type': Spec(
    return_type = 'cairo_font_type_t',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_font_face_get_user_data': Spec(
    return_type = 'void *',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
    ],
  ),
  'cairo_font_face_set_user_data': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
      Param(
        type = 'void *',
        name = 'user_data',
      ),
      Param(
        type = 'cairo_destroy_func_t',
        name = 'destroy',
      ),
    ],
  ),
  'cairo_scaled_font_create': Spec(
    return_type = 'cairo_scaled_font_t *',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
      Param(
        type = 'const cairo_matrix_t *',
        name = 'font_matrix',
      ),
      Param(
        type = 'const cairo_matrix_t *',
        name = 'ctm',
      ),
      Param(
        type = 'const cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_scaled_font_reference': Spec(
    return_type = 'cairo_scaled_font_t *',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
    ],
  ),
  'cairo_scaled_font_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
    ],
  ),
  'cairo_scaled_font_get_reference_count': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
    ],
  ),
  'cairo_scaled_font_status': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
    ],
  ),
  'cairo_scaled_font_get_type': Spec(
    return_type = 'cairo_font_type_t',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
    ],
  ),
  'cairo_scaled_font_get_user_data': Spec(
    return_type = 'void *',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
    ],
  ),
  'cairo_scaled_font_set_user_data': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
      Param(
        type = 'void *',
        name = 'user_data',
      ),
      Param(
        type = 'cairo_destroy_func_t',
        name = 'destroy',
      ),
    ],
  ),
  'cairo_scaled_font_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
      Param(
        type = 'cairo_font_extents_t *',
        name = 'extents',
      ),
    ],
  ),
  'cairo_scaled_font_text_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
      Param(
        type = 'const char *',
        name = 'utf8',
      ),
      Param(
        type = 'cairo_text_extents_t *',
        name = 'extents',
      ),
    ],
  ),
  'cairo_scaled_font_glyph_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
      Param(
        type = 'const cairo_glyph_t *',
        name = 'glyphs',
      ),
      Param(
        type = 'int',
        name = 'num_glyphs',
      ),
      Param(
        type = 'cairo_text_extents_t *',
        name = 'extents',
      ),
    ],
  ),
  'cairo_scaled_font_text_to_glyphs': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
      Param(
        type = 'const char *',
        name = 'utf8',
      ),
      Param(
        type = 'int',
        name = 'utf8_len',
      ),
      Param(
        type = 'cairo_glyph_t **',
        name = 'glyphs',
      ),
      Param(
        type = 'int *',
        name = 'num_glyphs',
      ),
      Param(
        type = 'cairo_text_cluster_t **',
        name = 'clusters',
      ),
      Param(
        type = 'int *',
        name = 'num_clusters',
      ),
      Param(
        type = 'cairo_text_cluster_flags_t *',
        name = 'cluster_flags',
      ),
    ],
  ),
  'cairo_scaled_font_get_font_face': Spec(
    return_type = 'cairo_font_face_t *',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
    ],
  ),
  'cairo_scaled_font_get_font_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
      Param(
        type = 'cairo_matrix_t *',
        name = 'font_matrix',
      ),
    ],
  ),
  'cairo_scaled_font_get_ctm': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
      Param(
        type = 'cairo_matrix_t *',
        name = 'ctm',
      ),
    ],
  ),
  'cairo_scaled_font_get_scale_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
      Param(
        type = 'cairo_matrix_t *',
        name = 'scale_matrix',
      ),
    ],
  ),
  'cairo_scaled_font_get_font_options': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
      Param(
        type = 'cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_toy_font_face_create': Spec(
    return_type = 'cairo_font_face_t *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'family',
      ),
      Param(
        type = 'cairo_font_slant_t',
        name = 'slant',
      ),
      Param(
        type = 'cairo_font_weight_t',
        name = 'weight',
      ),
    ],
  ),
  'cairo_toy_font_face_get_family': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_toy_font_face_get_slant': Spec(
    return_type = 'cairo_font_slant_t',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_toy_font_face_get_weight': Spec(
    return_type = 'cairo_font_weight_t',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_user_font_face_create': Spec(
    return_type = 'cairo_font_face_t *',
    parameters = [
    ],
  ),
  'cairo_user_font_face_set_init_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
      Param(
        type = 'cairo_user_scaled_font_init_func_t',
        name = 'init_func',
      ),
    ],
  ),
  'cairo_user_font_face_set_render_glyph_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
      Param(
        type = 'cairo_user_scaled_font_render_glyph_func_t',
        name = 'render_glyph_func',
      ),
    ],
  ),
  'cairo_user_font_face_set_text_to_glyphs_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
      Param(
        type = 'cairo_user_scaled_font_text_to_glyphs_func_t',
        name = 'text_to_glyphs_func',
      ),
    ],
  ),
  'cairo_user_font_face_set_unicode_to_glyph_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
      Param(
        type = 'cairo_user_scaled_font_unicode_to_glyph_func_t',
        name = 'unicode_to_glyph_func',
      ),
    ],
  ),
  'cairo_user_font_face_get_init_func': Spec(
    return_type = 'cairo_user_scaled_font_init_func_t',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_user_font_face_get_render_glyph_func': Spec(
    return_type = 'cairo_user_scaled_font_render_glyph_func_t',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_user_font_face_get_text_to_glyphs_func': Spec(
    return_type = 'cairo_user_scaled_font_text_to_glyphs_func_t',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_user_font_face_get_unicode_to_glyph_func': Spec(
    return_type = 'cairo_user_scaled_font_unicode_to_glyph_func_t',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_get_operator': Spec(
    return_type = 'cairo_operator_t',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_source': Spec(
    return_type = 'cairo_pattern_t *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_tolerance': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_antialias': Spec(
    return_type = 'cairo_antialias_t',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_has_current_point': Spec(
    return_type = 'cairo_bool_t',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_current_point': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double *',
        name = 'x',
      ),
      Param(
        type = 'double *',
        name = 'y',
      ),
    ],
  ),
  'cairo_get_fill_rule': Spec(
    return_type = 'cairo_fill_rule_t',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_line_width': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_line_cap': Spec(
    return_type = 'cairo_line_cap_t',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_line_join': Spec(
    return_type = 'cairo_line_join_t',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_miter_limit': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_dash_count': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_dash': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double *',
        name = 'dashes',
      ),
      Param(
        type = 'double *',
        name = 'offset',
      ),
    ],
  ),
  'cairo_get_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
    ],
  ),
  'cairo_get_target': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_group_target': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_copy_path': Spec(
    return_type = 'cairo_path_t *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_copy_path_flat': Spec(
    return_type = 'cairo_path_t *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_append_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const cairo_path_t *',
        name = 'path',
      ),
    ],
  ),
  'cairo_path_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_path_t *',
        name = 'path',
      ),
    ],
  ),
  'cairo_status': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_status_to_string': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'cairo_status_t',
        name = 'status',
      ),
    ],
  ),
  'cairo_device_reference': Spec(
    return_type = 'cairo_device_t *',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_get_type': Spec(
    return_type = 'cairo_device_type_t',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_status': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_acquire': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_release': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_flush': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_finish': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_get_reference_count': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_get_user_data': Spec(
    return_type = 'void *',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
    ],
  ),
  'cairo_device_set_user_data': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
      Param(
        type = 'void *',
        name = 'user_data',
      ),
      Param(
        type = 'cairo_destroy_func_t',
        name = 'destroy',
      ),
    ],
  ),
  'cairo_surface_create_similar': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'other',
      ),
      Param(
        type = 'cairo_content_t',
        name = 'content',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'cairo_surface_create_similar_image': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'other',
      ),
      Param(
        type = 'cairo_format_t',
        name = 'format',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'cairo_surface_map_to_image': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'const cairo_rectangle_int_t *',
        name = 'extents',
      ),
    ],
  ),
  'cairo_surface_unmap_image': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'cairo_surface_t *',
        name = 'image',
      ),
    ],
  ),
  'cairo_surface_create_for_rectangle': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'target',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
      Param(
        type = 'double',
        name = 'width',
      ),
      Param(
        type = 'double',
        name = 'height',
      ),
    ],
  ),
  'cairo_surface_create_observer': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'target',
      ),
      Param(
        type = 'cairo_surface_observer_mode_t',
        name = 'mode',
      ),
    ],
  ),
  'cairo_surface_observer_add_paint_callback': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'abstract_surface',
      ),
      Param(
        type = 'cairo_surface_observer_callback_t',
        name = 'func',
      ),
      Param(
        type = 'void *',
        name = 'data',
      ),
    ],
  ),
  'cairo_surface_observer_add_mask_callback': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'abstract_surface',
      ),
      Param(
        type = 'cairo_surface_observer_callback_t',
        name = 'func',
      ),
      Param(
        type = 'void *',
        name = 'data',
      ),
    ],
  ),
  'cairo_surface_observer_add_fill_callback': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'abstract_surface',
      ),
      Param(
        type = 'cairo_surface_observer_callback_t',
        name = 'func',
      ),
      Param(
        type = 'void *',
        name = 'data',
      ),
    ],
  ),
  'cairo_surface_observer_add_stroke_callback': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'abstract_surface',
      ),
      Param(
        type = 'cairo_surface_observer_callback_t',
        name = 'func',
      ),
      Param(
        type = 'void *',
        name = 'data',
      ),
    ],
  ),
  'cairo_surface_observer_add_glyphs_callback': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'abstract_surface',
      ),
      Param(
        type = 'cairo_surface_observer_callback_t',
        name = 'func',
      ),
      Param(
        type = 'void *',
        name = 'data',
      ),
    ],
  ),
  'cairo_surface_observer_add_flush_callback': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'abstract_surface',
      ),
      Param(
        type = 'cairo_surface_observer_callback_t',
        name = 'func',
      ),
      Param(
        type = 'void *',
        name = 'data',
      ),
    ],
  ),
  'cairo_surface_observer_add_finish_callback': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'abstract_surface',
      ),
      Param(
        type = 'cairo_surface_observer_callback_t',
        name = 'func',
      ),
      Param(
        type = 'void *',
        name = 'data',
      ),
    ],
  ),
  'cairo_surface_observer_print': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'cairo_write_func_t',
        name = 'write_func',
      ),
      Param(
        type = 'void *',
        name = 'closure',
      ),
    ],
  ),
  'cairo_surface_observer_elapsed': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_device_observer_print': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
      Param(
        type = 'cairo_write_func_t',
        name = 'write_func',
      ),
      Param(
        type = 'void *',
        name = 'closure',
      ),
    ],
  ),
  'cairo_device_observer_elapsed': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_observer_paint_elapsed': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_observer_mask_elapsed': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_observer_fill_elapsed': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_observer_stroke_elapsed': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_observer_glyphs_elapsed': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_surface_reference': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_finish': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_get_device': Spec(
    return_type = 'cairo_device_t *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_get_reference_count': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_status': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_get_type': Spec(
    return_type = 'cairo_surface_type_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_get_content': Spec(
    return_type = 'cairo_content_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_write_to_png': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'const char *',
        name = 'filename',
      ),
    ],
  ),
  'cairo_surface_write_to_png_stream': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'cairo_write_func_t',
        name = 'write_func',
      ),
      Param(
        type = 'void *',
        name = 'closure',
      ),
    ],
  ),
  'cairo_surface_get_user_data': Spec(
    return_type = 'void *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
    ],
  ),
  'cairo_surface_set_user_data': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
      Param(
        type = 'void *',
        name = 'user_data',
      ),
      Param(
        type = 'cairo_destroy_func_t',
        name = 'destroy',
      ),
    ],
  ),
  'cairo_surface_get_mime_data': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'const char *',
        name = 'mime_type',
      ),
      Param(
        type = 'const unsigned char **',
        name = 'data',
      ),
      Param(
        type = 'unsigned long *',
        name = 'length',
      ),
    ],
  ),
  'cairo_surface_set_mime_data': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'const char *',
        name = 'mime_type',
      ),
      Param(
        type = 'const unsigned char *',
        name = 'data',
      ),
      Param(
        type = 'unsigned long',
        name = 'length',
      ),
      Param(
        type = 'cairo_destroy_func_t',
        name = 'destroy',
      ),
      Param(
        type = 'void *',
        name = 'closure',
      ),
    ],
  ),
  'cairo_surface_supports_mime_type': Spec(
    return_type = 'cairo_bool_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'const char *',
        name = 'mime_type',
      ),
    ],
  ),
  'cairo_surface_get_font_options': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_surface_flush': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_mark_dirty': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_mark_dirty_rectangle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'int',
        name = 'x',
      ),
      Param(
        type = 'int',
        name = 'y',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'cairo_surface_set_device_offset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'double',
        name = 'x_offset',
      ),
      Param(
        type = 'double',
        name = 'y_offset',
      ),
    ],
  ),
  'cairo_surface_get_device_offset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'double *',
        name = 'x_offset',
      ),
      Param(
        type = 'double *',
        name = 'y_offset',
      ),
    ],
  ),
  'cairo_surface_set_fallback_resolution': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'double',
        name = 'x_pixels_per_inch',
      ),
      Param(
        type = 'double',
        name = 'y_pixels_per_inch',
      ),
    ],
  ),
  'cairo_surface_get_fallback_resolution': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'double *',
        name = 'x_pixels_per_inch',
      ),
      Param(
        type = 'double *',
        name = 'y_pixels_per_inch',
      ),
    ],
  ),
  'cairo_surface_copy_page': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_show_page': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_has_show_text_glyphs': Spec(
    return_type = 'cairo_bool_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_image_surface_create': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'cairo_format_t',
        name = 'format',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'cairo_format_stride_for_width': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'cairo_format_t',
        name = 'format',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
    ],
  ),
  'cairo_image_surface_create_for_data': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'unsigned char *',
        name = 'data',
      ),
      Param(
        type = 'cairo_format_t',
        name = 'format',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
      Param(
        type = 'int',
        name = 'stride',
      ),
    ],
  ),
  'cairo_image_surface_get_data': Spec(
    return_type = 'unsigned char *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_image_surface_get_format': Spec(
    return_type = 'cairo_format_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_image_surface_get_width': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_image_surface_get_height': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_image_surface_get_stride': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_image_surface_create_from_png': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'filename',
      ),
    ],
  ),
  'cairo_image_surface_create_from_png_stream': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'cairo_read_func_t',
        name = 'read_func',
      ),
      Param(
        type = 'void *',
        name = 'closure',
      ),
    ],
  ),
  'cairo_recording_surface_create': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'cairo_content_t',
        name = 'content',
      ),
      Param(
        type = 'const cairo_rectangle_t *',
        name = 'extents',
      ),
    ],
  ),
  'cairo_recording_surface_ink_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'double *',
        name = 'x0',
      ),
      Param(
        type = 'double *',
        name = 'y0',
      ),
      Param(
        type = 'double *',
        name = 'width',
      ),
      Param(
        type = 'double *',
        name = 'height',
      ),
    ],
  ),
  'cairo_recording_surface_get_extents': Spec(
    return_type = 'cairo_bool_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'cairo_rectangle_t *',
        name = 'extents',
      ),
    ],
  ),
  'cairo_pattern_create_raster_source': Spec(
    return_type = 'cairo_pattern_t *',
    parameters = [
      Param(
        type = 'void *',
        name = 'user_data',
      ),
      Param(
        type = 'cairo_content_t',
        name = 'content',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'cairo_raster_source_pattern_set_callback_data': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'void *',
        name = 'data',
      ),
    ],
  ),
  'cairo_raster_source_pattern_get_callback_data': Spec(
    return_type = 'void *',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_raster_source_pattern_set_acquire': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'cairo_raster_source_acquire_func_t',
        name = 'acquire',
      ),
      Param(
        type = 'cairo_raster_source_release_func_t',
        name = 'release',
      ),
    ],
  ),
  'cairo_raster_source_pattern_get_acquire': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'cairo_raster_source_acquire_func_t *',
        name = 'acquire',
      ),
      Param(
        type = 'cairo_raster_source_release_func_t *',
        name = 'release',
      ),
    ],
  ),
  'cairo_raster_source_pattern_set_snapshot': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'cairo_raster_source_snapshot_func_t',
        name = 'snapshot',
      ),
    ],
  ),
  'cairo_raster_source_pattern_get_snapshot': Spec(
    return_type = 'cairo_raster_source_snapshot_func_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_raster_source_pattern_set_copy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'cairo_raster_source_copy_func_t',
        name = 'copy',
      ),
    ],
  ),
  'cairo_raster_source_pattern_get_copy': Spec(
    return_type = 'cairo_raster_source_copy_func_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_raster_source_pattern_set_finish': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'cairo_raster_source_finish_func_t',
        name = 'finish',
      ),
    ],
  ),
  'cairo_raster_source_pattern_get_finish': Spec(
    return_type = 'cairo_raster_source_finish_func_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_pattern_create_rgb': Spec(
    return_type = 'cairo_pattern_t *',
    parameters = [
      Param(
        type = 'double',
        name = 'red',
      ),
      Param(
        type = 'double',
        name = 'green',
      ),
      Param(
        type = 'double',
        name = 'blue',
      ),
    ],
  ),
  'cairo_pattern_create_rgba': Spec(
    return_type = 'cairo_pattern_t *',
    parameters = [
      Param(
        type = 'double',
        name = 'red',
      ),
      Param(
        type = 'double',
        name = 'green',
      ),
      Param(
        type = 'double',
        name = 'blue',
      ),
      Param(
        type = 'double',
        name = 'alpha',
      ),
    ],
  ),
  'cairo_pattern_create_for_surface': Spec(
    return_type = 'cairo_pattern_t *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_pattern_create_linear': Spec(
    return_type = 'cairo_pattern_t *',
    parameters = [
      Param(
        type = 'double',
        name = 'x0',
      ),
      Param(
        type = 'double',
        name = 'y0',
      ),
      Param(
        type = 'double',
        name = 'x1',
      ),
      Param(
        type = 'double',
        name = 'y1',
      ),
    ],
  ),
  'cairo_pattern_create_radial': Spec(
    return_type = 'cairo_pattern_t *',
    parameters = [
      Param(
        type = 'double',
        name = 'cx0',
      ),
      Param(
        type = 'double',
        name = 'cy0',
      ),
      Param(
        type = 'double',
        name = 'radius0',
      ),
      Param(
        type = 'double',
        name = 'cx1',
      ),
      Param(
        type = 'double',
        name = 'cy1',
      ),
      Param(
        type = 'double',
        name = 'radius1',
      ),
    ],
  ),
  'cairo_pattern_create_mesh': Spec(
    return_type = 'cairo_pattern_t *',
    parameters = [
    ],
  ),
  'cairo_pattern_reference': Spec(
    return_type = 'cairo_pattern_t *',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_pattern_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_pattern_get_reference_count': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_pattern_status': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_pattern_get_user_data': Spec(
    return_type = 'void *',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
    ],
  ),
  'cairo_pattern_set_user_data': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
      Param(
        type = 'void *',
        name = 'user_data',
      ),
      Param(
        type = 'cairo_destroy_func_t',
        name = 'destroy',
      ),
    ],
  ),
  'cairo_pattern_get_type': Spec(
    return_type = 'cairo_pattern_type_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_pattern_add_color_stop_rgb': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'double',
        name = 'offset',
      ),
      Param(
        type = 'double',
        name = 'red',
      ),
      Param(
        type = 'double',
        name = 'green',
      ),
      Param(
        type = 'double',
        name = 'blue',
      ),
    ],
  ),
  'cairo_pattern_add_color_stop_rgba': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'double',
        name = 'offset',
      ),
      Param(
        type = 'double',
        name = 'red',
      ),
      Param(
        type = 'double',
        name = 'green',
      ),
      Param(
        type = 'double',
        name = 'blue',
      ),
      Param(
        type = 'double',
        name = 'alpha',
      ),
    ],
  ),
  'cairo_mesh_pattern_begin_patch': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_mesh_pattern_end_patch': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_mesh_pattern_curve_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'double',
        name = 'x1',
      ),
      Param(
        type = 'double',
        name = 'y1',
      ),
      Param(
        type = 'double',
        name = 'x2',
      ),
      Param(
        type = 'double',
        name = 'y2',
      ),
      Param(
        type = 'double',
        name = 'x3',
      ),
      Param(
        type = 'double',
        name = 'y3',
      ),
    ],
  ),
  'cairo_mesh_pattern_line_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
    ],
  ),
  'cairo_mesh_pattern_move_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
    ],
  ),
  'cairo_mesh_pattern_set_control_point': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'unsigned int',
        name = 'point_num',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
    ],
  ),
  'cairo_mesh_pattern_set_corner_color_rgb': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'unsigned int',
        name = 'corner_num',
      ),
      Param(
        type = 'double',
        name = 'red',
      ),
      Param(
        type = 'double',
        name = 'green',
      ),
      Param(
        type = 'double',
        name = 'blue',
      ),
    ],
  ),
  'cairo_mesh_pattern_set_corner_color_rgba': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'unsigned int',
        name = 'corner_num',
      ),
      Param(
        type = 'double',
        name = 'red',
      ),
      Param(
        type = 'double',
        name = 'green',
      ),
      Param(
        type = 'double',
        name = 'blue',
      ),
      Param(
        type = 'double',
        name = 'alpha',
      ),
    ],
  ),
  'cairo_pattern_set_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'const cairo_matrix_t *',
        name = 'matrix',
      ),
    ],
  ),
  'cairo_pattern_get_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
    ],
  ),
  'cairo_pattern_set_extend': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'cairo_extend_t',
        name = 'extend',
      ),
    ],
  ),
  'cairo_pattern_get_extend': Spec(
    return_type = 'cairo_extend_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_pattern_set_filter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'cairo_filter_t',
        name = 'filter',
      ),
    ],
  ),
  'cairo_pattern_get_filter': Spec(
    return_type = 'cairo_filter_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_pattern_get_rgba': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'double *',
        name = 'red',
      ),
      Param(
        type = 'double *',
        name = 'green',
      ),
      Param(
        type = 'double *',
        name = 'blue',
      ),
      Param(
        type = 'double *',
        name = 'alpha',
      ),
    ],
  ),
  'cairo_pattern_get_surface': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'cairo_surface_t **',
        name = 'surface',
      ),
    ],
  ),
  'cairo_pattern_get_color_stop_rgba': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'int',
        name = 'index',
      ),
      Param(
        type = 'double *',
        name = 'offset',
      ),
      Param(
        type = 'double *',
        name = 'red',
      ),
      Param(
        type = 'double *',
        name = 'green',
      ),
      Param(
        type = 'double *',
        name = 'blue',
      ),
      Param(
        type = 'double *',
        name = 'alpha',
      ),
    ],
  ),
  'cairo_pattern_get_color_stop_count': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'int *',
        name = 'count',
      ),
    ],
  ),
  'cairo_pattern_get_linear_points': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'double *',
        name = 'x0',
      ),
      Param(
        type = 'double *',
        name = 'y0',
      ),
      Param(
        type = 'double *',
        name = 'x1',
      ),
      Param(
        type = 'double *',
        name = 'y1',
      ),
    ],
  ),
  'cairo_pattern_get_radial_circles': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'double *',
        name = 'x0',
      ),
      Param(
        type = 'double *',
        name = 'y0',
      ),
      Param(
        type = 'double *',
        name = 'r0',
      ),
      Param(
        type = 'double *',
        name = 'x1',
      ),
      Param(
        type = 'double *',
        name = 'y1',
      ),
      Param(
        type = 'double *',
        name = 'r1',
      ),
    ],
  ),
  'cairo_mesh_pattern_get_patch_count': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'unsigned int *',
        name = 'count',
      ),
    ],
  ),
  'cairo_mesh_pattern_get_path': Spec(
    return_type = 'cairo_path_t *',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'unsigned int',
        name = 'patch_num',
      ),
    ],
  ),
  'cairo_mesh_pattern_get_corner_color_rgba': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'unsigned int',
        name = 'patch_num',
      ),
      Param(
        type = 'unsigned int',
        name = 'corner_num',
      ),
      Param(
        type = 'double *',
        name = 'red',
      ),
      Param(
        type = 'double *',
        name = 'green',
      ),
      Param(
        type = 'double *',
        name = 'blue',
      ),
      Param(
        type = 'double *',
        name = 'alpha',
      ),
    ],
  ),
  'cairo_mesh_pattern_get_control_point': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'unsigned int',
        name = 'patch_num',
      ),
      Param(
        type = 'unsigned int',
        name = 'point_num',
      ),
      Param(
        type = 'double *',
        name = 'x',
      ),
      Param(
        type = 'double *',
        name = 'y',
      ),
    ],
  ),
  'cairo_matrix_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
      Param(
        type = 'double',
        name = 'xx',
      ),
      Param(
        type = 'double',
        name = 'yx',
      ),
      Param(
        type = 'double',
        name = 'xy',
      ),
      Param(
        type = 'double',
        name = 'yy',
      ),
      Param(
        type = 'double',
        name = 'x0',
      ),
      Param(
        type = 'double',
        name = 'y0',
      ),
    ],
  ),
  'cairo_matrix_init_identity': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
    ],
  ),
  'cairo_matrix_init_translate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
      Param(
        type = 'double',
        name = 'tx',
      ),
      Param(
        type = 'double',
        name = 'ty',
      ),
    ],
  ),
  'cairo_matrix_init_scale': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
      Param(
        type = 'double',
        name = 'sx',
      ),
      Param(
        type = 'double',
        name = 'sy',
      ),
    ],
  ),
  'cairo_matrix_init_rotate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
      Param(
        type = 'double',
        name = 'radians',
      ),
    ],
  ),
  'cairo_matrix_translate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
      Param(
        type = 'double',
        name = 'tx',
      ),
      Param(
        type = 'double',
        name = 'ty',
      ),
    ],
  ),
  'cairo_matrix_scale': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
      Param(
        type = 'double',
        name = 'sx',
      ),
      Param(
        type = 'double',
        name = 'sy',
      ),
    ],
  ),
  'cairo_matrix_rotate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
      Param(
        type = 'double',
        name = 'radians',
      ),
    ],
  ),
  'cairo_matrix_invert': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
    ],
  ),
  'cairo_matrix_multiply': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_matrix_t *',
        name = 'result',
      ),
      Param(
        type = 'const cairo_matrix_t *',
        name = 'a',
      ),
      Param(
        type = 'const cairo_matrix_t *',
        name = 'b',
      ),
    ],
  ),
  'cairo_matrix_transform_distance': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const cairo_matrix_t *',
        name = 'matrix',
      ),
      Param(
        type = 'double *',
        name = 'dx',
      ),
      Param(
        type = 'double *',
        name = 'dy',
      ),
    ],
  ),
  'cairo_matrix_transform_point': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const cairo_matrix_t *',
        name = 'matrix',
      ),
      Param(
        type = 'double *',
        name = 'x',
      ),
      Param(
        type = 'double *',
        name = 'y',
      ),
    ],
  ),
  'cairo_region_create': Spec(
    return_type = 'cairo_region_t *',
    parameters = [
    ],
  ),
  'cairo_region_create_rectangle': Spec(
    return_type = 'cairo_region_t *',
    parameters = [
      Param(
        type = 'const cairo_rectangle_int_t *',
        name = 'rectangle',
      ),
    ],
  ),
  'cairo_region_create_rectangles': Spec(
    return_type = 'cairo_region_t *',
    parameters = [
      Param(
        type = 'const cairo_rectangle_int_t *',
        name = 'rects',
      ),
      Param(
        type = 'int',
        name = 'count',
      ),
    ],
  ),
  'cairo_region_copy': Spec(
    return_type = 'cairo_region_t *',
    parameters = [
      Param(
        type = 'const cairo_region_t *',
        name = 'original',
      ),
    ],
  ),
  'cairo_region_reference': Spec(
    return_type = 'cairo_region_t *',
    parameters = [
      Param(
        type = 'cairo_region_t *',
        name = 'region',
      ),
    ],
  ),
  'cairo_region_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_region_t *',
        name = 'region',
      ),
    ],
  ),
  'cairo_region_equal': Spec(
    return_type = 'cairo_bool_t',
    parameters = [
      Param(
        type = 'const cairo_region_t *',
        name = 'a',
      ),
      Param(
        type = 'const cairo_region_t *',
        name = 'b',
      ),
    ],
  ),
  'cairo_region_status': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'const cairo_region_t *',
        name = 'region',
      ),
    ],
  ),
  'cairo_region_get_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const cairo_region_t *',
        name = 'region',
      ),
      Param(
        type = 'cairo_rectangle_int_t *',
        name = 'extents',
      ),
    ],
  ),
  'cairo_region_num_rectangles': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const cairo_region_t *',
        name = 'region',
      ),
    ],
  ),
  'cairo_region_get_rectangle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const cairo_region_t *',
        name = 'region',
      ),
      Param(
        type = 'int',
        name = 'nth',
      ),
      Param(
        type = 'cairo_rectangle_int_t *',
        name = 'rectangle',
      ),
    ],
  ),
  'cairo_region_is_empty': Spec(
    return_type = 'cairo_bool_t',
    parameters = [
      Param(
        type = 'const cairo_region_t *',
        name = 'region',
      ),
    ],
  ),
  'cairo_region_contains_rectangle': Spec(
    return_type = 'cairo_region_overlap_t',
    parameters = [
      Param(
        type = 'const cairo_region_t *',
        name = 'region',
      ),
      Param(
        type = 'const cairo_rectangle_int_t *',
        name = 'rectangle',
      ),
    ],
  ),
  'cairo_region_contains_point': Spec(
    return_type = 'cairo_bool_t',
    parameters = [
      Param(
        type = 'const cairo_region_t *',
        name = 'region',
      ),
      Param(
        type = 'int',
        name = 'x',
      ),
      Param(
        type = 'int',
        name = 'y',
      ),
    ],
  ),
  'cairo_region_translate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_region_t *',
        name = 'region',
      ),
      Param(
        type = 'int',
        name = 'dx',
      ),
      Param(
        type = 'int',
        name = 'dy',
      ),
    ],
  ),
  'cairo_region_subtract': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_region_t *',
        name = 'dst',
      ),
      Param(
        type = 'const cairo_region_t *',
        name = 'other',
      ),
    ],
  ),
  'cairo_region_subtract_rectangle': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_region_t *',
        name = 'dst',
      ),
      Param(
        type = 'const cairo_rectangle_int_t *',
        name = 'rectangle',
      ),
    ],
  ),
  'cairo_region_intersect': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_region_t *',
        name = 'dst',
      ),
      Param(
        type = 'const cairo_region_t *',
        name = 'other',
      ),
    ],
  ),
  'cairo_region_intersect_rectangle': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_region_t *',
        name = 'dst',
      ),
      Param(
        type = 'const cairo_rectangle_int_t *',
        name = 'rectangle',
      ),
    ],
  ),
  'cairo_region_union': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_region_t *',
        name = 'dst',
      ),
      Param(
        type = 'const cairo_region_t *',
        name = 'other',
      ),
    ],
  ),
  'cairo_region_union_rectangle': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_region_t *',
        name = 'dst',
      ),
      Param(
        type = 'const cairo_rectangle_int_t *',
        name = 'rectangle',
      ),
    ],
  ),
  'cairo_region_xor': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_region_t *',
        name = 'dst',
      ),
      Param(
        type = 'const cairo_region_t *',
        name = 'other',
      ),
    ],
  ),
  'cairo_region_xor_rectangle': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_region_t *',
        name = 'dst',
      ),
      Param(
        type = 'const cairo_rectangle_int_t *',
        name = 'rectangle',
      ),
    ],
  ),
  'cairo_debug_reset_static_data': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'glClearIndex': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 'c',
      ),
    ],
  ),
  'glClearColor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLclampf',
        name = 'red',
      ),
      Param(
        type = 'GLclampf',
        name = 'green',
      ),
      Param(
        type = 'GLclampf',
        name = 'blue',
      ),
      Param(
        type = 'GLclampf',
        name = 'alpha',
      ),
    ],
  ),
  'glClear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLbitfield',
        name = 'mask',
      ),
    ],
  ),
  'glIndexMask': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLuint',
        name = 'mask',
      ),
    ],
  ),
  'glColorMask': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLboolean',
        name = 'red',
      ),
      Param(
        type = 'GLboolean',
        name = 'green',
      ),
      Param(
        type = 'GLboolean',
        name = 'blue',
      ),
      Param(
        type = 'GLboolean',
        name = 'alpha',
      ),
    ],
  ),
  'glAlphaFunc': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'func',
      ),
      Param(
        type = 'GLclampf',
        name = 'ref',
      ),
    ],
  ),
  'glBlendFunc': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'sfactor',
      ),
      Param(
        type = 'GLenum',
        name = 'dfactor',
      ),
    ],
  ),
  'glLogicOp': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'opcode',
      ),
    ],
  ),
  'glCullFace': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'mode',
      ),
    ],
  ),
  'glFrontFace': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'mode',
      ),
    ],
  ),
  'glPointSize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 'size',
      ),
    ],
  ),
  'glLineWidth': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 'width',
      ),
    ],
  ),
  'glLineStipple': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'factor',
      ),
      Param(
        type = 'GLushort',
        name = 'pattern',
      ),
    ],
  ),
  'glPolygonMode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'face',
      ),
      Param(
        type = 'GLenum',
        name = 'mode',
      ),
    ],
  ),
  'glPolygonOffset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 'factor',
      ),
      Param(
        type = 'GLfloat',
        name = 'units',
      ),
    ],
  ),
  'glPolygonStipple': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLubyte *',
        name = 'mask',
      ),
    ],
  ),
  'glGetPolygonStipple': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLubyte *',
        name = 'mask',
      ),
    ],
  ),
  'glEdgeFlag': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLboolean',
        name = 'flag',
      ),
    ],
  ),
  'glEdgeFlagv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLboolean *',
        name = 'flag',
      ),
    ],
  ),
  'glScissor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'x',
      ),
      Param(
        type = 'GLint',
        name = 'y',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLsizei',
        name = 'height',
      ),
    ],
  ),
  'glClipPlane': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'plane',
      ),
      Param(
        type = 'const GLdouble *',
        name = 'equation',
      ),
    ],
  ),
  'glGetClipPlane': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'plane',
      ),
      Param(
        type = 'GLdouble *',
        name = 'equation',
      ),
    ],
  ),
  'glDrawBuffer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'mode',
      ),
    ],
  ),
  'glReadBuffer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'mode',
      ),
    ],
  ),
  'glEnable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'cap',
      ),
    ],
  ),
  'glDisable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'cap',
      ),
    ],
  ),
  'glIsEnabled': Spec(
    return_type = 'GLboolean',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'cap',
      ),
    ],
  ),
  'glEnableClientState': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'cap',
      ),
    ],
  ),
  'glDisableClientState': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'cap',
      ),
    ],
  ),
  'glGetBooleanv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLboolean *',
        name = 'params',
      ),
    ],
  ),
  'glGetDoublev': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLdouble *',
        name = 'params',
      ),
    ],
  ),
  'glGetFloatv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLfloat *',
        name = 'params',
      ),
    ],
  ),
  'glGetIntegerv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLint *',
        name = 'params',
      ),
    ],
  ),
  'glPushAttrib': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLbitfield',
        name = 'mask',
      ),
    ],
  ),
  'glPopAttrib': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'glPushClientAttrib': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLbitfield',
        name = 'mask',
      ),
    ],
  ),
  'glPopClientAttrib': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'glRenderMode': Spec(
    return_type = 'GLint',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'mode',
      ),
    ],
  ),
  'glGetError': Spec(
    return_type = 'GLenum',
    parameters = [
    ],
  ),
  'glGetString': Spec(
    return_type = 'const GLubyte *',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'name',
      ),
    ],
  ),
  'glFinish': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'glFlush': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'glHint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'mode',
      ),
    ],
  ),
  'glClearDepth': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLclampd',
        name = 'depth',
      ),
    ],
  ),
  'glDepthFunc': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'func',
      ),
    ],
  ),
  'glDepthMask': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLboolean',
        name = 'flag',
      ),
    ],
  ),
  'glDepthRange': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLclampd',
        name = 'near_val',
      ),
      Param(
        type = 'GLclampd',
        name = 'far_val',
      ),
    ],
  ),
  'glClearAccum': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 'red',
      ),
      Param(
        type = 'GLfloat',
        name = 'green',
      ),
      Param(
        type = 'GLfloat',
        name = 'blue',
      ),
      Param(
        type = 'GLfloat',
        name = 'alpha',
      ),
    ],
  ),
  'glAccum': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'op',
      ),
      Param(
        type = 'GLfloat',
        name = 'value',
      ),
    ],
  ),
  'glMatrixMode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'mode',
      ),
    ],
  ),
  'glOrtho': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLdouble',
        name = 'left',
      ),
      Param(
        type = 'GLdouble',
        name = 'right',
      ),
      Param(
        type = 'GLdouble',
        name = 'bottom',
      ),
      Param(
        type = 'GLdouble',
        name = 'top',
      ),
      Param(
        type = 'GLdouble',
        name = 'near_val',
      ),
      Param(
        type = 'GLdouble',
        name = 'far_val',
      ),
    ],
  ),
  'glFrustum': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLdouble',
        name = 'left',
      ),
      Param(
        type = 'GLdouble',
        name = 'right',
      ),
      Param(
        type = 'GLdouble',
        name = 'bottom',
      ),
      Param(
        type = 'GLdouble',
        name = 'top',
      ),
      Param(
        type = 'GLdouble',
        name = 'near_val',
      ),
      Param(
        type = 'GLdouble',
        name = 'far_val',
      ),
    ],
  ),
  'glViewport': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'x',
      ),
      Param(
        type = 'GLint',
        name = 'y',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLsizei',
        name = 'height',
      ),
    ],
  ),
  'glPushMatrix': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'glPopMatrix': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'glLoadIdentity': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'glLoadMatrixd': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLdouble *',
        name = 'm',
      ),
    ],
  ),
  'glLoadMatrixf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLfloat *',
        name = 'm',
      ),
    ],
  ),
  'glMultMatrixd': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLdouble *',
        name = 'm',
      ),
    ],
  ),
  'glMultMatrixf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLfloat *',
        name = 'm',
      ),
    ],
  ),
  'glRotated': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLdouble',
        name = 'angle',
      ),
      Param(
        type = 'GLdouble',
        name = 'x',
      ),
      Param(
        type = 'GLdouble',
        name = 'y',
      ),
      Param(
        type = 'GLdouble',
        name = 'z',
      ),
    ],
  ),
  'glRotatef': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 'angle',
      ),
      Param(
        type = 'GLfloat',
        name = 'x',
      ),
      Param(
        type = 'GLfloat',
        name = 'y',
      ),
      Param(
        type = 'GLfloat',
        name = 'z',
      ),
    ],
  ),
  'glScaled': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLdouble',
        name = 'x',
      ),
      Param(
        type = 'GLdouble',
        name = 'y',
      ),
      Param(
        type = 'GLdouble',
        name = 'z',
      ),
    ],
  ),
  'glScalef': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 'x',
      ),
      Param(
        type = 'GLfloat',
        name = 'y',
      ),
      Param(
        type = 'GLfloat',
        name = 'z',
      ),
    ],
  ),
  'glTranslated': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLdouble',
        name = 'x',
      ),
      Param(
        type = 'GLdouble',
        name = 'y',
      ),
      Param(
        type = 'GLdouble',
        name = 'z',
      ),
    ],
  ),
  'glTranslatef': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 'x',
      ),
      Param(
        type = 'GLfloat',
        name = 'y',
      ),
      Param(
        type = 'GLfloat',
        name = 'z',
      ),
    ],
  ),
  'glIsList': Spec(
    return_type = 'GLboolean',
    parameters = [
      Param(
        type = 'GLuint',
        name = 'list',
      ),
    ],
  ),
  'glDeleteLists': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLuint',
        name = 'list',
      ),
      Param(
        type = 'GLsizei',
        name = 'range',
      ),
    ],
  ),
  'glGenLists': Spec(
    return_type = 'GLuint',
    parameters = [
      Param(
        type = 'GLsizei',
        name = 'range',
      ),
    ],
  ),
  'glNewList': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLuint',
        name = 'list',
      ),
      Param(
        type = 'GLenum',
        name = 'mode',
      ),
    ],
  ),
  'glEndList': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'glCallList': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLuint',
        name = 'list',
      ),
    ],
  ),
  'glCallLists': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLsizei',
        name = 'n',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'lists',
      ),
    ],
  ),
  'glListBase': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLuint',
        name = 'base',
      ),
    ],
  ),
  'glBegin': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'mode',
      ),
    ],
  ),
  'glEnd': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'glVertex2d': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLdouble',
        name = 'x',
      ),
      Param(
        type = 'GLdouble',
        name = 'y',
      ),
    ],
  ),
  'glVertex2f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 'x',
      ),
      Param(
        type = 'GLfloat',
        name = 'y',
      ),
    ],
  ),
  'glVertex2i': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'x',
      ),
      Param(
        type = 'GLint',
        name = 'y',
      ),
    ],
  ),
  'glVertex2s': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLshort',
        name = 'x',
      ),
      Param(
        type = 'GLshort',
        name = 'y',
      ),
    ],
  ),
  'glVertex3d': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLdouble',
        name = 'x',
      ),
      Param(
        type = 'GLdouble',
        name = 'y',
      ),
      Param(
        type = 'GLdouble',
        name = 'z',
      ),
    ],
  ),
  'glVertex3f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 'x',
      ),
      Param(
        type = 'GLfloat',
        name = 'y',
      ),
      Param(
        type = 'GLfloat',
        name = 'z',
      ),
    ],
  ),
  'glVertex3i': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'x',
      ),
      Param(
        type = 'GLint',
        name = 'y',
      ),
      Param(
        type = 'GLint',
        name = 'z',
      ),
    ],
  ),
  'glVertex3s': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLshort',
        name = 'x',
      ),
      Param(
        type = 'GLshort',
        name = 'y',
      ),
      Param(
        type = 'GLshort',
        name = 'z',
      ),
    ],
  ),
  'glVertex4d': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLdouble',
        name = 'x',
      ),
      Param(
        type = 'GLdouble',
        name = 'y',
      ),
      Param(
        type = 'GLdouble',
        name = 'z',
      ),
      Param(
        type = 'GLdouble',
        name = 'w',
      ),
    ],
  ),
  'glVertex4f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 'x',
      ),
      Param(
        type = 'GLfloat',
        name = 'y',
      ),
      Param(
        type = 'GLfloat',
        name = 'z',
      ),
      Param(
        type = 'GLfloat',
        name = 'w',
      ),
    ],
  ),
  'glVertex4i': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'x',
      ),
      Param(
        type = 'GLint',
        name = 'y',
      ),
      Param(
        type = 'GLint',
        name = 'z',
      ),
      Param(
        type = 'GLint',
        name = 'w',
      ),
    ],
  ),
  'glVertex4s': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLshort',
        name = 'x',
      ),
      Param(
        type = 'GLshort',
        name = 'y',
      ),
      Param(
        type = 'GLshort',
        name = 'z',
      ),
      Param(
        type = 'GLshort',
        name = 'w',
      ),
    ],
  ),
  'glVertex2dv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLdouble *',
        name = 'v',
      ),
    ],
  ),
  'glVertex2fv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLfloat *',
        name = 'v',
      ),
    ],
  ),
  'glVertex2iv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLint *',
        name = 'v',
      ),
    ],
  ),
  'glVertex2sv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLshort *',
        name = 'v',
      ),
    ],
  ),
  'glVertex3dv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLdouble *',
        name = 'v',
      ),
    ],
  ),
  'glVertex3fv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLfloat *',
        name = 'v',
      ),
    ],
  ),
  'glVertex3iv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLint *',
        name = 'v',
      ),
    ],
  ),
  'glVertex3sv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLshort *',
        name = 'v',
      ),
    ],
  ),
  'glVertex4dv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLdouble *',
        name = 'v',
      ),
    ],
  ),
  'glVertex4fv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLfloat *',
        name = 'v',
      ),
    ],
  ),
  'glVertex4iv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLint *',
        name = 'v',
      ),
    ],
  ),
  'glVertex4sv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLshort *',
        name = 'v',
      ),
    ],
  ),
  'glNormal3b': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLbyte',
        name = 'nx',
      ),
      Param(
        type = 'GLbyte',
        name = 'ny',
      ),
      Param(
        type = 'GLbyte',
        name = 'nz',
      ),
    ],
  ),
  'glNormal3d': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLdouble',
        name = 'nx',
      ),
      Param(
        type = 'GLdouble',
        name = 'ny',
      ),
      Param(
        type = 'GLdouble',
        name = 'nz',
      ),
    ],
  ),
  'glNormal3f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 'nx',
      ),
      Param(
        type = 'GLfloat',
        name = 'ny',
      ),
      Param(
        type = 'GLfloat',
        name = 'nz',
      ),
    ],
  ),
  'glNormal3i': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'nx',
      ),
      Param(
        type = 'GLint',
        name = 'ny',
      ),
      Param(
        type = 'GLint',
        name = 'nz',
      ),
    ],
  ),
  'glNormal3s': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLshort',
        name = 'nx',
      ),
      Param(
        type = 'GLshort',
        name = 'ny',
      ),
      Param(
        type = 'GLshort',
        name = 'nz',
      ),
    ],
  ),
  'glNormal3bv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLbyte *',
        name = 'v',
      ),
    ],
  ),
  'glNormal3dv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLdouble *',
        name = 'v',
      ),
    ],
  ),
  'glNormal3fv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLfloat *',
        name = 'v',
      ),
    ],
  ),
  'glNormal3iv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLint *',
        name = 'v',
      ),
    ],
  ),
  'glNormal3sv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLshort *',
        name = 'v',
      ),
    ],
  ),
  'glIndexd': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLdouble',
        name = 'c',
      ),
    ],
  ),
  'glIndexf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 'c',
      ),
    ],
  ),
  'glIndexi': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'c',
      ),
    ],
  ),
  'glIndexs': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLshort',
        name = 'c',
      ),
    ],
  ),
  'glIndexub': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLubyte',
        name = 'c',
      ),
    ],
  ),
  'glIndexdv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLdouble *',
        name = 'c',
      ),
    ],
  ),
  'glIndexfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLfloat *',
        name = 'c',
      ),
    ],
  ),
  'glIndexiv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLint *',
        name = 'c',
      ),
    ],
  ),
  'glIndexsv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLshort *',
        name = 'c',
      ),
    ],
  ),
  'glIndexubv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLubyte *',
        name = 'c',
      ),
    ],
  ),
  'glColor3b': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLbyte',
        name = 'red',
      ),
      Param(
        type = 'GLbyte',
        name = 'green',
      ),
      Param(
        type = 'GLbyte',
        name = 'blue',
      ),
    ],
  ),
  'glColor3d': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLdouble',
        name = 'red',
      ),
      Param(
        type = 'GLdouble',
        name = 'green',
      ),
      Param(
        type = 'GLdouble',
        name = 'blue',
      ),
    ],
  ),
  'glColor3f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 'red',
      ),
      Param(
        type = 'GLfloat',
        name = 'green',
      ),
      Param(
        type = 'GLfloat',
        name = 'blue',
      ),
    ],
  ),
  'glColor3i': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'red',
      ),
      Param(
        type = 'GLint',
        name = 'green',
      ),
      Param(
        type = 'GLint',
        name = 'blue',
      ),
    ],
  ),
  'glColor3s': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLshort',
        name = 'red',
      ),
      Param(
        type = 'GLshort',
        name = 'green',
      ),
      Param(
        type = 'GLshort',
        name = 'blue',
      ),
    ],
  ),
  'glColor3ub': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLubyte',
        name = 'red',
      ),
      Param(
        type = 'GLubyte',
        name = 'green',
      ),
      Param(
        type = 'GLubyte',
        name = 'blue',
      ),
    ],
  ),
  'glColor3ui': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLuint',
        name = 'red',
      ),
      Param(
        type = 'GLuint',
        name = 'green',
      ),
      Param(
        type = 'GLuint',
        name = 'blue',
      ),
    ],
  ),
  'glColor3us': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLushort',
        name = 'red',
      ),
      Param(
        type = 'GLushort',
        name = 'green',
      ),
      Param(
        type = 'GLushort',
        name = 'blue',
      ),
    ],
  ),
  'glColor4b': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLbyte',
        name = 'red',
      ),
      Param(
        type = 'GLbyte',
        name = 'green',
      ),
      Param(
        type = 'GLbyte',
        name = 'blue',
      ),
      Param(
        type = 'GLbyte',
        name = 'alpha',
      ),
    ],
  ),
  'glColor4d': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLdouble',
        name = 'red',
      ),
      Param(
        type = 'GLdouble',
        name = 'green',
      ),
      Param(
        type = 'GLdouble',
        name = 'blue',
      ),
      Param(
        type = 'GLdouble',
        name = 'alpha',
      ),
    ],
  ),
  'glColor4f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 'red',
      ),
      Param(
        type = 'GLfloat',
        name = 'green',
      ),
      Param(
        type = 'GLfloat',
        name = 'blue',
      ),
      Param(
        type = 'GLfloat',
        name = 'alpha',
      ),
    ],
  ),
  'glColor4i': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'red',
      ),
      Param(
        type = 'GLint',
        name = 'green',
      ),
      Param(
        type = 'GLint',
        name = 'blue',
      ),
      Param(
        type = 'GLint',
        name = 'alpha',
      ),
    ],
  ),
  'glColor4s': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLshort',
        name = 'red',
      ),
      Param(
        type = 'GLshort',
        name = 'green',
      ),
      Param(
        type = 'GLshort',
        name = 'blue',
      ),
      Param(
        type = 'GLshort',
        name = 'alpha',
      ),
    ],
  ),
  'glColor4ub': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLubyte',
        name = 'red',
      ),
      Param(
        type = 'GLubyte',
        name = 'green',
      ),
      Param(
        type = 'GLubyte',
        name = 'blue',
      ),
      Param(
        type = 'GLubyte',
        name = 'alpha',
      ),
    ],
  ),
  'glColor4ui': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLuint',
        name = 'red',
      ),
      Param(
        type = 'GLuint',
        name = 'green',
      ),
      Param(
        type = 'GLuint',
        name = 'blue',
      ),
      Param(
        type = 'GLuint',
        name = 'alpha',
      ),
    ],
  ),
  'glColor4us': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLushort',
        name = 'red',
      ),
      Param(
        type = 'GLushort',
        name = 'green',
      ),
      Param(
        type = 'GLushort',
        name = 'blue',
      ),
      Param(
        type = 'GLushort',
        name = 'alpha',
      ),
    ],
  ),
  'glColor3bv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLbyte *',
        name = 'v',
      ),
    ],
  ),
  'glColor3dv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLdouble *',
        name = 'v',
      ),
    ],
  ),
  'glColor3fv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLfloat *',
        name = 'v',
      ),
    ],
  ),
  'glColor3iv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLint *',
        name = 'v',
      ),
    ],
  ),
  'glColor3sv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLshort *',
        name = 'v',
      ),
    ],
  ),
  'glColor3ubv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLubyte *',
        name = 'v',
      ),
    ],
  ),
  'glColor3uiv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLuint *',
        name = 'v',
      ),
    ],
  ),
  'glColor3usv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLushort *',
        name = 'v',
      ),
    ],
  ),
  'glColor4bv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLbyte *',
        name = 'v',
      ),
    ],
  ),
  'glColor4dv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLdouble *',
        name = 'v',
      ),
    ],
  ),
  'glColor4fv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLfloat *',
        name = 'v',
      ),
    ],
  ),
  'glColor4iv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLint *',
        name = 'v',
      ),
    ],
  ),
  'glColor4sv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLshort *',
        name = 'v',
      ),
    ],
  ),
  'glColor4ubv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLubyte *',
        name = 'v',
      ),
    ],
  ),
  'glColor4uiv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLuint *',
        name = 'v',
      ),
    ],
  ),
  'glColor4usv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLushort *',
        name = 'v',
      ),
    ],
  ),
  'glTexCoord1d': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLdouble',
        name = 's',
      ),
    ],
  ),
  'glTexCoord1f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 's',
      ),
    ],
  ),
  'glTexCoord1i': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 's',
      ),
    ],
  ),
  'glTexCoord1s': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLshort',
        name = 's',
      ),
    ],
  ),
  'glTexCoord2d': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLdouble',
        name = 's',
      ),
      Param(
        type = 'GLdouble',
        name = 't',
      ),
    ],
  ),
  'glTexCoord2f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 's',
      ),
      Param(
        type = 'GLfloat',
        name = 't',
      ),
    ],
  ),
  'glTexCoord2i': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 's',
      ),
      Param(
        type = 'GLint',
        name = 't',
      ),
    ],
  ),
  'glTexCoord2s': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLshort',
        name = 's',
      ),
      Param(
        type = 'GLshort',
        name = 't',
      ),
    ],
  ),
  'glTexCoord3d': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLdouble',
        name = 's',
      ),
      Param(
        type = 'GLdouble',
        name = 't',
      ),
      Param(
        type = 'GLdouble',
        name = 'r',
      ),
    ],
  ),
  'glTexCoord3f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 's',
      ),
      Param(
        type = 'GLfloat',
        name = 't',
      ),
      Param(
        type = 'GLfloat',
        name = 'r',
      ),
    ],
  ),
  'glTexCoord3i': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 's',
      ),
      Param(
        type = 'GLint',
        name = 't',
      ),
      Param(
        type = 'GLint',
        name = 'r',
      ),
    ],
  ),
  'glTexCoord3s': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLshort',
        name = 's',
      ),
      Param(
        type = 'GLshort',
        name = 't',
      ),
      Param(
        type = 'GLshort',
        name = 'r',
      ),
    ],
  ),
  'glTexCoord4d': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLdouble',
        name = 's',
      ),
      Param(
        type = 'GLdouble',
        name = 't',
      ),
      Param(
        type = 'GLdouble',
        name = 'r',
      ),
      Param(
        type = 'GLdouble',
        name = 'q',
      ),
    ],
  ),
  'glTexCoord4f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 's',
      ),
      Param(
        type = 'GLfloat',
        name = 't',
      ),
      Param(
        type = 'GLfloat',
        name = 'r',
      ),
      Param(
        type = 'GLfloat',
        name = 'q',
      ),
    ],
  ),
  'glTexCoord4i': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 's',
      ),
      Param(
        type = 'GLint',
        name = 't',
      ),
      Param(
        type = 'GLint',
        name = 'r',
      ),
      Param(
        type = 'GLint',
        name = 'q',
      ),
    ],
  ),
  'glTexCoord4s': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLshort',
        name = 's',
      ),
      Param(
        type = 'GLshort',
        name = 't',
      ),
      Param(
        type = 'GLshort',
        name = 'r',
      ),
      Param(
        type = 'GLshort',
        name = 'q',
      ),
    ],
  ),
  'glTexCoord1dv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLdouble *',
        name = 'v',
      ),
    ],
  ),
  'glTexCoord1fv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLfloat *',
        name = 'v',
      ),
    ],
  ),
  'glTexCoord1iv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLint *',
        name = 'v',
      ),
    ],
  ),
  'glTexCoord1sv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLshort *',
        name = 'v',
      ),
    ],
  ),
  'glTexCoord2dv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLdouble *',
        name = 'v',
      ),
    ],
  ),
  'glTexCoord2fv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLfloat *',
        name = 'v',
      ),
    ],
  ),
  'glTexCoord2iv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLint *',
        name = 'v',
      ),
    ],
  ),
  'glTexCoord2sv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLshort *',
        name = 'v',
      ),
    ],
  ),
  'glTexCoord3dv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLdouble *',
        name = 'v',
      ),
    ],
  ),
  'glTexCoord3fv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLfloat *',
        name = 'v',
      ),
    ],
  ),
  'glTexCoord3iv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLint *',
        name = 'v',
      ),
    ],
  ),
  'glTexCoord3sv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLshort *',
        name = 'v',
      ),
    ],
  ),
  'glTexCoord4dv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLdouble *',
        name = 'v',
      ),
    ],
  ),
  'glTexCoord4fv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLfloat *',
        name = 'v',
      ),
    ],
  ),
  'glTexCoord4iv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLint *',
        name = 'v',
      ),
    ],
  ),
  'glTexCoord4sv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLshort *',
        name = 'v',
      ),
    ],
  ),
  'glRasterPos2d': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLdouble',
        name = 'x',
      ),
      Param(
        type = 'GLdouble',
        name = 'y',
      ),
    ],
  ),
  'glRasterPos2f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 'x',
      ),
      Param(
        type = 'GLfloat',
        name = 'y',
      ),
    ],
  ),
  'glRasterPos2i': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'x',
      ),
      Param(
        type = 'GLint',
        name = 'y',
      ),
    ],
  ),
  'glRasterPos2s': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLshort',
        name = 'x',
      ),
      Param(
        type = 'GLshort',
        name = 'y',
      ),
    ],
  ),
  'glRasterPos3d': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLdouble',
        name = 'x',
      ),
      Param(
        type = 'GLdouble',
        name = 'y',
      ),
      Param(
        type = 'GLdouble',
        name = 'z',
      ),
    ],
  ),
  'glRasterPos3f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 'x',
      ),
      Param(
        type = 'GLfloat',
        name = 'y',
      ),
      Param(
        type = 'GLfloat',
        name = 'z',
      ),
    ],
  ),
  'glRasterPos3i': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'x',
      ),
      Param(
        type = 'GLint',
        name = 'y',
      ),
      Param(
        type = 'GLint',
        name = 'z',
      ),
    ],
  ),
  'glRasterPos3s': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLshort',
        name = 'x',
      ),
      Param(
        type = 'GLshort',
        name = 'y',
      ),
      Param(
        type = 'GLshort',
        name = 'z',
      ),
    ],
  ),
  'glRasterPos4d': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLdouble',
        name = 'x',
      ),
      Param(
        type = 'GLdouble',
        name = 'y',
      ),
      Param(
        type = 'GLdouble',
        name = 'z',
      ),
      Param(
        type = 'GLdouble',
        name = 'w',
      ),
    ],
  ),
  'glRasterPos4f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 'x',
      ),
      Param(
        type = 'GLfloat',
        name = 'y',
      ),
      Param(
        type = 'GLfloat',
        name = 'z',
      ),
      Param(
        type = 'GLfloat',
        name = 'w',
      ),
    ],
  ),
  'glRasterPos4i': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'x',
      ),
      Param(
        type = 'GLint',
        name = 'y',
      ),
      Param(
        type = 'GLint',
        name = 'z',
      ),
      Param(
        type = 'GLint',
        name = 'w',
      ),
    ],
  ),
  'glRasterPos4s': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLshort',
        name = 'x',
      ),
      Param(
        type = 'GLshort',
        name = 'y',
      ),
      Param(
        type = 'GLshort',
        name = 'z',
      ),
      Param(
        type = 'GLshort',
        name = 'w',
      ),
    ],
  ),
  'glRasterPos2dv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLdouble *',
        name = 'v',
      ),
    ],
  ),
  'glRasterPos2fv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLfloat *',
        name = 'v',
      ),
    ],
  ),
  'glRasterPos2iv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLint *',
        name = 'v',
      ),
    ],
  ),
  'glRasterPos2sv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLshort *',
        name = 'v',
      ),
    ],
  ),
  'glRasterPos3dv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLdouble *',
        name = 'v',
      ),
    ],
  ),
  'glRasterPos3fv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLfloat *',
        name = 'v',
      ),
    ],
  ),
  'glRasterPos3iv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLint *',
        name = 'v',
      ),
    ],
  ),
  'glRasterPos3sv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLshort *',
        name = 'v',
      ),
    ],
  ),
  'glRasterPos4dv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLdouble *',
        name = 'v',
      ),
    ],
  ),
  'glRasterPos4fv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLfloat *',
        name = 'v',
      ),
    ],
  ),
  'glRasterPos4iv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLint *',
        name = 'v',
      ),
    ],
  ),
  'glRasterPos4sv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLshort *',
        name = 'v',
      ),
    ],
  ),
  'glRectd': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLdouble',
        name = 'x1',
      ),
      Param(
        type = 'GLdouble',
        name = 'y1',
      ),
      Param(
        type = 'GLdouble',
        name = 'x2',
      ),
      Param(
        type = 'GLdouble',
        name = 'y2',
      ),
    ],
  ),
  'glRectf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 'x1',
      ),
      Param(
        type = 'GLfloat',
        name = 'y1',
      ),
      Param(
        type = 'GLfloat',
        name = 'x2',
      ),
      Param(
        type = 'GLfloat',
        name = 'y2',
      ),
    ],
  ),
  'glRecti': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'x1',
      ),
      Param(
        type = 'GLint',
        name = 'y1',
      ),
      Param(
        type = 'GLint',
        name = 'x2',
      ),
      Param(
        type = 'GLint',
        name = 'y2',
      ),
    ],
  ),
  'glRects': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLshort',
        name = 'x1',
      ),
      Param(
        type = 'GLshort',
        name = 'y1',
      ),
      Param(
        type = 'GLshort',
        name = 'x2',
      ),
      Param(
        type = 'GLshort',
        name = 'y2',
      ),
    ],
  ),
  'glRectdv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLdouble *',
        name = 'v1',
      ),
      Param(
        type = 'const GLdouble *',
        name = 'v2',
      ),
    ],
  ),
  'glRectfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLfloat *',
        name = 'v1',
      ),
      Param(
        type = 'const GLfloat *',
        name = 'v2',
      ),
    ],
  ),
  'glRectiv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLint *',
        name = 'v1',
      ),
      Param(
        type = 'const GLint *',
        name = 'v2',
      ),
    ],
  ),
  'glRectsv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLshort *',
        name = 'v1',
      ),
      Param(
        type = 'const GLshort *',
        name = 'v2',
      ),
    ],
  ),
  'glVertexPointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'size',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'GLsizei',
        name = 'stride',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'ptr',
      ),
    ],
  ),
  'glNormalPointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'GLsizei',
        name = 'stride',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'ptr',
      ),
    ],
  ),
  'glColorPointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'size',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'GLsizei',
        name = 'stride',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'ptr',
      ),
    ],
  ),
  'glIndexPointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'GLsizei',
        name = 'stride',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'ptr',
      ),
    ],
  ),
  'glTexCoordPointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'size',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'GLsizei',
        name = 'stride',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'ptr',
      ),
    ],
  ),
  'glEdgeFlagPointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLsizei',
        name = 'stride',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'ptr',
      ),
    ],
  ),
  'glGetPointerv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLvoid **',
        name = 'params',
      ),
    ],
  ),
  'glArrayElement': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'i',
      ),
    ],
  ),
  'glDrawArrays': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'mode',
      ),
      Param(
        type = 'GLint',
        name = 'first',
      ),
      Param(
        type = 'GLsizei',
        name = 'count',
      ),
    ],
  ),
  'glDrawElements': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'mode',
      ),
      Param(
        type = 'GLsizei',
        name = 'count',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'indices',
      ),
    ],
  ),
  'glInterleavedArrays': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'format',
      ),
      Param(
        type = 'GLsizei',
        name = 'stride',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'pointer',
      ),
    ],
  ),
  'glShadeModel': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'mode',
      ),
    ],
  ),
  'glLightf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'light',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLfloat',
        name = 'param',
      ),
    ],
  ),
  'glLighti': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'light',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLint',
        name = 'param',
      ),
    ],
  ),
  'glLightfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'light',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'const GLfloat *',
        name = 'params',
      ),
    ],
  ),
  'glLightiv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'light',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'const GLint *',
        name = 'params',
      ),
    ],
  ),
  'glGetLightfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'light',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLfloat *',
        name = 'params',
      ),
    ],
  ),
  'glGetLightiv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'light',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLint *',
        name = 'params',
      ),
    ],
  ),
  'glLightModelf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLfloat',
        name = 'param',
      ),
    ],
  ),
  'glLightModeli': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLint',
        name = 'param',
      ),
    ],
  ),
  'glLightModelfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'const GLfloat *',
        name = 'params',
      ),
    ],
  ),
  'glLightModeliv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'const GLint *',
        name = 'params',
      ),
    ],
  ),
  'glMaterialf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'face',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLfloat',
        name = 'param',
      ),
    ],
  ),
  'glMateriali': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'face',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLint',
        name = 'param',
      ),
    ],
  ),
  'glMaterialfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'face',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'const GLfloat *',
        name = 'params',
      ),
    ],
  ),
  'glMaterialiv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'face',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'const GLint *',
        name = 'params',
      ),
    ],
  ),
  'glGetMaterialfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'face',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLfloat *',
        name = 'params',
      ),
    ],
  ),
  'glGetMaterialiv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'face',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLint *',
        name = 'params',
      ),
    ],
  ),
  'glColorMaterial': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'face',
      ),
      Param(
        type = 'GLenum',
        name = 'mode',
      ),
    ],
  ),
  'glPixelZoom': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 'xfactor',
      ),
      Param(
        type = 'GLfloat',
        name = 'yfactor',
      ),
    ],
  ),
  'glPixelStoref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLfloat',
        name = 'param',
      ),
    ],
  ),
  'glPixelStorei': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLint',
        name = 'param',
      ),
    ],
  ),
  'glPixelTransferf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLfloat',
        name = 'param',
      ),
    ],
  ),
  'glPixelTransferi': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLint',
        name = 'param',
      ),
    ],
  ),
  'glPixelMapfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'map',
      ),
      Param(
        type = 'GLsizei',
        name = 'mapsize',
      ),
      Param(
        type = 'const GLfloat *',
        name = 'values',
      ),
    ],
  ),
  'glPixelMapuiv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'map',
      ),
      Param(
        type = 'GLsizei',
        name = 'mapsize',
      ),
      Param(
        type = 'const GLuint *',
        name = 'values',
      ),
    ],
  ),
  'glPixelMapusv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'map',
      ),
      Param(
        type = 'GLsizei',
        name = 'mapsize',
      ),
      Param(
        type = 'const GLushort *',
        name = 'values',
      ),
    ],
  ),
  'glGetPixelMapfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'map',
      ),
      Param(
        type = 'GLfloat *',
        name = 'values',
      ),
    ],
  ),
  'glGetPixelMapuiv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'map',
      ),
      Param(
        type = 'GLuint *',
        name = 'values',
      ),
    ],
  ),
  'glGetPixelMapusv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'map',
      ),
      Param(
        type = 'GLushort *',
        name = 'values',
      ),
    ],
  ),
  'glBitmap': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLsizei',
        name = 'height',
      ),
      Param(
        type = 'GLfloat',
        name = 'xorig',
      ),
      Param(
        type = 'GLfloat',
        name = 'yorig',
      ),
      Param(
        type = 'GLfloat',
        name = 'xmove',
      ),
      Param(
        type = 'GLfloat',
        name = 'ymove',
      ),
      Param(
        type = 'const GLubyte *',
        name = 'bitmap',
      ),
    ],
  ),
  'glReadPixels': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'x',
      ),
      Param(
        type = 'GLint',
        name = 'y',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLsizei',
        name = 'height',
      ),
      Param(
        type = 'GLenum',
        name = 'format',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'GLvoid *',
        name = 'pixels',
      ),
    ],
  ),
  'glDrawPixels': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLsizei',
        name = 'height',
      ),
      Param(
        type = 'GLenum',
        name = 'format',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'pixels',
      ),
    ],
  ),
  'glCopyPixels': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'x',
      ),
      Param(
        type = 'GLint',
        name = 'y',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLsizei',
        name = 'height',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
    ],
  ),
  'glStencilFunc': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'func',
      ),
      Param(
        type = 'GLint',
        name = 'ref',
      ),
      Param(
        type = 'GLuint',
        name = 'mask',
      ),
    ],
  ),
  'glStencilMask': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLuint',
        name = 'mask',
      ),
    ],
  ),
  'glStencilOp': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'fail',
      ),
      Param(
        type = 'GLenum',
        name = 'zfail',
      ),
      Param(
        type = 'GLenum',
        name = 'zpass',
      ),
    ],
  ),
  'glClearStencil': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 's',
      ),
    ],
  ),
  'glTexGend': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'coord',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLdouble',
        name = 'param',
      ),
    ],
  ),
  'glTexGenf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'coord',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLfloat',
        name = 'param',
      ),
    ],
  ),
  'glTexGeni': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'coord',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLint',
        name = 'param',
      ),
    ],
  ),
  'glTexGendv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'coord',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'const GLdouble *',
        name = 'params',
      ),
    ],
  ),
  'glTexGenfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'coord',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'const GLfloat *',
        name = 'params',
      ),
    ],
  ),
  'glTexGeniv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'coord',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'const GLint *',
        name = 'params',
      ),
    ],
  ),
  'glGetTexGendv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'coord',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLdouble *',
        name = 'params',
      ),
    ],
  ),
  'glGetTexGenfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'coord',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLfloat *',
        name = 'params',
      ),
    ],
  ),
  'glGetTexGeniv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'coord',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLint *',
        name = 'params',
      ),
    ],
  ),
  'glTexEnvf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLfloat',
        name = 'param',
      ),
    ],
  ),
  'glTexEnvi': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLint',
        name = 'param',
      ),
    ],
  ),
  'glTexEnvfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'const GLfloat *',
        name = 'params',
      ),
    ],
  ),
  'glTexEnviv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'const GLint *',
        name = 'params',
      ),
    ],
  ),
  'glGetTexEnvfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLfloat *',
        name = 'params',
      ),
    ],
  ),
  'glGetTexEnviv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLint *',
        name = 'params',
      ),
    ],
  ),
  'glTexParameterf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLfloat',
        name = 'param',
      ),
    ],
  ),
  'glTexParameteri': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLint',
        name = 'param',
      ),
    ],
  ),
  'glTexParameterfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'const GLfloat *',
        name = 'params',
      ),
    ],
  ),
  'glTexParameteriv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'const GLint *',
        name = 'params',
      ),
    ],
  ),
  'glGetTexParameterfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLfloat *',
        name = 'params',
      ),
    ],
  ),
  'glGetTexParameteriv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLint *',
        name = 'params',
      ),
    ],
  ),
  'glGetTexLevelParameterfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 'level',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLfloat *',
        name = 'params',
      ),
    ],
  ),
  'glGetTexLevelParameteriv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 'level',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLint *',
        name = 'params',
      ),
    ],
  ),
  'glTexImage1D': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 'level',
      ),
      Param(
        type = 'GLint',
        name = 'internalFormat',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLint',
        name = 'border',
      ),
      Param(
        type = 'GLenum',
        name = 'format',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'pixels',
      ),
    ],
  ),
  'glTexImage2D': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 'level',
      ),
      Param(
        type = 'GLint',
        name = 'internalFormat',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLsizei',
        name = 'height',
      ),
      Param(
        type = 'GLint',
        name = 'border',
      ),
      Param(
        type = 'GLenum',
        name = 'format',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'pixels',
      ),
    ],
  ),
  'glGetTexImage': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 'level',
      ),
      Param(
        type = 'GLenum',
        name = 'format',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'GLvoid *',
        name = 'pixels',
      ),
    ],
  ),
  'glGenTextures': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLsizei',
        name = 'n',
      ),
      Param(
        type = 'GLuint *',
        name = 'textures',
      ),
    ],
  ),
  'glDeleteTextures': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLsizei',
        name = 'n',
      ),
      Param(
        type = 'const GLuint *',
        name = 'textures',
      ),
    ],
  ),
  'glBindTexture': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLuint',
        name = 'texture',
      ),
    ],
  ),
  'glPrioritizeTextures': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLsizei',
        name = 'n',
      ),
      Param(
        type = 'const GLuint *',
        name = 'textures',
      ),
      Param(
        type = 'const GLclampf *',
        name = 'priorities',
      ),
    ],
  ),
  'glAreTexturesResident': Spec(
    return_type = 'GLboolean',
    parameters = [
      Param(
        type = 'GLsizei',
        name = 'n',
      ),
      Param(
        type = 'const GLuint *',
        name = 'textures',
      ),
      Param(
        type = 'GLboolean *',
        name = 'residences',
      ),
    ],
  ),
  'glIsTexture': Spec(
    return_type = 'GLboolean',
    parameters = [
      Param(
        type = 'GLuint',
        name = 'texture',
      ),
    ],
  ),
  'glTexSubImage1D': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 'level',
      ),
      Param(
        type = 'GLint',
        name = 'xoffset',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLenum',
        name = 'format',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'pixels',
      ),
    ],
  ),
  'glTexSubImage2D': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 'level',
      ),
      Param(
        type = 'GLint',
        name = 'xoffset',
      ),
      Param(
        type = 'GLint',
        name = 'yoffset',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLsizei',
        name = 'height',
      ),
      Param(
        type = 'GLenum',
        name = 'format',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'pixels',
      ),
    ],
  ),
  'glCopyTexImage1D': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 'level',
      ),
      Param(
        type = 'GLenum',
        name = 'internalformat',
      ),
      Param(
        type = 'GLint',
        name = 'x',
      ),
      Param(
        type = 'GLint',
        name = 'y',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLint',
        name = 'border',
      ),
    ],
  ),
  'glCopyTexImage2D': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 'level',
      ),
      Param(
        type = 'GLenum',
        name = 'internalformat',
      ),
      Param(
        type = 'GLint',
        name = 'x',
      ),
      Param(
        type = 'GLint',
        name = 'y',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLsizei',
        name = 'height',
      ),
      Param(
        type = 'GLint',
        name = 'border',
      ),
    ],
  ),
  'glCopyTexSubImage1D': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 'level',
      ),
      Param(
        type = 'GLint',
        name = 'xoffset',
      ),
      Param(
        type = 'GLint',
        name = 'x',
      ),
      Param(
        type = 'GLint',
        name = 'y',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
    ],
  ),
  'glCopyTexSubImage2D': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 'level',
      ),
      Param(
        type = 'GLint',
        name = 'xoffset',
      ),
      Param(
        type = 'GLint',
        name = 'yoffset',
      ),
      Param(
        type = 'GLint',
        name = 'x',
      ),
      Param(
        type = 'GLint',
        name = 'y',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLsizei',
        name = 'height',
      ),
    ],
  ),
  'glMap1d': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLdouble',
        name = 'u1',
      ),
      Param(
        type = 'GLdouble',
        name = 'u2',
      ),
      Param(
        type = 'GLint',
        name = 'stride',
      ),
      Param(
        type = 'GLint',
        name = 'order',
      ),
      Param(
        type = 'const GLdouble *',
        name = 'points',
      ),
    ],
  ),
  'glMap1f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLfloat',
        name = 'u1',
      ),
      Param(
        type = 'GLfloat',
        name = 'u2',
      ),
      Param(
        type = 'GLint',
        name = 'stride',
      ),
      Param(
        type = 'GLint',
        name = 'order',
      ),
      Param(
        type = 'const GLfloat *',
        name = 'points',
      ),
    ],
  ),
  'glMap2d': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLdouble',
        name = 'u1',
      ),
      Param(
        type = 'GLdouble',
        name = 'u2',
      ),
      Param(
        type = 'GLint',
        name = 'ustride',
      ),
      Param(
        type = 'GLint',
        name = 'uorder',
      ),
      Param(
        type = 'GLdouble',
        name = 'v1',
      ),
      Param(
        type = 'GLdouble',
        name = 'v2',
      ),
      Param(
        type = 'GLint',
        name = 'vstride',
      ),
      Param(
        type = 'GLint',
        name = 'vorder',
      ),
      Param(
        type = 'const GLdouble *',
        name = 'points',
      ),
    ],
  ),
  'glMap2f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLfloat',
        name = 'u1',
      ),
      Param(
        type = 'GLfloat',
        name = 'u2',
      ),
      Param(
        type = 'GLint',
        name = 'ustride',
      ),
      Param(
        type = 'GLint',
        name = 'uorder',
      ),
      Param(
        type = 'GLfloat',
        name = 'v1',
      ),
      Param(
        type = 'GLfloat',
        name = 'v2',
      ),
      Param(
        type = 'GLint',
        name = 'vstride',
      ),
      Param(
        type = 'GLint',
        name = 'vorder',
      ),
      Param(
        type = 'const GLfloat *',
        name = 'points',
      ),
    ],
  ),
  'glGetMapdv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'query',
      ),
      Param(
        type = 'GLdouble *',
        name = 'v',
      ),
    ],
  ),
  'glGetMapfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'query',
      ),
      Param(
        type = 'GLfloat *',
        name = 'v',
      ),
    ],
  ),
  'glGetMapiv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'query',
      ),
      Param(
        type = 'GLint *',
        name = 'v',
      ),
    ],
  ),
  'glEvalCoord1d': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLdouble',
        name = 'u',
      ),
    ],
  ),
  'glEvalCoord1f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 'u',
      ),
    ],
  ),
  'glEvalCoord1dv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLdouble *',
        name = 'u',
      ),
    ],
  ),
  'glEvalCoord1fv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLfloat *',
        name = 'u',
      ),
    ],
  ),
  'glEvalCoord2d': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLdouble',
        name = 'u',
      ),
      Param(
        type = 'GLdouble',
        name = 'v',
      ),
    ],
  ),
  'glEvalCoord2f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 'u',
      ),
      Param(
        type = 'GLfloat',
        name = 'v',
      ),
    ],
  ),
  'glEvalCoord2dv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLdouble *',
        name = 'u',
      ),
    ],
  ),
  'glEvalCoord2fv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLfloat *',
        name = 'u',
      ),
    ],
  ),
  'glMapGrid1d': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'un',
      ),
      Param(
        type = 'GLdouble',
        name = 'u1',
      ),
      Param(
        type = 'GLdouble',
        name = 'u2',
      ),
    ],
  ),
  'glMapGrid1f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'un',
      ),
      Param(
        type = 'GLfloat',
        name = 'u1',
      ),
      Param(
        type = 'GLfloat',
        name = 'u2',
      ),
    ],
  ),
  'glMapGrid2d': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'un',
      ),
      Param(
        type = 'GLdouble',
        name = 'u1',
      ),
      Param(
        type = 'GLdouble',
        name = 'u2',
      ),
      Param(
        type = 'GLint',
        name = 'vn',
      ),
      Param(
        type = 'GLdouble',
        name = 'v1',
      ),
      Param(
        type = 'GLdouble',
        name = 'v2',
      ),
    ],
  ),
  'glMapGrid2f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'un',
      ),
      Param(
        type = 'GLfloat',
        name = 'u1',
      ),
      Param(
        type = 'GLfloat',
        name = 'u2',
      ),
      Param(
        type = 'GLint',
        name = 'vn',
      ),
      Param(
        type = 'GLfloat',
        name = 'v1',
      ),
      Param(
        type = 'GLfloat',
        name = 'v2',
      ),
    ],
  ),
  'glEvalPoint1': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'i',
      ),
    ],
  ),
  'glEvalPoint2': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLint',
        name = 'i',
      ),
      Param(
        type = 'GLint',
        name = 'j',
      ),
    ],
  ),
  'glEvalMesh1': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'mode',
      ),
      Param(
        type = 'GLint',
        name = 'i1',
      ),
      Param(
        type = 'GLint',
        name = 'i2',
      ),
    ],
  ),
  'glEvalMesh2': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'mode',
      ),
      Param(
        type = 'GLint',
        name = 'i1',
      ),
      Param(
        type = 'GLint',
        name = 'i2',
      ),
      Param(
        type = 'GLint',
        name = 'j1',
      ),
      Param(
        type = 'GLint',
        name = 'j2',
      ),
    ],
  ),
  'glFogf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLfloat',
        name = 'param',
      ),
    ],
  ),
  'glFogi': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLint',
        name = 'param',
      ),
    ],
  ),
  'glFogfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'const GLfloat *',
        name = 'params',
      ),
    ],
  ),
  'glFogiv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'const GLint *',
        name = 'params',
      ),
    ],
  ),
  'glFeedbackBuffer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLsizei',
        name = 'size',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'GLfloat *',
        name = 'buffer',
      ),
    ],
  ),
  'glPassThrough': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLfloat',
        name = 'token',
      ),
    ],
  ),
  'glSelectBuffer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLsizei',
        name = 'size',
      ),
      Param(
        type = 'GLuint *',
        name = 'buffer',
      ),
    ],
  ),
  'glInitNames': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'glLoadName': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLuint',
        name = 'name',
      ),
    ],
  ),
  'glPushName': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLuint',
        name = 'name',
      ),
    ],
  ),
  'glPopName': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'glDrawRangeElements': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'mode',
      ),
      Param(
        type = 'GLuint',
        name = 'start',
      ),
      Param(
        type = 'GLuint',
        name = 'end',
      ),
      Param(
        type = 'GLsizei',
        name = 'count',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'indices',
      ),
    ],
  ),
  'glTexImage3D': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 'level',
      ),
      Param(
        type = 'GLint',
        name = 'internalFormat',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLsizei',
        name = 'height',
      ),
      Param(
        type = 'GLsizei',
        name = 'depth',
      ),
      Param(
        type = 'GLint',
        name = 'border',
      ),
      Param(
        type = 'GLenum',
        name = 'format',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'pixels',
      ),
    ],
  ),
  'glTexSubImage3D': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 'level',
      ),
      Param(
        type = 'GLint',
        name = 'xoffset',
      ),
      Param(
        type = 'GLint',
        name = 'yoffset',
      ),
      Param(
        type = 'GLint',
        name = 'zoffset',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLsizei',
        name = 'height',
      ),
      Param(
        type = 'GLsizei',
        name = 'depth',
      ),
      Param(
        type = 'GLenum',
        name = 'format',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'pixels',
      ),
    ],
  ),
  'glCopyTexSubImage3D': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 'level',
      ),
      Param(
        type = 'GLint',
        name = 'xoffset',
      ),
      Param(
        type = 'GLint',
        name = 'yoffset',
      ),
      Param(
        type = 'GLint',
        name = 'zoffset',
      ),
      Param(
        type = 'GLint',
        name = 'x',
      ),
      Param(
        type = 'GLint',
        name = 'y',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLsizei',
        name = 'height',
      ),
    ],
  ),
  'glColorTable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'internalformat',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLenum',
        name = 'format',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'table',
      ),
    ],
  ),
  'glColorSubTable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLsizei',
        name = 'start',
      ),
      Param(
        type = 'GLsizei',
        name = 'count',
      ),
      Param(
        type = 'GLenum',
        name = 'format',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'data',
      ),
    ],
  ),
  'glColorTableParameteriv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'const GLint *',
        name = 'params',
      ),
    ],
  ),
  'glColorTableParameterfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'const GLfloat *',
        name = 'params',
      ),
    ],
  ),
  'glCopyColorSubTable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLsizei',
        name = 'start',
      ),
      Param(
        type = 'GLint',
        name = 'x',
      ),
      Param(
        type = 'GLint',
        name = 'y',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
    ],
  ),
  'glCopyColorTable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'internalformat',
      ),
      Param(
        type = 'GLint',
        name = 'x',
      ),
      Param(
        type = 'GLint',
        name = 'y',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
    ],
  ),
  'glGetColorTable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'format',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'GLvoid *',
        name = 'table',
      ),
    ],
  ),
  'glGetColorTableParameterfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLfloat *',
        name = 'params',
      ),
    ],
  ),
  'glGetColorTableParameteriv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLint *',
        name = 'params',
      ),
    ],
  ),
  'glBlendEquation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'mode',
      ),
    ],
  ),
  'glBlendColor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLclampf',
        name = 'red',
      ),
      Param(
        type = 'GLclampf',
        name = 'green',
      ),
      Param(
        type = 'GLclampf',
        name = 'blue',
      ),
      Param(
        type = 'GLclampf',
        name = 'alpha',
      ),
    ],
  ),
  'glHistogram': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLenum',
        name = 'internalformat',
      ),
      Param(
        type = 'GLboolean',
        name = 'sink',
      ),
    ],
  ),
  'glResetHistogram': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
    ],
  ),
  'glGetHistogram': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLboolean',
        name = 'reset',
      ),
      Param(
        type = 'GLenum',
        name = 'format',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'GLvoid *',
        name = 'values',
      ),
    ],
  ),
  'glGetHistogramParameterfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLfloat *',
        name = 'params',
      ),
    ],
  ),
  'glGetHistogramParameteriv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLint *',
        name = 'params',
      ),
    ],
  ),
  'glMinmax': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'internalformat',
      ),
      Param(
        type = 'GLboolean',
        name = 'sink',
      ),
    ],
  ),
  'glResetMinmax': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
    ],
  ),
  'glGetMinmax': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLboolean',
        name = 'reset',
      ),
      Param(
        type = 'GLenum',
        name = 'format',
      ),
      Param(
        type = 'GLenum',
        name = 'types',
      ),
      Param(
        type = 'GLvoid *',
        name = 'values',
      ),
    ],
  ),
  'glGetMinmaxParameterfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLfloat *',
        name = 'params',
      ),
    ],
  ),
  'glGetMinmaxParameteriv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLint *',
        name = 'params',
      ),
    ],
  ),
  'glConvolutionFilter1D': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'internalformat',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLenum',
        name = 'format',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'image',
      ),
    ],
  ),
  'glConvolutionFilter2D': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'internalformat',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLsizei',
        name = 'height',
      ),
      Param(
        type = 'GLenum',
        name = 'format',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'image',
      ),
    ],
  ),
  'glConvolutionParameterf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLfloat',
        name = 'params',
      ),
    ],
  ),
  'glConvolutionParameterfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'const GLfloat *',
        name = 'params',
      ),
    ],
  ),
  'glConvolutionParameteri': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLint',
        name = 'params',
      ),
    ],
  ),
  'glConvolutionParameteriv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'const GLint *',
        name = 'params',
      ),
    ],
  ),
  'glCopyConvolutionFilter1D': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'internalformat',
      ),
      Param(
        type = 'GLint',
        name = 'x',
      ),
      Param(
        type = 'GLint',
        name = 'y',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
    ],
  ),
  'glCopyConvolutionFilter2D': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'internalformat',
      ),
      Param(
        type = 'GLint',
        name = 'x',
      ),
      Param(
        type = 'GLint',
        name = 'y',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLsizei',
        name = 'height',
      ),
    ],
  ),
  'glGetConvolutionFilter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'format',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'GLvoid *',
        name = 'image',
      ),
    ],
  ),
  'glGetConvolutionParameterfv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLfloat *',
        name = 'params',
      ),
    ],
  ),
  'glGetConvolutionParameteriv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'pname',
      ),
      Param(
        type = 'GLint *',
        name = 'params',
      ),
    ],
  ),
  'glSeparableFilter2D': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'internalformat',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLsizei',
        name = 'height',
      ),
      Param(
        type = 'GLenum',
        name = 'format',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'row',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'column',
      ),
    ],
  ),
  'glGetSeparableFilter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLenum',
        name = 'format',
      ),
      Param(
        type = 'GLenum',
        name = 'type',
      ),
      Param(
        type = 'GLvoid *',
        name = 'row',
      ),
      Param(
        type = 'GLvoid *',
        name = 'column',
      ),
      Param(
        type = 'GLvoid *',
        name = 'span',
      ),
    ],
  ),
  'glActiveTexture': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'texture',
      ),
    ],
  ),
  'glClientActiveTexture': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'texture',
      ),
    ],
  ),
  'glCompressedTexImage1D': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 'level',
      ),
      Param(
        type = 'GLenum',
        name = 'internalformat',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLint',
        name = 'border',
      ),
      Param(
        type = 'GLsizei',
        name = 'imageSize',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'data',
      ),
    ],
  ),
  'glCompressedTexImage2D': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 'level',
      ),
      Param(
        type = 'GLenum',
        name = 'internalformat',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLsizei',
        name = 'height',
      ),
      Param(
        type = 'GLint',
        name = 'border',
      ),
      Param(
        type = 'GLsizei',
        name = 'imageSize',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'data',
      ),
    ],
  ),
  'glCompressedTexImage3D': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 'level',
      ),
      Param(
        type = 'GLenum',
        name = 'internalformat',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLsizei',
        name = 'height',
      ),
      Param(
        type = 'GLsizei',
        name = 'depth',
      ),
      Param(
        type = 'GLint',
        name = 'border',
      ),
      Param(
        type = 'GLsizei',
        name = 'imageSize',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'data',
      ),
    ],
  ),
  'glCompressedTexSubImage1D': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 'level',
      ),
      Param(
        type = 'GLint',
        name = 'xoffset',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLenum',
        name = 'format',
      ),
      Param(
        type = 'GLsizei',
        name = 'imageSize',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'data',
      ),
    ],
  ),
  'glCompressedTexSubImage2D': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 'level',
      ),
      Param(
        type = 'GLint',
        name = 'xoffset',
      ),
      Param(
        type = 'GLint',
        name = 'yoffset',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLsizei',
        name = 'height',
      ),
      Param(
        type = 'GLenum',
        name = 'format',
      ),
      Param(
        type = 'GLsizei',
        name = 'imageSize',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'data',
      ),
    ],
  ),
  'glCompressedTexSubImage3D': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 'level',
      ),
      Param(
        type = 'GLint',
        name = 'xoffset',
      ),
      Param(
        type = 'GLint',
        name = 'yoffset',
      ),
      Param(
        type = 'GLint',
        name = 'zoffset',
      ),
      Param(
        type = 'GLsizei',
        name = 'width',
      ),
      Param(
        type = 'GLsizei',
        name = 'height',
      ),
      Param(
        type = 'GLsizei',
        name = 'depth',
      ),
      Param(
        type = 'GLenum',
        name = 'format',
      ),
      Param(
        type = 'GLsizei',
        name = 'imageSize',
      ),
      Param(
        type = 'const GLvoid *',
        name = 'data',
      ),
    ],
  ),
  'glGetCompressedTexImage': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 'lod',
      ),
      Param(
        type = 'GLvoid *',
        name = 'img',
      ),
    ],
  ),
  'glMultiTexCoord1d': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLdouble',
        name = 's',
      ),
    ],
  ),
  'glMultiTexCoord1dv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLdouble *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord1f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLfloat',
        name = 's',
      ),
    ],
  ),
  'glMultiTexCoord1fv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLfloat *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord1i': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 's',
      ),
    ],
  ),
  'glMultiTexCoord1iv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLint *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord1s': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLshort',
        name = 's',
      ),
    ],
  ),
  'glMultiTexCoord1sv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLshort *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord2d': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLdouble',
        name = 's',
      ),
      Param(
        type = 'GLdouble',
        name = 't',
      ),
    ],
  ),
  'glMultiTexCoord2dv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLdouble *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord2f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLfloat',
        name = 's',
      ),
      Param(
        type = 'GLfloat',
        name = 't',
      ),
    ],
  ),
  'glMultiTexCoord2fv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLfloat *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord2i': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 's',
      ),
      Param(
        type = 'GLint',
        name = 't',
      ),
    ],
  ),
  'glMultiTexCoord2iv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLint *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord2s': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLshort',
        name = 's',
      ),
      Param(
        type = 'GLshort',
        name = 't',
      ),
    ],
  ),
  'glMultiTexCoord2sv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLshort *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord3d': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLdouble',
        name = 's',
      ),
      Param(
        type = 'GLdouble',
        name = 't',
      ),
      Param(
        type = 'GLdouble',
        name = 'r',
      ),
    ],
  ),
  'glMultiTexCoord3dv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLdouble *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord3f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLfloat',
        name = 's',
      ),
      Param(
        type = 'GLfloat',
        name = 't',
      ),
      Param(
        type = 'GLfloat',
        name = 'r',
      ),
    ],
  ),
  'glMultiTexCoord3fv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLfloat *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord3i': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 's',
      ),
      Param(
        type = 'GLint',
        name = 't',
      ),
      Param(
        type = 'GLint',
        name = 'r',
      ),
    ],
  ),
  'glMultiTexCoord3iv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLint *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord3s': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLshort',
        name = 's',
      ),
      Param(
        type = 'GLshort',
        name = 't',
      ),
      Param(
        type = 'GLshort',
        name = 'r',
      ),
    ],
  ),
  'glMultiTexCoord3sv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLshort *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord4d': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLdouble',
        name = 's',
      ),
      Param(
        type = 'GLdouble',
        name = 't',
      ),
      Param(
        type = 'GLdouble',
        name = 'r',
      ),
      Param(
        type = 'GLdouble',
        name = 'q',
      ),
    ],
  ),
  'glMultiTexCoord4dv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLdouble *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord4f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLfloat',
        name = 's',
      ),
      Param(
        type = 'GLfloat',
        name = 't',
      ),
      Param(
        type = 'GLfloat',
        name = 'r',
      ),
      Param(
        type = 'GLfloat',
        name = 'q',
      ),
    ],
  ),
  'glMultiTexCoord4fv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLfloat *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord4i': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 's',
      ),
      Param(
        type = 'GLint',
        name = 't',
      ),
      Param(
        type = 'GLint',
        name = 'r',
      ),
      Param(
        type = 'GLint',
        name = 'q',
      ),
    ],
  ),
  'glMultiTexCoord4iv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLint *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord4s': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLshort',
        name = 's',
      ),
      Param(
        type = 'GLshort',
        name = 't',
      ),
      Param(
        type = 'GLshort',
        name = 'r',
      ),
      Param(
        type = 'GLshort',
        name = 'q',
      ),
    ],
  ),
  'glMultiTexCoord4sv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLshort *',
        name = 'v',
      ),
    ],
  ),
  'glLoadTransposeMatrixd': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLdouble [16]',
        name = 'm',
      ),
    ],
  ),
  'glLoadTransposeMatrixf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLfloat [16]',
        name = 'm',
      ),
    ],
  ),
  'glMultTransposeMatrixd': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLdouble [16]',
        name = 'm',
      ),
    ],
  ),
  'glMultTransposeMatrixf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GLfloat [16]',
        name = 'm',
      ),
    ],
  ),
  'glSampleCoverage': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLclampf',
        name = 'value',
      ),
      Param(
        type = 'GLboolean',
        name = 'invert',
      ),
    ],
  ),
  'glActiveTextureARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'texture',
      ),
    ],
  ),
  'glClientActiveTextureARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'texture',
      ),
    ],
  ),
  'glMultiTexCoord1dARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLdouble',
        name = 's',
      ),
    ],
  ),
  'glMultiTexCoord1dvARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLdouble *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord1fARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLfloat',
        name = 's',
      ),
    ],
  ),
  'glMultiTexCoord1fvARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLfloat *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord1iARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 's',
      ),
    ],
  ),
  'glMultiTexCoord1ivARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLint *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord1sARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLshort',
        name = 's',
      ),
    ],
  ),
  'glMultiTexCoord1svARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLshort *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord2dARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLdouble',
        name = 's',
      ),
      Param(
        type = 'GLdouble',
        name = 't',
      ),
    ],
  ),
  'glMultiTexCoord2dvARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLdouble *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord2fARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLfloat',
        name = 's',
      ),
      Param(
        type = 'GLfloat',
        name = 't',
      ),
    ],
  ),
  'glMultiTexCoord2fvARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLfloat *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord2iARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 's',
      ),
      Param(
        type = 'GLint',
        name = 't',
      ),
    ],
  ),
  'glMultiTexCoord2ivARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLint *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord2sARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLshort',
        name = 's',
      ),
      Param(
        type = 'GLshort',
        name = 't',
      ),
    ],
  ),
  'glMultiTexCoord2svARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLshort *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord3dARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLdouble',
        name = 's',
      ),
      Param(
        type = 'GLdouble',
        name = 't',
      ),
      Param(
        type = 'GLdouble',
        name = 'r',
      ),
    ],
  ),
  'glMultiTexCoord3dvARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLdouble *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord3fARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLfloat',
        name = 's',
      ),
      Param(
        type = 'GLfloat',
        name = 't',
      ),
      Param(
        type = 'GLfloat',
        name = 'r',
      ),
    ],
  ),
  'glMultiTexCoord3fvARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLfloat *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord3iARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 's',
      ),
      Param(
        type = 'GLint',
        name = 't',
      ),
      Param(
        type = 'GLint',
        name = 'r',
      ),
    ],
  ),
  'glMultiTexCoord3ivARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLint *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord3sARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLshort',
        name = 's',
      ),
      Param(
        type = 'GLshort',
        name = 't',
      ),
      Param(
        type = 'GLshort',
        name = 'r',
      ),
    ],
  ),
  'glMultiTexCoord3svARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLshort *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord4dARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLdouble',
        name = 's',
      ),
      Param(
        type = 'GLdouble',
        name = 't',
      ),
      Param(
        type = 'GLdouble',
        name = 'r',
      ),
      Param(
        type = 'GLdouble',
        name = 'q',
      ),
    ],
  ),
  'glMultiTexCoord4dvARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLdouble *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord4fARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLfloat',
        name = 's',
      ),
      Param(
        type = 'GLfloat',
        name = 't',
      ),
      Param(
        type = 'GLfloat',
        name = 'r',
      ),
      Param(
        type = 'GLfloat',
        name = 'q',
      ),
    ],
  ),
  'glMultiTexCoord4fvARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLfloat *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord4iARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLint',
        name = 's',
      ),
      Param(
        type = 'GLint',
        name = 't',
      ),
      Param(
        type = 'GLint',
        name = 'r',
      ),
      Param(
        type = 'GLint',
        name = 'q',
      ),
    ],
  ),
  'glMultiTexCoord4ivARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLint *',
        name = 'v',
      ),
    ],
  ),
  'glMultiTexCoord4sARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLshort',
        name = 's',
      ),
      Param(
        type = 'GLshort',
        name = 't',
      ),
      Param(
        type = 'GLshort',
        name = 'r',
      ),
      Param(
        type = 'GLshort',
        name = 'q',
      ),
    ],
  ),
  'glMultiTexCoord4svARB': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'const GLshort *',
        name = 'v',
      ),
    ],
  ),
  'imaxabs': Spec(
    return_type = 'intmax_t',
    parameters = [
      Param(
        type = 'intmax_t',
        name = '__n',
      ),
    ],
  ),
  'imaxdiv': Spec(
    return_type = 'imaxdiv_t',
    parameters = [
      Param(
        type = 'intmax_t',
        name = '__numer',
      ),
      Param(
        type = 'intmax_t',
        name = '__denom',
      ),
    ],
  ),
  'strtoimax': Spec(
    return_type = 'intmax_t',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__nptr',
      ),
      Param(
        type = 'char **restrict',
        name = '__endptr',
      ),
      Param(
        type = 'int',
        name = '__base',
      ),
    ],
  ),
  'strtoumax': Spec(
    return_type = 'uintmax_t',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__nptr',
      ),
      Param(
        type = 'char **restrict',
        name = '__endptr',
      ),
      Param(
        type = 'int',
        name = '__base',
      ),
    ],
  ),
  'wcstoimax': Spec(
    return_type = 'intmax_t',
    parameters = [
      Param(
        type = 'const __gwchar_t *restrict',
        name = '__nptr',
      ),
      Param(
        type = '__gwchar_t **restrict',
        name = '__endptr',
      ),
      Param(
        type = 'int',
        name = '__base',
      ),
    ],
  ),
  'wcstoumax': Spec(
    return_type = 'uintmax_t',
    parameters = [
      Param(
        type = 'const __gwchar_t *restrict',
        name = '__nptr',
      ),
      Param(
        type = '__gwchar_t **restrict',
        name = '__endptr',
      ),
      Param(
        type = 'int',
        name = '__base',
      ),
    ],
  ),
  'glCreateDebugObjectMESA': Spec(
    return_type = 'GLhandleARB',
    parameters = [
    ],
  ),
  'glClearDebugLogMESA': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLhandleARB',
        name = 'obj',
      ),
      Param(
        type = 'GLenum',
        name = 'logType',
      ),
      Param(
        type = 'GLenum',
        name = 'shaderType',
      ),
    ],
  ),
  'glGetDebugLogMESA': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLhandleARB',
        name = 'obj',
      ),
      Param(
        type = 'GLenum',
        name = 'logType',
      ),
      Param(
        type = 'GLenum',
        name = 'shaderType',
      ),
      Param(
        type = 'GLsizei',
        name = 'maxLength',
      ),
      Param(
        type = 'GLsizei *',
        name = 'length',
      ),
      Param(
        type = 'GLcharARB *',
        name = 'debugLog',
      ),
    ],
  ),
  'glGetDebugLogLengthMESA': Spec(
    return_type = 'GLsizei',
    parameters = [
      Param(
        type = 'GLhandleARB',
        name = 'obj',
      ),
      Param(
        type = 'GLenum',
        name = 'logType',
      ),
      Param(
        type = 'GLenum',
        name = 'shaderType',
      ),
    ],
  ),
  'glProgramCallbackMESA': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLprogramcallbackMESA',
        name = 'callback',
      ),
      Param(
        type = 'GLvoid *',
        name = 'data',
      ),
    ],
  ),
  'glGetProgramRegisterfvMESA': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'target',
      ),
      Param(
        type = 'GLsizei',
        name = 'len',
      ),
      Param(
        type = 'const GLubyte *',
        name = 'name',
      ),
      Param(
        type = 'GLfloat *',
        name = 'v',
      ),
    ],
  ),
  'glBlendEquationSeparateATI': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLenum',
        name = 'modeRGB',
      ),
      Param(
        type = 'GLenum',
        name = 'modeA',
      ),
    ],
  ),
  'cogl_object_set_user_data': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglObject *',
        name = 'object',
      ),
      Param(
        type = 'CoglUserDataKey *',
        name = 'key',
      ),
      Param(
        type = 'void *',
        name = 'user_data',
      ),
      Param(
        type = 'CoglUserDataDestroyCallback',
        name = 'destroy',
      ),
    ],
  ),
  'cogl_object_get_user_data': Spec(
    return_type = 'void *',
    parameters = [
      Param(
        type = 'CoglObject *',
        name = 'object',
      ),
      Param(
        type = 'CoglUserDataKey *',
        name = 'key',
      ),
    ],
  ),
  'g_type_init': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_type_init_with_debug_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTypeDebugFlags',
        name = 'debug_flags',
      ),
    ],
  ),
  'g_type_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_qname': Spec(
    return_type = 'GQuark',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_from_name': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_type_parent': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_depth': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_next_base': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GType',
        name = 'leaf_type',
      ),
      Param(
        type = 'GType',
        name = 'root_type',
      ),
    ],
  ),
  'g_type_is_a': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
      Param(
        type = 'GType',
        name = 'is_a_type',
      ),
    ],
  ),
  'g_type_class_ref': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_class_peek': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_class_peek_static': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_class_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'g_class',
      ),
    ],
  ),
  'g_type_class_peek_parent': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'g_class',
      ),
    ],
  ),
  'g_type_interface_peek': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance_class',
      ),
      Param(
        type = 'GType',
        name = 'iface_type',
      ),
    ],
  ),
  'g_type_interface_peek_parent': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'g_iface',
      ),
    ],
  ),
  'g_type_default_interface_ref': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'g_type',
      ),
    ],
  ),
  'g_type_default_interface_peek': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'g_type',
      ),
    ],
  ),
  'g_type_default_interface_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'g_iface',
      ),
    ],
  ),
  'g_type_children': Spec(
    return_type = 'GType *',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
      Param(
        type = 'guint *',
        name = 'n_children',
      ),
    ],
  ),
  'g_type_interfaces': Spec(
    return_type = 'GType *',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
      Param(
        type = 'guint *',
        name = 'n_interfaces',
      ),
    ],
  ),
  'g_type_set_qdata': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_type_get_qdata': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
    ],
  ),
  'g_type_query': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
      Param(
        type = 'GTypeQuery *',
        name = 'query',
      ),
    ],
  ),
  'g_type_register_static': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GType',
        name = 'parent_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'type_name',
      ),
      Param(
        type = 'const GTypeInfo *',
        name = 'info',
      ),
      Param(
        type = 'GTypeFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_type_register_static_simple': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GType',
        name = 'parent_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'type_name',
      ),
      Param(
        type = 'guint',
        name = 'class_size',
      ),
      Param(
        type = 'GClassInitFunc',
        name = 'class_init',
      ),
      Param(
        type = 'guint',
        name = 'instance_size',
      ),
      Param(
        type = 'GInstanceInitFunc',
        name = 'instance_init',
      ),
      Param(
        type = 'GTypeFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_type_register_dynamic': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GType',
        name = 'parent_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'type_name',
      ),
      Param(
        type = 'GTypePlugin *',
        name = 'plugin',
      ),
      Param(
        type = 'GTypeFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_type_register_fundamental': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GType',
        name = 'type_id',
      ),
      Param(
        type = 'const gchar *',
        name = 'type_name',
      ),
      Param(
        type = 'const GTypeInfo *',
        name = 'info',
      ),
      Param(
        type = 'const GTypeFundamentalInfo *',
        name = 'finfo',
      ),
      Param(
        type = 'GTypeFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_type_add_interface_static': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'instance_type',
      ),
      Param(
        type = 'GType',
        name = 'interface_type',
      ),
      Param(
        type = 'const GInterfaceInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_type_add_interface_dynamic': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'instance_type',
      ),
      Param(
        type = 'GType',
        name = 'interface_type',
      ),
      Param(
        type = 'GTypePlugin *',
        name = 'plugin',
      ),
    ],
  ),
  'g_type_interface_add_prerequisite': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'interface_type',
      ),
      Param(
        type = 'GType',
        name = 'prerequisite_type',
      ),
    ],
  ),
  'g_type_interface_prerequisites': Spec(
    return_type = 'GType *',
    parameters = [
      Param(
        type = 'GType',
        name = 'interface_type',
      ),
      Param(
        type = 'guint *',
        name = 'n_prerequisites',
      ),
    ],
  ),
  'g_type_class_add_private': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'g_class',
      ),
      Param(
        type = 'gsize',
        name = 'private_size',
      ),
    ],
  ),
  'g_type_instance_get_private': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTypeInstance *',
        name = 'instance',
      ),
      Param(
        type = 'GType',
        name = 'private_type',
      ),
    ],
  ),
  'g_type_add_class_private': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'class_type',
      ),
      Param(
        type = 'gsize',
        name = 'private_size',
      ),
    ],
  ),
  'g_type_class_get_private': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTypeClass *',
        name = 'klass',
      ),
      Param(
        type = 'GType',
        name = 'private_type',
      ),
    ],
  ),
  'g_type_ensure': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_get_plugin': Spec(
    return_type = 'GTypePlugin *',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_interface_get_plugin': Spec(
    return_type = 'GTypePlugin *',
    parameters = [
      Param(
        type = 'GType',
        name = 'instance_type',
      ),
      Param(
        type = 'GType',
        name = 'interface_type',
      ),
    ],
  ),
  'g_type_fundamental_next': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_type_fundamental': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GType',
        name = 'type_id',
      ),
    ],
  ),
  'g_type_create_instance': Spec(
    return_type = 'GTypeInstance *',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_free_instance': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTypeInstance *',
        name = 'instance',
      ),
    ],
  ),
  'g_type_add_class_cache_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'cache_data',
      ),
      Param(
        type = 'GTypeClassCacheFunc',
        name = 'cache_func',
      ),
    ],
  ),
  'g_type_remove_class_cache_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'cache_data',
      ),
      Param(
        type = 'GTypeClassCacheFunc',
        name = 'cache_func',
      ),
    ],
  ),
  'g_type_class_unref_uncached': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'g_class',
      ),
    ],
  ),
  'g_type_add_interface_check': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'check_data',
      ),
      Param(
        type = 'GTypeInterfaceCheckFunc',
        name = 'check_func',
      ),
    ],
  ),
  'g_type_remove_interface_check': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'check_data',
      ),
      Param(
        type = 'GTypeInterfaceCheckFunc',
        name = 'check_func',
      ),
    ],
  ),
  'g_type_value_table_peek': Spec(
    return_type = 'GTypeValueTable *',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_check_instance': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTypeInstance *',
        name = 'instance',
      ),
    ],
  ),
  'g_type_check_instance_cast': Spec(
    return_type = 'GTypeInstance *',
    parameters = [
      Param(
        type = 'GTypeInstance *',
        name = 'instance',
      ),
      Param(
        type = 'GType',
        name = 'iface_type',
      ),
    ],
  ),
  'g_type_check_instance_is_a': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTypeInstance *',
        name = 'instance',
      ),
      Param(
        type = 'GType',
        name = 'iface_type',
      ),
    ],
  ),
  'g_type_check_class_cast': Spec(
    return_type = 'GTypeClass *',
    parameters = [
      Param(
        type = 'GTypeClass *',
        name = 'g_class',
      ),
      Param(
        type = 'GType',
        name = 'is_a_type',
      ),
    ],
  ),
  'g_type_check_class_is_a': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTypeClass *',
        name = 'g_class',
      ),
      Param(
        type = 'GType',
        name = 'is_a_type',
      ),
    ],
  ),
  'g_type_check_is_value_type': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_check_value': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_type_check_value_holds': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_test_flags': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
      Param(
        type = 'guint',
        name = 'flags',
      ),
    ],
  ),
  'g_type_name_from_instance': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GTypeInstance *',
        name = 'instance',
      ),
    ],
  ),
  'g_type_name_from_class': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GTypeClass *',
        name = 'g_class',
      ),
    ],
  ),
  'g_value_init': Spec(
    return_type = 'GValue *',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'GType',
        name = 'g_type',
      ),
    ],
  ),
  'g_value_copy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'src_value',
      ),
      Param(
        type = 'GValue *',
        name = 'dest_value',
      ),
    ],
  ),
  'g_value_reset': Spec(
    return_type = 'GValue *',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_unset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_instance': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
    ],
  ),
  'g_value_fits_pointer': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_peek_pointer': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_type_compatible': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GType',
        name = 'src_type',
      ),
      Param(
        type = 'GType',
        name = 'dest_type',
      ),
    ],
  ),
  'g_value_type_transformable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GType',
        name = 'src_type',
      ),
      Param(
        type = 'GType',
        name = 'dest_type',
      ),
    ],
  ),
  'g_value_transform': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'src_value',
      ),
      Param(
        type = 'GValue *',
        name = 'dest_value',
      ),
    ],
  ),
  'g_value_register_transform_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'src_type',
      ),
      Param(
        type = 'GType',
        name = 'dest_type',
      ),
      Param(
        type = 'GValueTransform',
        name = 'transform_func',
      ),
    ],
  ),
  'g_param_spec_ref': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_param_spec_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_param_spec_sink': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_param_spec_ref_sink': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_param_spec_get_qdata': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
    ],
  ),
  'g_param_spec_set_qdata': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_param_spec_set_qdata_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'g_param_spec_steal_qdata': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
    ],
  ),
  'g_param_spec_get_redirect_target': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_param_value_set_default': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_param_value_defaults': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_param_value_validate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_param_value_convert': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'const GValue *',
        name = 'src_value',
      ),
      Param(
        type = 'GValue *',
        name = 'dest_value',
      ),
      Param(
        type = 'gboolean',
        name = 'strict_validation',
      ),
    ],
  ),
  'g_param_values_cmp': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'const GValue *',
        name = 'value1',
      ),
      Param(
        type = 'const GValue *',
        name = 'value2',
      ),
    ],
  ),
  'g_param_spec_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_param_spec_get_nick': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_param_spec_get_blurb': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_value_set_param': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'param',
      ),
    ],
  ),
  'g_value_get_param': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_dup_param': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_take_param': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'param',
      ),
    ],
  ),
  'g_value_set_param_take_ownership': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'param',
      ),
    ],
  ),
  'g_param_type_register_static': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GParamSpecTypeInfo *',
        name = 'pspec_info',
      ),
    ],
  ),
  '_g_param_type_register_static_constant': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GParamSpecTypeInfo *',
        name = 'pspec_info',
      ),
      Param(
        type = 'GType',
        name = 'opt_type',
      ),
    ],
  ),
  'g_param_spec_internal': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'param_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_pool_new': Spec(
    return_type = 'GParamSpecPool *',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'type_prefixing',
      ),
    ],
  ),
  'g_param_spec_pool_insert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GParamSpecPool *',
        name = 'pool',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'GType',
        name = 'owner_type',
      ),
    ],
  ),
  'g_param_spec_pool_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GParamSpecPool *',
        name = 'pool',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_param_spec_pool_lookup': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'GParamSpecPool *',
        name = 'pool',
      ),
      Param(
        type = 'const gchar *',
        name = 'param_name',
      ),
      Param(
        type = 'GType',
        name = 'owner_type',
      ),
      Param(
        type = 'gboolean',
        name = 'walk_ancestors',
      ),
    ],
  ),
  'g_param_spec_pool_list_owned': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GParamSpecPool *',
        name = 'pool',
      ),
      Param(
        type = 'GType',
        name = 'owner_type',
      ),
    ],
  ),
  'g_param_spec_pool_list': Spec(
    return_type = 'GParamSpec **',
    parameters = [
      Param(
        type = 'GParamSpecPool *',
        name = 'pool',
      ),
      Param(
        type = 'GType',
        name = 'owner_type',
      ),
      Param(
        type = 'guint *',
        name = 'n_pspecs_p',
      ),
    ],
  ),
  'g_cclosure_new': Spec(
    return_type = 'GClosure *',
    parameters = [
      Param(
        type = 'GCallback',
        name = 'callback_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GClosureNotify',
        name = 'destroy_data',
      ),
    ],
  ),
  'g_cclosure_new_swap': Spec(
    return_type = 'GClosure *',
    parameters = [
      Param(
        type = 'GCallback',
        name = 'callback_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GClosureNotify',
        name = 'destroy_data',
      ),
    ],
  ),
  'g_signal_type_cclosure_new': Spec(
    return_type = 'GClosure *',
    parameters = [
      Param(
        type = 'GType',
        name = 'itype',
      ),
      Param(
        type = 'guint',
        name = 'struct_offset',
      ),
    ],
  ),
  'g_closure_ref': Spec(
    return_type = 'GClosure *',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
    ],
  ),
  'g_closure_sink': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
    ],
  ),
  'g_closure_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
    ],
  ),
  'g_closure_new_simple': Spec(
    return_type = 'GClosure *',
    parameters = [
      Param(
        type = 'guint',
        name = 'sizeof_closure',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_closure_add_finalize_notifier': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gpointer',
        name = 'notify_data',
      ),
      Param(
        type = 'GClosureNotify',
        name = 'notify_func',
      ),
    ],
  ),
  'g_closure_remove_finalize_notifier': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gpointer',
        name = 'notify_data',
      ),
      Param(
        type = 'GClosureNotify',
        name = 'notify_func',
      ),
    ],
  ),
  'g_closure_add_invalidate_notifier': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gpointer',
        name = 'notify_data',
      ),
      Param(
        type = 'GClosureNotify',
        name = 'notify_func',
      ),
    ],
  ),
  'g_closure_remove_invalidate_notifier': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gpointer',
        name = 'notify_data',
      ),
      Param(
        type = 'GClosureNotify',
        name = 'notify_func',
      ),
    ],
  ),
  'g_closure_add_marshal_guards': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gpointer',
        name = 'pre_marshal_data',
      ),
      Param(
        type = 'GClosureNotify',
        name = 'pre_marshal_notify',
      ),
      Param(
        type = 'gpointer',
        name = 'post_marshal_data',
      ),
      Param(
        type = 'GClosureNotify',
        name = 'post_marshal_notify',
      ),
    ],
  ),
  'g_closure_set_marshal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GClosureMarshal',
        name = 'marshal',
      ),
    ],
  ),
  'g_closure_set_meta_marshal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'GClosureMarshal',
        name = 'meta_marshal',
      ),
    ],
  ),
  'g_closure_invalidate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
    ],
  ),
  'g_closure_invoke': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
    ],
  ),
  'g_cclosure_marshal_generic': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_gvalue',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_generic_va': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args_list',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__VOID': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__VOIDv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__BOOLEAN': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__BOOLEANv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__CHAR': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__CHARv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__UCHAR': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__UCHARv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__INT': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__INTv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__UINT': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__UINTv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__LONG': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__LONGv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__ULONG': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__ULONGv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__ENUM': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__ENUMv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__FLAGS': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__FLAGSv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__FLOAT': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__FLOATv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__DOUBLE': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__DOUBLEv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__STRING': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__STRINGv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__PARAM': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__PARAMv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__BOXED': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__BOXEDv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__POINTER': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__POINTERv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__OBJECT': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__OBJECTv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__VARIANT': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__VARIANTv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__UINT_POINTER': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__UINT_POINTERv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_BOOLEAN__FLAGS': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_BOOLEAN__FLAGSv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_STRING__OBJECT_POINTER': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_STRING__OBJECT_POINTERv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_BOOLEAN__BOXED_BOXED': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_signal_newv': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'signal_name',
      ),
      Param(
        type = 'GType',
        name = 'itype',
      ),
      Param(
        type = 'GSignalFlags',
        name = 'signal_flags',
      ),
      Param(
        type = 'GClosure *',
        name = 'class_closure',
      ),
      Param(
        type = 'GSignalAccumulator',
        name = 'accumulator',
      ),
      Param(
        type = 'gpointer',
        name = 'accu_data',
      ),
      Param(
        type = 'GSignalCMarshaller',
        name = 'c_marshaller',
      ),
      Param(
        type = 'GType',
        name = 'return_type',
      ),
      Param(
        type = 'guint',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_signal_new_valist': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'signal_name',
      ),
      Param(
        type = 'GType',
        name = 'itype',
      ),
      Param(
        type = 'GSignalFlags',
        name = 'signal_flags',
      ),
      Param(
        type = 'GClosure *',
        name = 'class_closure',
      ),
      Param(
        type = 'GSignalAccumulator',
        name = 'accumulator',
      ),
      Param(
        type = 'gpointer',
        name = 'accu_data',
      ),
      Param(
        type = 'GSignalCMarshaller',
        name = 'c_marshaller',
      ),
      Param(
        type = 'GType',
        name = 'return_type',
      ),
      Param(
        type = 'guint',
        name = 'n_params',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'g_signal_new': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'signal_name',
      ),
      Param(
        type = 'GType',
        name = 'itype',
      ),
      Param(
        type = 'GSignalFlags',
        name = 'signal_flags',
      ),
      Param(
        type = 'guint',
        name = 'class_offset',
      ),
      Param(
        type = 'GSignalAccumulator',
        name = 'accumulator',
      ),
      Param(
        type = 'gpointer',
        name = 'accu_data',
      ),
      Param(
        type = 'GSignalCMarshaller',
        name = 'c_marshaller',
      ),
      Param(
        type = 'GType',
        name = 'return_type',
      ),
      Param(
        type = 'guint',
        name = 'n_params',
      ),
    ],
  ),
  'g_signal_new_class_handler': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'signal_name',
      ),
      Param(
        type = 'GType',
        name = 'itype',
      ),
      Param(
        type = 'GSignalFlags',
        name = 'signal_flags',
      ),
      Param(
        type = 'GCallback',
        name = 'class_handler',
      ),
      Param(
        type = 'GSignalAccumulator',
        name = 'accumulator',
      ),
      Param(
        type = 'gpointer',
        name = 'accu_data',
      ),
      Param(
        type = 'GSignalCMarshaller',
        name = 'c_marshaller',
      ),
      Param(
        type = 'GType',
        name = 'return_type',
      ),
      Param(
        type = 'guint',
        name = 'n_params',
      ),
    ],
  ),
  'g_signal_set_va_marshaller': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GType',
        name = 'instance_type',
      ),
      Param(
        type = 'GSignalCVaMarshaller',
        name = 'va_marshaller',
      ),
    ],
  ),
  'g_signal_emitv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'instance_and_params',
      ),
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GQuark',
        name = 'detail',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
    ],
  ),
  'g_signal_emit_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GQuark',
        name = 'detail',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'g_signal_emit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GQuark',
        name = 'detail',
      ),
    ],
  ),
  'g_signal_emit_by_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'const gchar *',
        name = 'detailed_signal',
      ),
    ],
  ),
  'g_signal_lookup': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GType',
        name = 'itype',
      ),
    ],
  ),
  'g_signal_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
    ],
  ),
  'g_signal_query': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GSignalQuery *',
        name = 'query',
      ),
    ],
  ),
  'g_signal_list_ids': Spec(
    return_type = 'guint *',
    parameters = [
      Param(
        type = 'GType',
        name = 'itype',
      ),
      Param(
        type = 'guint *',
        name = 'n_ids',
      ),
    ],
  ),
  'g_signal_parse_name': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'detailed_signal',
      ),
      Param(
        type = 'GType',
        name = 'itype',
      ),
      Param(
        type = 'guint *',
        name = 'signal_id_p',
      ),
      Param(
        type = 'GQuark *',
        name = 'detail_p',
      ),
      Param(
        type = 'gboolean',
        name = 'force_detail_quark',
      ),
    ],
  ),
  'g_signal_get_invocation_hint': Spec(
    return_type = 'GSignalInvocationHint *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
    ],
  ),
  'g_signal_stop_emission': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GQuark',
        name = 'detail',
      ),
    ],
  ),
  'g_signal_stop_emission_by_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'const gchar *',
        name = 'detailed_signal',
      ),
    ],
  ),
  'g_signal_add_emission_hook': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GQuark',
        name = 'detail',
      ),
      Param(
        type = 'GSignalEmissionHook',
        name = 'hook_func',
      ),
      Param(
        type = 'gpointer',
        name = 'hook_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'data_destroy',
      ),
    ],
  ),
  'g_signal_remove_emission_hook': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'gulong',
        name = 'hook_id',
      ),
    ],
  ),
  'g_signal_has_handler_pending': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GQuark',
        name = 'detail',
      ),
      Param(
        type = 'gboolean',
        name = 'may_be_blocked',
      ),
    ],
  ),
  'g_signal_connect_closure_by_id': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GQuark',
        name = 'detail',
      ),
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gboolean',
        name = 'after',
      ),
    ],
  ),
  'g_signal_connect_closure': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'const gchar *',
        name = 'detailed_signal',
      ),
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gboolean',
        name = 'after',
      ),
    ],
  ),
  'g_signal_connect_data': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'const gchar *',
        name = 'detailed_signal',
      ),
      Param(
        type = 'GCallback',
        name = 'c_handler',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GClosureNotify',
        name = 'destroy_data',
      ),
      Param(
        type = 'GConnectFlags',
        name = 'connect_flags',
      ),
    ],
  ),
  'g_signal_handler_block': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'gulong',
        name = 'handler_id',
      ),
    ],
  ),
  'g_signal_handler_unblock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'gulong',
        name = 'handler_id',
      ),
    ],
  ),
  'g_signal_handler_disconnect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'gulong',
        name = 'handler_id',
      ),
    ],
  ),
  'g_signal_handler_is_connected': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'gulong',
        name = 'handler_id',
      ),
    ],
  ),
  'g_signal_handler_find': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'GSignalMatchType',
        name = 'mask',
      ),
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GQuark',
        name = 'detail',
      ),
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gpointer',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_signal_handlers_block_matched': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'GSignalMatchType',
        name = 'mask',
      ),
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GQuark',
        name = 'detail',
      ),
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gpointer',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_signal_handlers_unblock_matched': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'GSignalMatchType',
        name = 'mask',
      ),
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GQuark',
        name = 'detail',
      ),
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gpointer',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_signal_handlers_disconnect_matched': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'GSignalMatchType',
        name = 'mask',
      ),
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GQuark',
        name = 'detail',
      ),
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gpointer',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_signal_override_class_closure': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GType',
        name = 'instance_type',
      ),
      Param(
        type = 'GClosure *',
        name = 'class_closure',
      ),
    ],
  ),
  'g_signal_override_class_handler': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'signal_name',
      ),
      Param(
        type = 'GType',
        name = 'instance_type',
      ),
      Param(
        type = 'GCallback',
        name = 'class_handler',
      ),
    ],
  ),
  'g_signal_chain_from_overridden': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'instance_and_params',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
    ],
  ),
  'g_signal_chain_from_overridden_handler': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
    ],
  ),
  'g_signal_accumulator_true_handled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSignalInvocationHint *',
        name = 'ihint',
      ),
      Param(
        type = 'GValue *',
        name = 'return_accu',
      ),
      Param(
        type = 'const GValue *',
        name = 'handler_return',
      ),
      Param(
        type = 'gpointer',
        name = 'dummy',
      ),
    ],
  ),
  'g_signal_accumulator_first_wins': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSignalInvocationHint *',
        name = 'ihint',
      ),
      Param(
        type = 'GValue *',
        name = 'return_accu',
      ),
      Param(
        type = 'const GValue *',
        name = 'handler_return',
      ),
      Param(
        type = 'gpointer',
        name = 'dummy',
      ),
    ],
  ),
  'g_signal_handlers_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
    ],
  ),
  '_g_signals_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'itype',
      ),
    ],
  ),
  'g_date_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_strv_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_gstring_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_hash_table_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_array_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_byte_array_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_ptr_array_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_bytes_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_variant_type_get_gtype': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_regex_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_match_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_date_time_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_time_zone_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_io_channel_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_io_condition_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_variant_builder_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_key_file_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_main_loop_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_main_context_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_source_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_pollfd_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_thread_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_variant_get_gtype': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_boxed_copy': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'boxed_type',
      ),
      Param(
        type = 'gconstpointer',
        name = 'src_boxed',
      ),
    ],
  ),
  'g_boxed_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'boxed_type',
      ),
      Param(
        type = 'gpointer',
        name = 'boxed',
      ),
    ],
  ),
  'g_value_set_boxed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gconstpointer',
        name = 'v_boxed',
      ),
    ],
  ),
  'g_value_set_static_boxed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gconstpointer',
        name = 'v_boxed',
      ),
    ],
  ),
  'g_value_take_boxed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gconstpointer',
        name = 'v_boxed',
      ),
    ],
  ),
  'g_value_set_boxed_take_ownership': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gconstpointer',
        name = 'v_boxed',
      ),
    ],
  ),
  'g_value_get_boxed': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_dup_boxed': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_boxed_type_register_static': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GBoxedCopyFunc',
        name = 'boxed_copy',
      ),
      Param(
        type = 'GBoxedFreeFunc',
        name = 'boxed_free',
      ),
    ],
  ),
  'g_closure_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_value_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_initially_unowned_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_object_class_install_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObjectClass *',
        name = 'oclass',
      ),
      Param(
        type = 'guint',
        name = 'property_id',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_object_class_find_property': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'GObjectClass *',
        name = 'oclass',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
    ],
  ),
  'g_object_class_list_properties': Spec(
    return_type = 'GParamSpec **',
    parameters = [
      Param(
        type = 'GObjectClass *',
        name = 'oclass',
      ),
      Param(
        type = 'guint *',
        name = 'n_properties',
      ),
    ],
  ),
  'g_object_class_override_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObjectClass *',
        name = 'oclass',
      ),
      Param(
        type = 'guint',
        name = 'property_id',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_object_class_install_properties': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObjectClass *',
        name = 'oclass',
      ),
      Param(
        type = 'guint',
        name = 'n_pspecs',
      ),
      Param(
        type = 'GParamSpec **',
        name = 'pspecs',
      ),
    ],
  ),
  'g_object_interface_install_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'g_iface',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_object_interface_find_property': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'g_iface',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
    ],
  ),
  'g_object_interface_list_properties': Spec(
    return_type = 'GParamSpec **',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'g_iface',
      ),
      Param(
        type = 'guint *',
        name = 'n_properties_p',
      ),
    ],
  ),
  'g_object_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_object_new': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'object_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
    ],
  ),
  'g_object_newv': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'object_type',
      ),
      Param(
        type = 'guint',
        name = 'n_parameters',
      ),
      Param(
        type = 'GParameter *',
        name = 'parameters',
      ),
    ],
  ),
  'g_object_new_valist': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'GType',
        name = 'object_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'g_object_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
    ],
  ),
  'g_object_get': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
    ],
  ),
  'g_object_connect': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'signal_spec',
      ),
    ],
  ),
  'g_object_disconnect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'signal_spec',
      ),
    ],
  ),
  'g_object_set_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'g_object_get_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'g_object_set_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_object_get_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_object_freeze_notify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
    ],
  ),
  'g_object_notify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
    ],
  ),
  'g_object_notify_by_pspec': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_object_thaw_notify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
    ],
  ),
  'g_object_is_floating': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'object',
      ),
    ],
  ),
  'g_object_ref_sink': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'object',
      ),
    ],
  ),
  'g_object_ref': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'object',
      ),
    ],
  ),
  'g_object_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'object',
      ),
    ],
  ),
  'g_object_weak_ref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GWeakNotify',
        name = 'notify',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_object_weak_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GWeakNotify',
        name = 'notify',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_object_add_weak_pointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'gpointer *',
        name = 'weak_pointer_location',
      ),
    ],
  ),
  'g_object_remove_weak_pointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'gpointer *',
        name = 'weak_pointer_location',
      ),
    ],
  ),
  'g_object_add_toggle_ref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GToggleNotify',
        name = 'notify',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_object_remove_toggle_ref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GToggleNotify',
        name = 'notify',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_object_get_qdata': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
    ],
  ),
  'g_object_set_qdata': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_object_set_qdata_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'g_object_steal_qdata': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
    ],
  ),
  'g_object_dup_qdata': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
      Param(
        type = 'GDuplicateFunc',
        name = 'dup_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_object_replace_qdata': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
      Param(
        type = 'gpointer',
        name = 'oldval',
      ),
      Param(
        type = 'gpointer',
        name = 'newval',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
      Param(
        type = 'GDestroyNotify *',
        name = 'old_destroy',
      ),
    ],
  ),
  'g_object_get_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_object_set_data': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_object_set_data_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'g_object_steal_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_object_dup_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GDuplicateFunc',
        name = 'dup_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_object_replace_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'oldval',
      ),
      Param(
        type = 'gpointer',
        name = 'newval',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
      Param(
        type = 'GDestroyNotify *',
        name = 'old_destroy',
      ),
    ],
  ),
  'g_object_watch_closure': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
    ],
  ),
  'g_cclosure_new_object': Spec(
    return_type = 'GClosure *',
    parameters = [
      Param(
        type = 'GCallback',
        name = 'callback_func',
      ),
      Param(
        type = 'GObject *',
        name = 'object',
      ),
    ],
  ),
  'g_cclosure_new_object_swap': Spec(
    return_type = 'GClosure *',
    parameters = [
      Param(
        type = 'GCallback',
        name = 'callback_func',
      ),
      Param(
        type = 'GObject *',
        name = 'object',
      ),
    ],
  ),
  'g_closure_new_object': Spec(
    return_type = 'GClosure *',
    parameters = [
      Param(
        type = 'guint',
        name = 'sizeof_closure',
      ),
      Param(
        type = 'GObject *',
        name = 'object',
      ),
    ],
  ),
  'g_value_set_object': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gpointer',
        name = 'v_object',
      ),
    ],
  ),
  'g_value_get_object': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_dup_object': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_signal_connect_object': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'const gchar *',
        name = 'detailed_signal',
      ),
      Param(
        type = 'GCallback',
        name = 'c_handler',
      ),
      Param(
        type = 'gpointer',
        name = 'gobject',
      ),
      Param(
        type = 'GConnectFlags',
        name = 'connect_flags',
      ),
    ],
  ),
  'g_object_force_floating': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
    ],
  ),
  'g_object_run_dispose': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
    ],
  ),
  'g_value_take_object': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gpointer',
        name = 'v_object',
      ),
    ],
  ),
  'g_value_set_object_take_ownership': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gpointer',
        name = 'v_object',
      ),
    ],
  ),
  'g_object_compat_control': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'gsize',
        name = 'what',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_clear_object': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'volatile GObject **',
        name = 'object_ptr',
      ),
    ],
  ),
  'g_weak_ref_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GWeakRef *',
        name = 'weak_ref',
      ),
      Param(
        type = 'gpointer',
        name = 'object',
      ),
    ],
  ),
  'g_weak_ref_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GWeakRef *',
        name = 'weak_ref',
      ),
    ],
  ),
  'g_weak_ref_get': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GWeakRef *',
        name = 'weak_ref',
      ),
    ],
  ),
  'g_weak_ref_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GWeakRef *',
        name = 'weak_ref',
      ),
      Param(
        type = 'gpointer',
        name = 'object',
      ),
    ],
  ),
  'g_binding_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_binding_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_binding_get_flags': Spec(
    return_type = 'GBindingFlags',
    parameters = [
      Param(
        type = 'GBinding *',
        name = 'binding',
      ),
    ],
  ),
  'g_binding_get_source': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'GBinding *',
        name = 'binding',
      ),
    ],
  ),
  'g_binding_get_target': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'GBinding *',
        name = 'binding',
      ),
    ],
  ),
  'g_binding_get_source_property': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GBinding *',
        name = 'binding',
      ),
    ],
  ),
  'g_binding_get_target_property': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GBinding *',
        name = 'binding',
      ),
    ],
  ),
  'g_object_bind_property': Spec(
    return_type = 'GBinding *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'source',
      ),
      Param(
        type = 'const gchar *',
        name = 'source_property',
      ),
      Param(
        type = 'gpointer',
        name = 'target',
      ),
      Param(
        type = 'const gchar *',
        name = 'target_property',
      ),
      Param(
        type = 'GBindingFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_object_bind_property_full': Spec(
    return_type = 'GBinding *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'source',
      ),
      Param(
        type = 'const gchar *',
        name = 'source_property',
      ),
      Param(
        type = 'gpointer',
        name = 'target',
      ),
      Param(
        type = 'const gchar *',
        name = 'target_property',
      ),
      Param(
        type = 'GBindingFlags',
        name = 'flags',
      ),
      Param(
        type = 'GBindingTransformFunc',
        name = 'transform_to',
      ),
      Param(
        type = 'GBindingTransformFunc',
        name = 'transform_from',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_object_bind_property_with_closures': Spec(
    return_type = 'GBinding *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'source',
      ),
      Param(
        type = 'const gchar *',
        name = 'source_property',
      ),
      Param(
        type = 'gpointer',
        name = 'target',
      ),
      Param(
        type = 'const gchar *',
        name = 'target_property',
      ),
      Param(
        type = 'GBindingFlags',
        name = 'flags',
      ),
      Param(
        type = 'GClosure *',
        name = 'transform_to',
      ),
      Param(
        type = 'GClosure *',
        name = 'transform_from',
      ),
    ],
  ),
  'g_enum_get_value': Spec(
    return_type = 'GEnumValue *',
    parameters = [
      Param(
        type = 'GEnumClass *',
        name = 'enum_class',
      ),
      Param(
        type = 'gint',
        name = 'value',
      ),
    ],
  ),
  'g_enum_get_value_by_name': Spec(
    return_type = 'GEnumValue *',
    parameters = [
      Param(
        type = 'GEnumClass *',
        name = 'enum_class',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_enum_get_value_by_nick': Spec(
    return_type = 'GEnumValue *',
    parameters = [
      Param(
        type = 'GEnumClass *',
        name = 'enum_class',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
    ],
  ),
  'g_flags_get_first_value': Spec(
    return_type = 'GFlagsValue *',
    parameters = [
      Param(
        type = 'GFlagsClass *',
        name = 'flags_class',
      ),
      Param(
        type = 'guint',
        name = 'value',
      ),
    ],
  ),
  'g_flags_get_value_by_name': Spec(
    return_type = 'GFlagsValue *',
    parameters = [
      Param(
        type = 'GFlagsClass *',
        name = 'flags_class',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_flags_get_value_by_nick': Spec(
    return_type = 'GFlagsValue *',
    parameters = [
      Param(
        type = 'GFlagsClass *',
        name = 'flags_class',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
    ],
  ),
  'g_value_set_enum': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gint',
        name = 'v_enum',
      ),
    ],
  ),
  'g_value_get_enum': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'guint',
        name = 'v_flags',
      ),
    ],
  ),
  'g_value_get_flags': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_enum_register_static': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GEnumValue *',
        name = 'const_static_values',
      ),
    ],
  ),
  'g_flags_register_static': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GFlagsValue *',
        name = 'const_static_values',
      ),
    ],
  ),
  'g_enum_complete_type_info': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'g_enum_type',
      ),
      Param(
        type = 'GTypeInfo *',
        name = 'info',
      ),
      Param(
        type = 'const GEnumValue *',
        name = 'const_values',
      ),
    ],
  ),
  'g_flags_complete_type_info': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'g_flags_type',
      ),
      Param(
        type = 'GTypeInfo *',
        name = 'info',
      ),
      Param(
        type = 'const GFlagsValue *',
        name = 'const_values',
      ),
    ],
  ),
  'g_param_spec_char': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'gint8',
        name = 'minimum',
      ),
      Param(
        type = 'gint8',
        name = 'maximum',
      ),
      Param(
        type = 'gint8',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_uchar': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'guint8',
        name = 'minimum',
      ),
      Param(
        type = 'guint8',
        name = 'maximum',
      ),
      Param(
        type = 'guint8',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_boolean': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'gboolean',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_int': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'gint',
        name = 'minimum',
      ),
      Param(
        type = 'gint',
        name = 'maximum',
      ),
      Param(
        type = 'gint',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_uint': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'guint',
        name = 'minimum',
      ),
      Param(
        type = 'guint',
        name = 'maximum',
      ),
      Param(
        type = 'guint',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_long': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'glong',
        name = 'minimum',
      ),
      Param(
        type = 'glong',
        name = 'maximum',
      ),
      Param(
        type = 'glong',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_ulong': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'gulong',
        name = 'minimum',
      ),
      Param(
        type = 'gulong',
        name = 'maximum',
      ),
      Param(
        type = 'gulong',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_int64': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'gint64',
        name = 'minimum',
      ),
      Param(
        type = 'gint64',
        name = 'maximum',
      ),
      Param(
        type = 'gint64',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_uint64': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'guint64',
        name = 'minimum',
      ),
      Param(
        type = 'guint64',
        name = 'maximum',
      ),
      Param(
        type = 'guint64',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_unichar': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'gunichar',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_enum': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'GType',
        name = 'enum_type',
      ),
      Param(
        type = 'gint',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_flags': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'GType',
        name = 'flags_type',
      ),
      Param(
        type = 'guint',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_float': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'gfloat',
        name = 'minimum',
      ),
      Param(
        type = 'gfloat',
        name = 'maximum',
      ),
      Param(
        type = 'gfloat',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_double': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'gdouble',
        name = 'minimum',
      ),
      Param(
        type = 'gdouble',
        name = 'maximum',
      ),
      Param(
        type = 'gdouble',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_string': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'const gchar *',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_param': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'GType',
        name = 'param_type',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_boxed': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'GType',
        name = 'boxed_type',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_pointer': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_value_array': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'element_spec',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_object': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'GType',
        name = 'object_type',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_override': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'overridden',
      ),
    ],
  ),
  'g_param_spec_gtype': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'GType',
        name = 'is_a_type',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_variant': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
      Param(
        type = 'GVariant *',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_source_set_closure': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
    ],
  ),
  'g_source_set_dummy_callback': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
    ],
  ),
  'g_type_module_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_type_module_use': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTypeModule *',
        name = 'module',
      ),
    ],
  ),
  'g_type_module_unuse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTypeModule *',
        name = 'module',
      ),
    ],
  ),
  'g_type_module_set_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTypeModule *',
        name = 'module',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_type_module_register_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GTypeModule *',
        name = 'module',
      ),
      Param(
        type = 'GType',
        name = 'parent_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'type_name',
      ),
      Param(
        type = 'const GTypeInfo *',
        name = 'type_info',
      ),
      Param(
        type = 'GTypeFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_type_module_add_interface': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTypeModule *',
        name = 'module',
      ),
      Param(
        type = 'GType',
        name = 'instance_type',
      ),
      Param(
        type = 'GType',
        name = 'interface_type',
      ),
      Param(
        type = 'const GInterfaceInfo *',
        name = 'interface_info',
      ),
    ],
  ),
  'g_type_module_register_enum': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GTypeModule *',
        name = 'module',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GEnumValue *',
        name = 'const_static_values',
      ),
    ],
  ),
  'g_type_module_register_flags': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GTypeModule *',
        name = 'module',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GFlagsValue *',
        name = 'const_static_values',
      ),
    ],
  ),
  'g_type_plugin_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_type_plugin_use': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTypePlugin *',
        name = 'plugin',
      ),
    ],
  ),
  'g_type_plugin_unuse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTypePlugin *',
        name = 'plugin',
      ),
    ],
  ),
  'g_type_plugin_complete_type_info': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTypePlugin *',
        name = 'plugin',
      ),
      Param(
        type = 'GType',
        name = 'g_type',
      ),
      Param(
        type = 'GTypeInfo *',
        name = 'info',
      ),
      Param(
        type = 'GTypeValueTable *',
        name = 'value_table',
      ),
    ],
  ),
  'g_type_plugin_complete_interface_info': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTypePlugin *',
        name = 'plugin',
      ),
      Param(
        type = 'GType',
        name = 'instance_type',
      ),
      Param(
        type = 'GType',
        name = 'interface_type',
      ),
      Param(
        type = 'GInterfaceInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_value_array_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_value_array_get_nth': Spec(
    return_type = 'GValue *',
    parameters = [
      Param(
        type = 'GValueArray *',
        name = 'value_array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'g_value_array_new': Spec(
    return_type = 'GValueArray *',
    parameters = [
      Param(
        type = 'guint',
        name = 'n_prealloced',
      ),
    ],
  ),
  'g_value_array_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValueArray *',
        name = 'value_array',
      ),
    ],
  ),
  'g_value_array_copy': Spec(
    return_type = 'GValueArray *',
    parameters = [
      Param(
        type = 'const GValueArray *',
        name = 'value_array',
      ),
    ],
  ),
  'g_value_array_prepend': Spec(
    return_type = 'GValueArray *',
    parameters = [
      Param(
        type = 'GValueArray *',
        name = 'value_array',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_array_append': Spec(
    return_type = 'GValueArray *',
    parameters = [
      Param(
        type = 'GValueArray *',
        name = 'value_array',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_array_insert': Spec(
    return_type = 'GValueArray *',
    parameters = [
      Param(
        type = 'GValueArray *',
        name = 'value_array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_array_remove': Spec(
    return_type = 'GValueArray *',
    parameters = [
      Param(
        type = 'GValueArray *',
        name = 'value_array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'g_value_array_sort': Spec(
    return_type = 'GValueArray *',
    parameters = [
      Param(
        type = 'GValueArray *',
        name = 'value_array',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'compare_func',
      ),
    ],
  ),
  'g_value_array_sort_with_data': Spec(
    return_type = 'GValueArray *',
    parameters = [
      Param(
        type = 'GValueArray *',
        name = 'value_array',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'compare_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_value_set_char': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gchar',
        name = 'v_char',
      ),
    ],
  ),
  'g_value_get_char': Spec(
    return_type = 'gchar',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_schar': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gint8',
        name = 'v_char',
      ),
    ],
  ),
  'g_value_get_schar': Spec(
    return_type = 'gint8',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_uchar': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'guchar',
        name = 'v_uchar',
      ),
    ],
  ),
  'g_value_get_uchar': Spec(
    return_type = 'guchar',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_boolean': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gboolean',
        name = 'v_boolean',
      ),
    ],
  ),
  'g_value_get_boolean': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_int': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gint',
        name = 'v_int',
      ),
    ],
  ),
  'g_value_get_int': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_uint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'guint',
        name = 'v_uint',
      ),
    ],
  ),
  'g_value_get_uint': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_long': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'glong',
        name = 'v_long',
      ),
    ],
  ),
  'g_value_get_long': Spec(
    return_type = 'glong',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_ulong': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gulong',
        name = 'v_ulong',
      ),
    ],
  ),
  'g_value_get_ulong': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_int64': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gint64',
        name = 'v_int64',
      ),
    ],
  ),
  'g_value_get_int64': Spec(
    return_type = 'gint64',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_uint64': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'guint64',
        name = 'v_uint64',
      ),
    ],
  ),
  'g_value_get_uint64': Spec(
    return_type = 'guint64',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_float': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gfloat',
        name = 'v_float',
      ),
    ],
  ),
  'g_value_get_float': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_double': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gdouble',
        name = 'v_double',
      ),
    ],
  ),
  'g_value_get_double': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_string': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'const gchar *',
        name = 'v_string',
      ),
    ],
  ),
  'g_value_set_static_string': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'const gchar *',
        name = 'v_string',
      ),
    ],
  ),
  'g_value_get_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_dup_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_pointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gpointer',
        name = 'v_pointer',
      ),
    ],
  ),
  'g_value_get_pointer': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_gtype_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_value_set_gtype': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'GType',
        name = 'v_gtype',
      ),
    ],
  ),
  'g_value_get_gtype': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_variant': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'GVariant *',
        name = 'variant',
      ),
    ],
  ),
  'g_value_take_variant': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'GVariant *',
        name = 'variant',
      ),
    ],
  ),
  'g_value_get_variant': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_dup_variant': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_pointer_type_register_static': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_strdup_value_contents': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_take_string': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gchar *',
        name = 'v_string',
      ),
    ],
  ),
  'g_value_set_string_take_ownership': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gchar *',
        name = 'v_string',
      ),
    ],
  ),
  'cogl_handle_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_handle_ref': Spec(
    return_type = 'CoglHandle',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
    ],
  ),
  'cogl_handle_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
    ],
  ),
  'cogl_object_ref': Spec(
    return_type = 'void *',
    parameters = [
      Param(
        type = 'void *',
        name = 'object',
      ),
    ],
  ),
  'cogl_object_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'void *',
        name = 'object',
      ),
    ],
  ),
  'cogl_fixed_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_blend_string_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  '_cogl_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'cogl_is_buffer': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'void *',
        name = 'object',
      ),
    ],
  ),
  'cogl_buffer_get_size': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'CoglBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'cogl_buffer_set_update_hint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'CoglBufferUpdateHint',
        name = 'hint',
      ),
    ],
  ),
  'cogl_buffer_get_update_hint': Spec(
    return_type = 'CoglBufferUpdateHint',
    parameters = [
      Param(
        type = 'CoglBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'cogl_buffer_map': Spec(
    return_type = 'void *',
    parameters = [
      Param(
        type = 'CoglBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'CoglBufferAccess',
        name = 'access',
      ),
      Param(
        type = 'CoglBufferMapHint',
        name = 'hints',
      ),
    ],
  ),
  'cogl_buffer_unmap': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'cogl_buffer_set_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'CoglBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'offset',
      ),
      Param(
        type = 'const void *',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
    ],
  ),
  'cogl_swap_chain_new_EXP': Spec(
    return_type = 'CoglSwapChain *',
    parameters = [
    ],
  ),
  'cogl_swap_chain_set_has_alpha_EXP': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglSwapChain *',
        name = 'swap_chain',
      ),
      Param(
        type = 'gboolean',
        name = 'has_alpha',
      ),
    ],
  ),
  'cogl_swap_chain_set_length_EXP': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglSwapChain *',
        name = 'swap_chain',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
    ],
  ),
  'cogl_is_swap_chain': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'void *',
        name = 'object',
      ),
    ],
  ),
  'cogl_onscreen_template_new_EXP': Spec(
    return_type = 'CoglOnscreenTemplate *',
    parameters = [
      Param(
        type = 'CoglSwapChain *',
        name = 'swap_chain',
      ),
    ],
  ),
  'cogl_onscreen_template_set_samples_per_pixel': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglOnscreenTemplate *',
        name = 'onscreen_template',
      ),
      Param(
        type = 'int',
        name = 'n',
      ),
    ],
  ),
  'cogl_onscreen_template_set_swap_throttled': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglOnscreenTemplate *',
        name = 'onscreen_template',
      ),
      Param(
        type = 'gboolean',
        name = 'throttled',
      ),
    ],
  ),
  'cogl_is_onscreen_template': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'void *',
        name = 'object',
      ),
    ],
  ),
  'cogl_renderer_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'cogl_is_renderer': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'void *',
        name = 'object',
      ),
    ],
  ),
  'cogl_renderer_new': Spec(
    return_type = 'CoglRenderer *',
    parameters = [
    ],
  ),
  'cogl_renderer_set_winsys_id': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'CoglWinsysID',
        name = 'winsys_id',
      ),
    ],
  ),
  'cogl_renderer_get_winsys_id': Spec(
    return_type = 'CoglWinsysID',
    parameters = [
      Param(
        type = 'CoglRenderer *',
        name = 'renderer',
      ),
    ],
  ),
  'cogl_renderer_get_n_fragment_texture_units': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'CoglRenderer *',
        name = 'renderer',
      ),
    ],
  ),
  'cogl_renderer_check_onscreen_template': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'CoglRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'CoglOnscreenTemplate *',
        name = 'onscreen_template',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'cogl_renderer_connect': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'CoglRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'cogl_renderer_add_constraint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'CoglRendererConstraint',
        name = 'constraint',
      ),
    ],
  ),
  'cogl_renderer_remove_constraint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'CoglRendererConstraint',
        name = 'constraint',
      ),
    ],
  ),
  'cogl_renderer_set_driver': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'CoglDriver',
        name = 'driver',
      ),
    ],
  ),
  'cogl_renderer_get_driver': Spec(
    return_type = 'CoglDriver',
    parameters = [
      Param(
        type = 'CoglRenderer *',
        name = 'renderer',
      ),
    ],
  ),
  'cogl_display_new': Spec(
    return_type = 'CoglDisplay *',
    parameters = [
      Param(
        type = 'CoglRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'CoglOnscreenTemplate *',
        name = 'onscreen_template',
      ),
    ],
  ),
  'cogl_display_get_renderer': Spec(
    return_type = 'CoglRenderer *',
    parameters = [
      Param(
        type = 'CoglDisplay *',
        name = 'display',
      ),
    ],
  ),
  'cogl_display_setup': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'CoglDisplay *',
        name = 'display',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'cogl_is_display': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'void *',
        name = 'object',
      ),
    ],
  ),
  'cogl_vertex_buffer_new': Spec(
    return_type = 'CoglHandle',
    parameters = [
      Param(
        type = 'unsigned int',
        name = 'n_vertices',
      ),
    ],
  ),
  'cogl_vertex_buffer_get_n_vertices': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
    ],
  ),
  'cogl_vertex_buffer_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
      Param(
        type = 'const char *',
        name = 'attribute_name',
      ),
      Param(
        type = 'guint8',
        name = 'n_components',
      ),
      Param(
        type = 'CoglAttributeType',
        name = 'type',
      ),
      Param(
        type = 'gboolean',
        name = 'normalized',
      ),
      Param(
        type = 'guint16',
        name = 'stride',
      ),
      Param(
        type = 'const void *',
        name = 'pointer',
      ),
    ],
  ),
  'cogl_vertex_buffer_delete': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
      Param(
        type = 'const char *',
        name = 'attribute_name',
      ),
    ],
  ),
  'cogl_vertex_buffer_submit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
    ],
  ),
  'cogl_vertex_buffer_disable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
      Param(
        type = 'const char *',
        name = 'attribute_name',
      ),
    ],
  ),
  'cogl_vertex_buffer_enable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
      Param(
        type = 'const char *',
        name = 'attribute_name',
      ),
    ],
  ),
  'cogl_vertex_buffer_draw': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
      Param(
        type = 'CoglVerticesMode',
        name = 'mode',
      ),
      Param(
        type = 'int',
        name = 'first',
      ),
      Param(
        type = 'int',
        name = 'count',
      ),
    ],
  ),
  'cogl_vertex_buffer_indices_new': Spec(
    return_type = 'CoglHandle',
    parameters = [
      Param(
        type = 'CoglIndicesType',
        name = 'indices_type',
      ),
      Param(
        type = 'const void *',
        name = 'indices_array',
      ),
      Param(
        type = 'int',
        name = 'indices_len',
      ),
    ],
  ),
  'cogl_vertex_buffer_indices_get_type': Spec(
    return_type = 'CoglIndicesType',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'indices',
      ),
    ],
  ),
  'cogl_vertex_buffer_draw_elements': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
      Param(
        type = 'CoglVerticesMode',
        name = 'mode',
      ),
      Param(
        type = 'CoglHandle',
        name = 'indices',
      ),
      Param(
        type = 'int',
        name = 'min_index',
      ),
      Param(
        type = 'int',
        name = 'max_index',
      ),
      Param(
        type = 'int',
        name = 'indices_offset',
      ),
      Param(
        type = 'int',
        name = 'count',
      ),
    ],
  ),
  'cogl_vertex_buffer_ref': Spec(
    return_type = 'CoglHandle',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
    ],
  ),
  'cogl_vertex_buffer_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
    ],
  ),
  'cogl_vertex_buffer_indices_get_for_quads': Spec(
    return_type = 'CoglHandle',
    parameters = [
      Param(
        type = 'unsigned int',
        name = 'n_indices',
      ),
    ],
  ),
  'cogl_is_vertex_buffer': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
    ],
  ),
  'cogl_is_vertex_buffer_indices': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
    ],
  ),
  'cogl_attribute_buffer_new': Spec(
    return_type = 'CoglAttributeBuffer *',
    parameters = [
      Param(
        type = 'CoglContext *',
        name = 'context',
      ),
      Param(
        type = 'gsize',
        name = 'bytes',
      ),
      Param(
        type = 'const void *',
        name = 'data',
      ),
    ],
  ),
  'cogl_is_attribute_buffer': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'void *',
        name = 'object',
      ),
    ],
  ),
  'cogl_index_buffer_new': Spec(
    return_type = 'CoglIndexBuffer *',
    parameters = [
      Param(
        type = 'CoglContext *',
        name = 'context',
      ),
      Param(
        type = 'gsize',
        name = 'bytes',
      ),
    ],
  ),
  'cogl_is_index_buffer': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'void *',
        name = 'object',
      ),
    ],
  ),
  'cogl_indices_new': Spec(
    return_type = 'CoglIndices *',
    parameters = [
      Param(
        type = 'CoglContext *',
        name = 'context',
      ),
      Param(
        type = 'CoglIndicesType',
        name = 'type',
      ),
      Param(
        type = 'const void *',
        name = 'indices_data',
      ),
      Param(
        type = 'int',
        name = 'n_indices',
      ),
    ],
  ),
  'cogl_indices_new_for_buffer': Spec(
    return_type = 'CoglIndices *',
    parameters = [
      Param(
        type = 'CoglIndicesType',
        name = 'type',
      ),
      Param(
        type = 'CoglIndexBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'offset',
      ),
    ],
  ),
  'cogl_indices_get_buffer': Spec(
    return_type = 'CoglIndexBuffer *',
    parameters = [
      Param(
        type = 'CoglIndices *',
        name = 'indices',
      ),
    ],
  ),
  'cogl_indices_get_type': Spec(
    return_type = 'CoglIndicesType',
    parameters = [
      Param(
        type = 'CoglIndices *',
        name = 'indices',
      ),
    ],
  ),
  'cogl_indices_get_offset': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'CoglIndices *',
        name = 'indices',
      ),
    ],
  ),
  'cogl_indices_set_offset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglIndices *',
        name = 'indices',
      ),
      Param(
        type = 'gsize',
        name = 'offset',
      ),
    ],
  ),
  'cogl_get_rectangle_indices': Spec(
    return_type = 'CoglIndices *',
    parameters = [
      Param(
        type = 'CoglContext *',
        name = 'context',
      ),
      Param(
        type = 'int',
        name = 'n_rectangles',
      ),
    ],
  ),
  'cogl_is_indices': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'void *',
        name = 'object',
      ),
    ],
  ),
  'cogl_attribute_new': Spec(
    return_type = 'CoglAttribute *',
    parameters = [
      Param(
        type = 'CoglAttributeBuffer *',
        name = 'attribute_buffer',
      ),
      Param(
        type = 'const char *',
        name = 'name',
      ),
      Param(
        type = 'gsize',
        name = 'stride',
      ),
      Param(
        type = 'gsize',
        name = 'offset',
      ),
      Param(
        type = 'int',
        name = 'components',
      ),
      Param(
        type = 'CoglAttributeType',
        name = 'type',
      ),
    ],
  ),
  'cogl_attribute_set_normalized': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglAttribute *',
        name = 'attribute',
      ),
      Param(
        type = 'gboolean',
        name = 'normalized',
      ),
    ],
  ),
  'cogl_attribute_get_normalized': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'CoglAttribute *',
        name = 'attribute',
      ),
    ],
  ),
  'cogl_attribute_get_buffer': Spec(
    return_type = 'CoglAttributeBuffer *',
    parameters = [
      Param(
        type = 'CoglAttribute *',
        name = 'attribute',
      ),
    ],
  ),
  'cogl_attribute_set_buffer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglAttribute *',
        name = 'attribute',
      ),
      Param(
        type = 'CoglAttributeBuffer *',
        name = 'attribute_buffer',
      ),
    ],
  ),
  'cogl_is_attribute': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'void *',
        name = 'object',
      ),
    ],
  ),
  'cogl_primitive_new': Spec(
    return_type = 'CoglPrimitive *',
    parameters = [
      Param(
        type = 'CoglVerticesMode',
        name = 'mode',
      ),
      Param(
        type = 'int',
        name = 'n_vertices',
      ),
    ],
  ),
  'cogl_primitive_new_with_attributes': Spec(
    return_type = 'CoglPrimitive *',
    parameters = [
      Param(
        type = 'CoglVerticesMode',
        name = 'mode',
      ),
      Param(
        type = 'int',
        name = 'n_vertices',
      ),
      Param(
        type = 'CoglAttribute **',
        name = 'attributes',
      ),
      Param(
        type = 'int',
        name = 'n_attributes',
      ),
    ],
  ),
  'cogl_primitive_new_p2': Spec(
    return_type = 'CoglPrimitive *',
    parameters = [
      Param(
        type = 'CoglContext *',
        name = 'context',
      ),
      Param(
        type = 'CoglVerticesMode',
        name = 'mode',
      ),
      Param(
        type = 'int',
        name = 'n_vertices',
      ),
      Param(
        type = 'const CoglVertexP2 *',
        name = 'data',
      ),
    ],
  ),
  'cogl_primitive_new_p3': Spec(
    return_type = 'CoglPrimitive *',
    parameters = [
      Param(
        type = 'CoglContext *',
        name = 'context',
      ),
      Param(
        type = 'CoglVerticesMode',
        name = 'mode',
      ),
      Param(
        type = 'int',
        name = 'n_vertices',
      ),
      Param(
        type = 'const CoglVertexP3 *',
        name = 'data',
      ),
    ],
  ),
  'cogl_primitive_new_p2c4': Spec(
    return_type = 'CoglPrimitive *',
    parameters = [
      Param(
        type = 'CoglContext *',
        name = 'context',
      ),
      Param(
        type = 'CoglVerticesMode',
        name = 'mode',
      ),
      Param(
        type = 'int',
        name = 'n_vertices',
      ),
      Param(
        type = 'const CoglVertexP2C4 *',
        name = 'data',
      ),
    ],
  ),
  'cogl_primitive_new_p3c4': Spec(
    return_type = 'CoglPrimitive *',
    parameters = [
      Param(
        type = 'CoglContext *',
        name = 'context',
      ),
      Param(
        type = 'CoglVerticesMode',
        name = 'mode',
      ),
      Param(
        type = 'int',
        name = 'n_vertices',
      ),
      Param(
        type = 'const CoglVertexP3C4 *',
        name = 'data',
      ),
    ],
  ),
  'cogl_primitive_new_p2t2': Spec(
    return_type = 'CoglPrimitive *',
    parameters = [
      Param(
        type = 'CoglContext *',
        name = 'context',
      ),
      Param(
        type = 'CoglVerticesMode',
        name = 'mode',
      ),
      Param(
        type = 'int',
        name = 'n_vertices',
      ),
      Param(
        type = 'const CoglVertexP2T2 *',
        name = 'data',
      ),
    ],
  ),
  'cogl_primitive_new_p3t2': Spec(
    return_type = 'CoglPrimitive *',
    parameters = [
      Param(
        type = 'CoglContext *',
        name = 'context',
      ),
      Param(
        type = 'CoglVerticesMode',
        name = 'mode',
      ),
      Param(
        type = 'int',
        name = 'n_vertices',
      ),
      Param(
        type = 'const CoglVertexP3T2 *',
        name = 'data',
      ),
    ],
  ),
  'cogl_primitive_new_p2t2c4': Spec(
    return_type = 'CoglPrimitive *',
    parameters = [
      Param(
        type = 'CoglContext *',
        name = 'context',
      ),
      Param(
        type = 'CoglVerticesMode',
        name = 'mode',
      ),
      Param(
        type = 'int',
        name = 'n_vertices',
      ),
      Param(
        type = 'const CoglVertexP2T2C4 *',
        name = 'data',
      ),
    ],
  ),
  'cogl_primitive_new_p3t2c4': Spec(
    return_type = 'CoglPrimitive *',
    parameters = [
      Param(
        type = 'CoglContext *',
        name = 'context',
      ),
      Param(
        type = 'CoglVerticesMode',
        name = 'mode',
      ),
      Param(
        type = 'int',
        name = 'n_vertices',
      ),
      Param(
        type = 'const CoglVertexP3T2C4 *',
        name = 'data',
      ),
    ],
  ),
  'cogl_primitive_get_first_vertex': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'CoglPrimitive *',
        name = 'primitive',
      ),
    ],
  ),
  'cogl_primitive_set_first_vertex': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglPrimitive *',
        name = 'primitive',
      ),
      Param(
        type = 'int',
        name = 'first_vertex',
      ),
    ],
  ),
  'cogl_primitive_get_n_vertices_EXP': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'CoglPrimitive *',
        name = 'primitive',
      ),
    ],
  ),
  'cogl_primitive_set_n_vertices_EXP': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglPrimitive *',
        name = 'primitive',
      ),
      Param(
        type = 'int',
        name = 'n_vertices',
      ),
    ],
  ),
  'cogl_primitive_get_mode': Spec(
    return_type = 'CoglVerticesMode',
    parameters = [
      Param(
        type = 'CoglPrimitive *',
        name = 'primitive',
      ),
    ],
  ),
  'cogl_primitive_set_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglPrimitive *',
        name = 'primitive',
      ),
      Param(
        type = 'CoglVerticesMode',
        name = 'mode',
      ),
    ],
  ),
  'cogl_primitive_set_attributes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglPrimitive *',
        name = 'primitive',
      ),
      Param(
        type = 'CoglAttribute **',
        name = 'attributes',
      ),
      Param(
        type = 'int',
        name = 'n_attributes',
      ),
    ],
  ),
  'cogl_primitive_set_indices_EXP': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglPrimitive *',
        name = 'primitive',
      ),
      Param(
        type = 'CoglIndices *',
        name = 'indices',
      ),
      Param(
        type = 'int',
        name = 'n_indices',
      ),
    ],
  ),
  'cogl_primitive_get_indices': Spec(
    return_type = 'CoglIndices *',
    parameters = [
      Param(
        type = 'CoglPrimitive *',
        name = 'primitive',
      ),
    ],
  ),
  'cogl_primitive_copy': Spec(
    return_type = 'CoglPrimitive *',
    parameters = [
      Param(
        type = 'CoglPrimitive *',
        name = 'primitive',
      ),
    ],
  ),
  'cogl_is_primitive': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'void *',
        name = 'object',
      ),
    ],
  ),
  'cogl_primitive_foreach_attribute': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglPrimitive *',
        name = 'primitive',
      ),
      Param(
        type = 'CoglPrimitiveAttributeCallback',
        name = 'callback',
      ),
      Param(
        type = 'void *',
        name = 'user_data',
      ),
    ],
  ),
  'cogl_pixel_buffer_new_EXP': Spec(
    return_type = 'CoglPixelBuffer *',
    parameters = [
      Param(
        type = 'CoglContext *',
        name = 'context',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
      Param(
        type = 'const void *',
        name = 'data',
      ),
    ],
  ),
  'cogl_is_pixel_buffer_EXP': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'void *',
        name = 'object',
      ),
    ],
  ),
  'cogl_bitmap_new_from_file': Spec(
    return_type = 'CoglBitmap *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'filename',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'cogl_bitmap_get_size_from_file': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char *',
        name = 'filename',
      ),
      Param(
        type = 'int *',
        name = 'width',
      ),
      Param(
        type = 'int *',
        name = 'height',
      ),
    ],
  ),
  'cogl_is_bitmap': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
    ],
  ),
  'cogl_bitmap_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'cogl_texture_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'cogl_texture_new_with_size': Spec(
    return_type = 'CoglTexture *',
    parameters = [
      Param(
        type = 'unsigned int',
        name = 'width',
      ),
      Param(
        type = 'unsigned int',
        name = 'height',
      ),
      Param(
        type = 'CoglTextureFlags',
        name = 'flags',
      ),
      Param(
        type = 'CoglPixelFormat',
        name = 'internal_format',
      ),
    ],
  ),
  'cogl_texture_new_from_file': Spec(
    return_type = 'CoglTexture *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'filename',
      ),
      Param(
        type = 'CoglTextureFlags',
        name = 'flags',
      ),
      Param(
        type = 'CoglPixelFormat',
        name = 'internal_format',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'cogl_texture_new_from_data': Spec(
    return_type = 'CoglTexture *',
    parameters = [
      Param(
        type = 'unsigned int',
        name = 'width',
      ),
      Param(
        type = 'unsigned int',
        name = 'height',
      ),
      Param(
        type = 'CoglTextureFlags',
        name = 'flags',
      ),
      Param(
        type = 'CoglPixelFormat',
        name = 'format',
      ),
      Param(
        type = 'CoglPixelFormat',
        name = 'internal_format',
      ),
      Param(
        type = 'unsigned int',
        name = 'rowstride',
      ),
      Param(
        type = 'const guint8 *',
        name = 'data',
      ),
    ],
  ),
  'cogl_texture_new_from_foreign': Spec(
    return_type = 'CoglTexture *',
    parameters = [
      Param(
        type = 'GLuint',
        name = 'gl_handle',
      ),
      Param(
        type = 'GLenum',
        name = 'gl_target',
      ),
      Param(
        type = 'GLuint',
        name = 'width',
      ),
      Param(
        type = 'GLuint',
        name = 'height',
      ),
      Param(
        type = 'GLuint',
        name = 'x_pot_waste',
      ),
      Param(
        type = 'GLuint',
        name = 'y_pot_waste',
      ),
      Param(
        type = 'CoglPixelFormat',
        name = 'format',
      ),
    ],
  ),
  'cogl_texture_new_from_bitmap': Spec(
    return_type = 'CoglTexture *',
    parameters = [
      Param(
        type = 'CoglBitmap *',
        name = 'bitmap',
      ),
      Param(
        type = 'CoglTextureFlags',
        name = 'flags',
      ),
      Param(
        type = 'CoglPixelFormat',
        name = 'internal_format',
      ),
    ],
  ),
  'cogl_is_texture': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'void *',
        name = 'object',
      ),
    ],
  ),
  'cogl_texture_get_width': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'CoglTexture *',
        name = 'texture',
      ),
    ],
  ),
  'cogl_texture_get_height': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'CoglTexture *',
        name = 'texture',
      ),
    ],
  ),
  'cogl_texture_get_format': Spec(
    return_type = 'CoglPixelFormat',
    parameters = [
      Param(
        type = 'CoglTexture *',
        name = 'texture',
      ),
    ],
  ),
  'cogl_texture_get_rowstride': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'CoglTexture *',
        name = 'texture',
      ),
    ],
  ),
  'cogl_texture_get_max_waste': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'CoglTexture *',
        name = 'texture',
      ),
    ],
  ),
  'cogl_texture_is_sliced': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'CoglTexture *',
        name = 'texture',
      ),
    ],
  ),
  'cogl_texture_get_gl_texture': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'CoglTexture *',
        name = 'texture',
      ),
      Param(
        type = 'GLuint *',
        name = 'out_gl_handle',
      ),
      Param(
        type = 'GLenum *',
        name = 'out_gl_target',
      ),
    ],
  ),
  'cogl_texture_get_data': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'CoglTexture *',
        name = 'texture',
      ),
      Param(
        type = 'CoglPixelFormat',
        name = 'format',
      ),
      Param(
        type = 'unsigned int',
        name = 'rowstride',
      ),
      Param(
        type = 'guint8 *',
        name = 'data',
      ),
    ],
  ),
  'cogl_texture_set_region': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'CoglTexture *',
        name = 'texture',
      ),
      Param(
        type = 'int',
        name = 'src_x',
      ),
      Param(
        type = 'int',
        name = 'src_y',
      ),
      Param(
        type = 'int',
        name = 'dst_x',
      ),
      Param(
        type = 'int',
        name = 'dst_y',
      ),
      Param(
        type = 'unsigned int',
        name = 'dst_width',
      ),
      Param(
        type = 'unsigned int',
        name = 'dst_height',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
      Param(
        type = 'CoglPixelFormat',
        name = 'format',
      ),
      Param(
        type = 'unsigned int',
        name = 'rowstride',
      ),
      Param(
        type = 'const guint8 *',
        name = 'data',
      ),
    ],
  ),
  'cogl_texture_new_from_sub_texture': Spec(
    return_type = 'CoglTexture *',
    parameters = [
      Param(
        type = 'CoglTexture *',
        name = 'full_texture',
      ),
      Param(
        type = 'int',
        name = 'sub_x',
      ),
      Param(
        type = 'int',
        name = 'sub_y',
      ),
      Param(
        type = 'int',
        name = 'sub_width',
      ),
      Param(
        type = 'int',
        name = 'sub_height',
      ),
    ],
  ),
  'cogl_texture_ref': Spec(
    return_type = 'void *',
    parameters = [
      Param(
        type = 'void *',
        name = 'texture',
      ),
    ],
  ),
  'cogl_texture_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'void *',
        name = 'texture',
      ),
    ],
  ),
  'cogl_is_path': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
    ],
  ),
  'cogl_path_set_fill_rule': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglPathFillRule',
        name = 'fill_rule',
      ),
    ],
  ),
  'cogl_path_get_fill_rule': Spec(
    return_type = 'CoglPathFillRule',
    parameters = [
    ],
  ),
  'cogl_path_fill': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'cogl_path_fill_preserve': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'cogl_path_stroke': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'cogl_path_stroke_preserve': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'cogl_path_new': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'cogl_path_move_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'x',
      ),
      Param(
        type = 'float',
        name = 'y',
      ),
    ],
  ),
  'cogl_path_rel_move_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'x',
      ),
      Param(
        type = 'float',
        name = 'y',
      ),
    ],
  ),
  'cogl_path_line_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'x',
      ),
      Param(
        type = 'float',
        name = 'y',
      ),
    ],
  ),
  'cogl_path_rel_line_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'x',
      ),
      Param(
        type = 'float',
        name = 'y',
      ),
    ],
  ),
  'cogl_path_arc': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'center_x',
      ),
      Param(
        type = 'float',
        name = 'center_y',
      ),
      Param(
        type = 'float',
        name = 'radius_x',
      ),
      Param(
        type = 'float',
        name = 'radius_y',
      ),
      Param(
        type = 'float',
        name = 'angle_1',
      ),
      Param(
        type = 'float',
        name = 'angle_2',
      ),
    ],
  ),
  'cogl_path_curve_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'x_1',
      ),
      Param(
        type = 'float',
        name = 'y_1',
      ),
      Param(
        type = 'float',
        name = 'x_2',
      ),
      Param(
        type = 'float',
        name = 'y_2',
      ),
      Param(
        type = 'float',
        name = 'x_3',
      ),
      Param(
        type = 'float',
        name = 'y_3',
      ),
    ],
  ),
  'cogl_path_rel_curve_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'x_1',
      ),
      Param(
        type = 'float',
        name = 'y_1',
      ),
      Param(
        type = 'float',
        name = 'x_2',
      ),
      Param(
        type = 'float',
        name = 'y_2',
      ),
      Param(
        type = 'float',
        name = 'x_3',
      ),
      Param(
        type = 'float',
        name = 'y_3',
      ),
    ],
  ),
  'cogl_path_close': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'cogl_path_line': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'x_1',
      ),
      Param(
        type = 'float',
        name = 'y_1',
      ),
      Param(
        type = 'float',
        name = 'x_2',
      ),
      Param(
        type = 'float',
        name = 'y_2',
      ),
    ],
  ),
  'cogl_path_polyline': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const float *',
        name = 'coords',
      ),
      Param(
        type = 'int',
        name = 'num_points',
      ),
    ],
  ),
  'cogl_path_polygon': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const float *',
        name = 'coords',
      ),
      Param(
        type = 'int',
        name = 'num_points',
      ),
    ],
  ),
  'cogl_path_rectangle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'x_1',
      ),
      Param(
        type = 'float',
        name = 'y_1',
      ),
      Param(
        type = 'float',
        name = 'x_2',
      ),
      Param(
        type = 'float',
        name = 'y_2',
      ),
    ],
  ),
  'cogl_path_ellipse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'center_x',
      ),
      Param(
        type = 'float',
        name = 'center_y',
      ),
      Param(
        type = 'float',
        name = 'radius_x',
      ),
      Param(
        type = 'float',
        name = 'radius_y',
      ),
    ],
  ),
  'cogl_path_round_rectangle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'x_1',
      ),
      Param(
        type = 'float',
        name = 'y_1',
      ),
      Param(
        type = 'float',
        name = 'x_2',
      ),
      Param(
        type = 'float',
        name = 'y_2',
      ),
      Param(
        type = 'float',
        name = 'radius',
      ),
      Param(
        type = 'float',
        name = 'arc_step',
      ),
    ],
  ),
  'cogl_get_path': Spec(
    return_type = 'CoglPath *',
    parameters = [
    ],
  ),
  'cogl_set_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglPath *',
        name = 'path',
      ),
    ],
  ),
  'cogl_path_copy': Spec(
    return_type = 'CoglPath *',
    parameters = [
      Param(
        type = 'CoglPath *',
        name = 'path',
      ),
    ],
  ),
  'cogl_snippet_new': Spec(
    return_type = 'CoglSnippet *',
    parameters = [
      Param(
        type = 'CoglSnippetHook',
        name = 'hook',
      ),
      Param(
        type = 'const char *',
        name = 'declarations',
      ),
      Param(
        type = 'const char *',
        name = 'post',
      ),
    ],
  ),
  'cogl_snippet_get_hook': Spec(
    return_type = 'CoglSnippetHook',
    parameters = [
      Param(
        type = 'CoglSnippet *',
        name = 'snippet',
      ),
    ],
  ),
  'cogl_is_snippet': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'void *',
        name = 'object',
      ),
    ],
  ),
  'cogl_snippet_set_declarations': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglSnippet *',
        name = 'snippet',
      ),
      Param(
        type = 'const char *',
        name = 'declarations',
      ),
    ],
  ),
  'cogl_snippet_get_declarations': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'CoglSnippet *',
        name = 'snippet',
      ),
    ],
  ),
  'cogl_snippet_set_pre': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglSnippet *',
        name = 'snippet',
      ),
      Param(
        type = 'const char *',
        name = 'pre',
      ),
    ],
  ),
  'cogl_snippet_get_pre': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'CoglSnippet *',
        name = 'snippet',
      ),
    ],
  ),
  'cogl_snippet_set_replace': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglSnippet *',
        name = 'snippet',
      ),
      Param(
        type = 'const char *',
        name = 'replace',
      ),
    ],
  ),
  'cogl_snippet_get_replace': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'CoglSnippet *',
        name = 'snippet',
      ),
    ],
  ),
  'cogl_snippet_set_post': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglSnippet *',
        name = 'snippet',
      ),
      Param(
        type = 'const char *',
        name = 'post',
      ),
    ],
  ),
  'cogl_snippet_get_post': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'CoglSnippet *',
        name = 'snippet',
      ),
    ],
  ),
  'cogl_framebuffer_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'cogl_is_framebuffer': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'void *',
        name = 'object',
      ),
    ],
  ),
  'cogl_get_option_group': Spec(
    return_type = 'GOptionGroup *',
    parameters = [
    ],
  ),
  'cogl_get_features': Spec(
    return_type = 'CoglFeatureFlags',
    parameters = [
    ],
  ),
  'cogl_features_available': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'CoglFeatureFlags',
        name = 'features',
      ),
    ],
  ),
  'cogl_get_proc_address': Spec(
    return_type = 'CoglFuncPtr',
    parameters = [
      Param(
        type = 'const char *',
        name = 'name',
      ),
    ],
  ),
  'cogl_check_extension': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char *',
        name = 'name',
      ),
      Param(
        type = 'const char *',
        name = 'ext',
      ),
    ],
  ),
  'cogl_get_bitmasks': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'int *',
        name = 'red',
      ),
      Param(
        type = 'int *',
        name = 'green',
      ),
      Param(
        type = 'int *',
        name = 'blue',
      ),
      Param(
        type = 'int *',
        name = 'alpha',
      ),
    ],
  ),
  'cogl_perspective': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'fovy',
      ),
      Param(
        type = 'float',
        name = 'aspect',
      ),
      Param(
        type = 'float',
        name = 'z_near',
      ),
      Param(
        type = 'float',
        name = 'z_far',
      ),
    ],
  ),
  'cogl_frustum': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'left',
      ),
      Param(
        type = 'float',
        name = 'right',
      ),
      Param(
        type = 'float',
        name = 'bottom',
      ),
      Param(
        type = 'float',
        name = 'top',
      ),
      Param(
        type = 'float',
        name = 'z_near',
      ),
      Param(
        type = 'float',
        name = 'z_far',
      ),
    ],
  ),
  'cogl_ortho': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'left',
      ),
      Param(
        type = 'float',
        name = 'right',
      ),
      Param(
        type = 'float',
        name = 'bottom',
      ),
      Param(
        type = 'float',
        name = 'top',
      ),
      Param(
        type = 'float',
        name = 'near',
      ),
      Param(
        type = 'float',
        name = 'far',
      ),
    ],
  ),
  'cogl_viewport': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'unsigned int',
        name = 'width',
      ),
      Param(
        type = 'unsigned int',
        name = 'height',
      ),
    ],
  ),
  'cogl_set_viewport': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'int',
        name = 'x',
      ),
      Param(
        type = 'int',
        name = 'y',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'cogl_push_matrix': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'cogl_pop_matrix': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'cogl_scale': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'x',
      ),
      Param(
        type = 'float',
        name = 'y',
      ),
      Param(
        type = 'float',
        name = 'z',
      ),
    ],
  ),
  'cogl_translate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'x',
      ),
      Param(
        type = 'float',
        name = 'y',
      ),
      Param(
        type = 'float',
        name = 'z',
      ),
    ],
  ),
  'cogl_rotate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'angle',
      ),
      Param(
        type = 'float',
        name = 'x',
      ),
      Param(
        type = 'float',
        name = 'y',
      ),
      Param(
        type = 'float',
        name = 'z',
      ),
    ],
  ),
  'cogl_transform': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const CoglMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'cogl_get_modelview_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'cogl_set_modelview_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'cogl_get_projection_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'cogl_set_projection_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'cogl_get_viewport': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float [4]',
        name = 'v',
      ),
    ],
  ),
  'cogl_set_depth_test_enabled': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'cogl_get_depth_test_enabled': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'cogl_set_backface_culling_enabled': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'cogl_get_backface_culling_enabled': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'cogl_set_fog': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const CoglColor *',
        name = 'fog_color',
      ),
      Param(
        type = 'CoglFogMode',
        name = 'mode',
      ),
      Param(
        type = 'float',
        name = 'density',
      ),
      Param(
        type = 'float',
        name = 'z_near',
      ),
      Param(
        type = 'float',
        name = 'z_far',
      ),
    ],
  ),
  'cogl_disable_fog': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'cogl_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const CoglColor *',
        name = 'color',
      ),
      Param(
        type = 'unsigned long',
        name = 'buffers',
      ),
    ],
  ),
  'cogl_set_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'void *',
        name = 'material',
      ),
    ],
  ),
  'cogl_get_source': Spec(
    return_type = 'void *',
    parameters = [
    ],
  ),
  'cogl_push_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'void *',
        name = 'material',
      ),
    ],
  ),
  'cogl_pop_source': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'cogl_set_source_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const CoglColor *',
        name = 'color',
      ),
    ],
  ),
  'cogl_set_source_color4ub': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint8',
        name = 'red',
      ),
      Param(
        type = 'guint8',
        name = 'green',
      ),
      Param(
        type = 'guint8',
        name = 'blue',
      ),
      Param(
        type = 'guint8',
        name = 'alpha',
      ),
    ],
  ),
  'cogl_set_source_color4f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'red',
      ),
      Param(
        type = 'float',
        name = 'green',
      ),
      Param(
        type = 'float',
        name = 'blue',
      ),
      Param(
        type = 'float',
        name = 'alpha',
      ),
    ],
  ),
  'cogl_set_source_texture': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglTexture *',
        name = 'texture',
      ),
    ],
  ),
  'cogl_clip_push_window_rect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'x_offset',
      ),
      Param(
        type = 'float',
        name = 'y_offset',
      ),
      Param(
        type = 'float',
        name = 'width',
      ),
      Param(
        type = 'float',
        name = 'height',
      ),
    ],
  ),
  'cogl_clip_push_window_rectangle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'int',
        name = 'x_offset',
      ),
      Param(
        type = 'int',
        name = 'y_offset',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'cogl_clip_push': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'x_offset',
      ),
      Param(
        type = 'float',
        name = 'y_offset',
      ),
      Param(
        type = 'float',
        name = 'width',
      ),
      Param(
        type = 'float',
        name = 'height',
      ),
    ],
  ),
  'cogl_clip_push_rectangle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'x0',
      ),
      Param(
        type = 'float',
        name = 'y0',
      ),
      Param(
        type = 'float',
        name = 'x1',
      ),
      Param(
        type = 'float',
        name = 'y1',
      ),
    ],
  ),
  'cogl_clip_push_from_path_preserve': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'cogl_clip_pop': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'cogl_clip_ensure': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'cogl_clip_stack_save': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'cogl_clip_stack_restore': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'cogl_set_framebuffer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglFramebuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'cogl_push_framebuffer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglFramebuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'cogl_pop_framebuffer': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'cogl_set_draw_buffer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglBufferTarget',
        name = 'target',
      ),
      Param(
        type = 'CoglHandle',
        name = 'offscreen',
      ),
    ],
  ),
  'cogl_push_draw_buffer': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'cogl_pop_draw_buffer': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'cogl_read_pixels': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'int',
        name = 'x',
      ),
      Param(
        type = 'int',
        name = 'y',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
      Param(
        type = 'CoglReadPixelsFlags',
        name = 'source',
      ),
      Param(
        type = 'CoglPixelFormat',
        name = 'format',
      ),
      Param(
        type = 'guint8 *',
        name = 'pixels',
      ),
    ],
  ),
  'cogl_flush': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'cogl_begin_gl': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'cogl_end_gl': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'cogl_color_new': Spec(
    return_type = 'CoglColor *',
    parameters = [
    ],
  ),
  'cogl_color_copy': Spec(
    return_type = 'CoglColor *',
    parameters = [
      Param(
        type = 'const CoglColor *',
        name = 'color',
      ),
    ],
  ),
  'cogl_color_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglColor *',
        name = 'color',
      ),
    ],
  ),
  'cogl_color_init_from_4ub': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglColor *',
        name = 'color',
      ),
      Param(
        type = 'guint8',
        name = 'red',
      ),
      Param(
        type = 'guint8',
        name = 'green',
      ),
      Param(
        type = 'guint8',
        name = 'blue',
      ),
      Param(
        type = 'guint8',
        name = 'alpha',
      ),
    ],
  ),
  'cogl_color_set_from_4ub': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglColor *',
        name = 'color',
      ),
      Param(
        type = 'guint8',
        name = 'red',
      ),
      Param(
        type = 'guint8',
        name = 'green',
      ),
      Param(
        type = 'guint8',
        name = 'blue',
      ),
      Param(
        type = 'guint8',
        name = 'alpha',
      ),
    ],
  ),
  'cogl_color_init_from_4f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglColor *',
        name = 'color',
      ),
      Param(
        type = 'float',
        name = 'red',
      ),
      Param(
        type = 'float',
        name = 'green',
      ),
      Param(
        type = 'float',
        name = 'blue',
      ),
      Param(
        type = 'float',
        name = 'alpha',
      ),
    ],
  ),
  'cogl_color_set_from_4f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglColor *',
        name = 'color',
      ),
      Param(
        type = 'float',
        name = 'red',
      ),
      Param(
        type = 'float',
        name = 'green',
      ),
      Param(
        type = 'float',
        name = 'blue',
      ),
      Param(
        type = 'float',
        name = 'alpha',
      ),
    ],
  ),
  'cogl_color_init_from_4fv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglColor *',
        name = 'color',
      ),
      Param(
        type = 'float *',
        name = 'color_array',
      ),
    ],
  ),
  'cogl_color_get_red_byte': Spec(
    return_type = 'unsigned char',
    parameters = [
      Param(
        type = 'const CoglColor *',
        name = 'color',
      ),
    ],
  ),
  'cogl_color_get_green_byte': Spec(
    return_type = 'unsigned char',
    parameters = [
      Param(
        type = 'const CoglColor *',
        name = 'color',
      ),
    ],
  ),
  'cogl_color_get_blue_byte': Spec(
    return_type = 'unsigned char',
    parameters = [
      Param(
        type = 'const CoglColor *',
        name = 'color',
      ),
    ],
  ),
  'cogl_color_get_alpha_byte': Spec(
    return_type = 'unsigned char',
    parameters = [
      Param(
        type = 'const CoglColor *',
        name = 'color',
      ),
    ],
  ),
  'cogl_color_get_red_float': Spec(
    return_type = 'float',
    parameters = [
      Param(
        type = 'const CoglColor *',
        name = 'color',
      ),
    ],
  ),
  'cogl_color_get_green_float': Spec(
    return_type = 'float',
    parameters = [
      Param(
        type = 'const CoglColor *',
        name = 'color',
      ),
    ],
  ),
  'cogl_color_get_blue_float': Spec(
    return_type = 'float',
    parameters = [
      Param(
        type = 'const CoglColor *',
        name = 'color',
      ),
    ],
  ),
  'cogl_color_get_alpha_float': Spec(
    return_type = 'float',
    parameters = [
      Param(
        type = 'const CoglColor *',
        name = 'color',
      ),
    ],
  ),
  'cogl_color_get_red': Spec(
    return_type = 'float',
    parameters = [
      Param(
        type = 'const CoglColor *',
        name = 'color',
      ),
    ],
  ),
  'cogl_color_get_green': Spec(
    return_type = 'float',
    parameters = [
      Param(
        type = 'const CoglColor *',
        name = 'color',
      ),
    ],
  ),
  'cogl_color_get_blue': Spec(
    return_type = 'float',
    parameters = [
      Param(
        type = 'const CoglColor *',
        name = 'color',
      ),
    ],
  ),
  'cogl_color_get_alpha': Spec(
    return_type = 'float',
    parameters = [
      Param(
        type = 'const CoglColor *',
        name = 'color',
      ),
    ],
  ),
  'cogl_color_set_red_byte': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglColor *',
        name = 'color',
      ),
      Param(
        type = 'unsigned char',
        name = 'red',
      ),
    ],
  ),
  'cogl_color_set_green_byte': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglColor *',
        name = 'color',
      ),
      Param(
        type = 'unsigned char',
        name = 'green',
      ),
    ],
  ),
  'cogl_color_set_blue_byte': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglColor *',
        name = 'color',
      ),
      Param(
        type = 'unsigned char',
        name = 'blue',
      ),
    ],
  ),
  'cogl_color_set_alpha_byte': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglColor *',
        name = 'color',
      ),
      Param(
        type = 'unsigned char',
        name = 'alpha',
      ),
    ],
  ),
  'cogl_color_set_red_float': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglColor *',
        name = 'color',
      ),
      Param(
        type = 'float',
        name = 'red',
      ),
    ],
  ),
  'cogl_color_set_green_float': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglColor *',
        name = 'color',
      ),
      Param(
        type = 'float',
        name = 'green',
      ),
    ],
  ),
  'cogl_color_set_blue_float': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglColor *',
        name = 'color',
      ),
      Param(
        type = 'float',
        name = 'blue',
      ),
    ],
  ),
  'cogl_color_set_alpha_float': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglColor *',
        name = 'color',
      ),
      Param(
        type = 'float',
        name = 'alpha',
      ),
    ],
  ),
  'cogl_color_set_red': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglColor *',
        name = 'color',
      ),
      Param(
        type = 'float',
        name = 'red',
      ),
    ],
  ),
  'cogl_color_set_green': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglColor *',
        name = 'color',
      ),
      Param(
        type = 'float',
        name = 'green',
      ),
    ],
  ),
  'cogl_color_set_blue': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglColor *',
        name = 'color',
      ),
      Param(
        type = 'float',
        name = 'blue',
      ),
    ],
  ),
  'cogl_color_set_alpha': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglColor *',
        name = 'color',
      ),
      Param(
        type = 'float',
        name = 'alpha',
      ),
    ],
  ),
  'cogl_color_premultiply': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglColor *',
        name = 'color',
      ),
    ],
  ),
  'cogl_color_unpremultiply': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglColor *',
        name = 'color',
      ),
    ],
  ),
  'cogl_color_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'v2',
      ),
    ],
  ),
  'cogl_matrix_init_identity': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'cogl_matrix_multiply': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMatrix *',
        name = 'result',
      ),
      Param(
        type = 'const CoglMatrix *',
        name = 'a',
      ),
      Param(
        type = 'const CoglMatrix *',
        name = 'b',
      ),
    ],
  ),
  'cogl_matrix_rotate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'float',
        name = 'angle',
      ),
      Param(
        type = 'float',
        name = 'x',
      ),
      Param(
        type = 'float',
        name = 'y',
      ),
      Param(
        type = 'float',
        name = 'z',
      ),
    ],
  ),
  'cogl_matrix_translate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'float',
        name = 'x',
      ),
      Param(
        type = 'float',
        name = 'y',
      ),
      Param(
        type = 'float',
        name = 'z',
      ),
    ],
  ),
  'cogl_matrix_scale': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'float',
        name = 'sx',
      ),
      Param(
        type = 'float',
        name = 'sy',
      ),
      Param(
        type = 'float',
        name = 'sz',
      ),
    ],
  ),
  'cogl_matrix_look_at': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'float',
        name = 'eye_position_x',
      ),
      Param(
        type = 'float',
        name = 'eye_position_y',
      ),
      Param(
        type = 'float',
        name = 'eye_position_z',
      ),
      Param(
        type = 'float',
        name = 'object_x',
      ),
      Param(
        type = 'float',
        name = 'object_y',
      ),
      Param(
        type = 'float',
        name = 'object_z',
      ),
      Param(
        type = 'float',
        name = 'world_up_x',
      ),
      Param(
        type = 'float',
        name = 'world_up_y',
      ),
      Param(
        type = 'float',
        name = 'world_up_z',
      ),
    ],
  ),
  'cogl_matrix_frustum': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'float',
        name = 'left',
      ),
      Param(
        type = 'float',
        name = 'right',
      ),
      Param(
        type = 'float',
        name = 'bottom',
      ),
      Param(
        type = 'float',
        name = 'top',
      ),
      Param(
        type = 'float',
        name = 'z_near',
      ),
      Param(
        type = 'float',
        name = 'z_far',
      ),
    ],
  ),
  'cogl_matrix_perspective': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'float',
        name = 'fov_y',
      ),
      Param(
        type = 'float',
        name = 'aspect',
      ),
      Param(
        type = 'float',
        name = 'z_near',
      ),
      Param(
        type = 'float',
        name = 'z_far',
      ),
    ],
  ),
  'cogl_matrix_ortho': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'float',
        name = 'left',
      ),
      Param(
        type = 'float',
        name = 'right',
      ),
      Param(
        type = 'float',
        name = 'bottom',
      ),
      Param(
        type = 'float',
        name = 'top',
      ),
      Param(
        type = 'float',
        name = 'near',
      ),
      Param(
        type = 'float',
        name = 'far',
      ),
    ],
  ),
  'cogl_matrix_init_from_array': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'const float *',
        name = 'array',
      ),
    ],
  ),
  'cogl_matrix_get_array': Spec(
    return_type = 'const float *',
    parameters = [
      Param(
        type = 'const CoglMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'cogl_matrix_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'v2',
      ),
    ],
  ),
  'cogl_matrix_copy': Spec(
    return_type = 'CoglMatrix *',
    parameters = [
      Param(
        type = 'const CoglMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'cogl_matrix_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'cogl_matrix_get_inverse': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const CoglMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'CoglMatrix *',
        name = 'inverse',
      ),
    ],
  ),
  'cogl_matrix_transform_point': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const CoglMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'float *',
        name = 'x',
      ),
      Param(
        type = 'float *',
        name = 'y',
      ),
      Param(
        type = 'float *',
        name = 'z',
      ),
      Param(
        type = 'float *',
        name = 'w',
      ),
    ],
  ),
  'cogl_matrix_is_identity': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const CoglMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'cogl_matrix_transpose': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'cogl_gtype_matrix_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_offscreen_new_to_texture': Spec(
    return_type = 'CoglOffscreen *',
    parameters = [
      Param(
        type = 'CoglTexture *',
        name = 'texture',
      ),
    ],
  ),
  'cogl_is_offscreen': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'void *',
        name = 'object',
      ),
    ],
  ),
  'cogl_offscreen_ref': Spec(
    return_type = 'void *',
    parameters = [
      Param(
        type = 'void *',
        name = 'offscreen',
      ),
    ],
  ),
  'cogl_offscreen_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'void *',
        name = 'offscreen',
      ),
    ],
  ),
  'cogl_rectangle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'x_1',
      ),
      Param(
        type = 'float',
        name = 'y_1',
      ),
      Param(
        type = 'float',
        name = 'x_2',
      ),
      Param(
        type = 'float',
        name = 'y_2',
      ),
    ],
  ),
  'cogl_rectangle_with_texture_coords': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'x1',
      ),
      Param(
        type = 'float',
        name = 'y1',
      ),
      Param(
        type = 'float',
        name = 'x2',
      ),
      Param(
        type = 'float',
        name = 'y2',
      ),
      Param(
        type = 'float',
        name = 'tx1',
      ),
      Param(
        type = 'float',
        name = 'ty1',
      ),
      Param(
        type = 'float',
        name = 'tx2',
      ),
      Param(
        type = 'float',
        name = 'ty2',
      ),
    ],
  ),
  'cogl_rectangle_with_multitexture_coords': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'float',
        name = 'x1',
      ),
      Param(
        type = 'float',
        name = 'y1',
      ),
      Param(
        type = 'float',
        name = 'x2',
      ),
      Param(
        type = 'float',
        name = 'y2',
      ),
      Param(
        type = 'const float *',
        name = 'tex_coords',
      ),
      Param(
        type = 'int',
        name = 'tex_coords_len',
      ),
    ],
  ),
  'cogl_rectangles_with_texture_coords': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const float *',
        name = 'verts',
      ),
      Param(
        type = 'unsigned int',
        name = 'n_rects',
      ),
    ],
  ),
  'cogl_rectangles': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const float *',
        name = 'verts',
      ),
      Param(
        type = 'unsigned int',
        name = 'n_rects',
      ),
    ],
  ),
  'cogl_polygon': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const CoglTextureVertex *',
        name = 'vertices',
      ),
      Param(
        type = 'unsigned int',
        name = 'n_vertices',
      ),
      Param(
        type = 'gboolean',
        name = 'use_color',
      ),
    ],
  ),
  'cogl_clip_push_from_path': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'cogl_bitmap_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_material_filter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_material_wrap_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_material_alpha_func_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_material_layer_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_path_fill_rule_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_shader_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_texture_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_texture_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_pixel_format_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_feature_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_buffer_target_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_texture_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_fog_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_blend_string_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_attribute_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_indices_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_vertices_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_depth_test_function_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_renderer_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_winsys_feature_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_color_mask_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_winding_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_buffer_bit_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_read_pixels_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'cogl_fixed_sin': Spec(
    return_type = 'CoglFixed',
    parameters = [
      Param(
        type = 'CoglFixed',
        name = 'angle',
      ),
    ],
  ),
  'cogl_fixed_tan': Spec(
    return_type = 'CoglFixed',
    parameters = [
      Param(
        type = 'CoglFixed',
        name = 'angle',
      ),
    ],
  ),
  'cogl_fixed_cos': Spec(
    return_type = 'CoglFixed',
    parameters = [
      Param(
        type = 'CoglFixed',
        name = 'angle',
      ),
    ],
  ),
  'cogl_fixed_atan': Spec(
    return_type = 'CoglFixed',
    parameters = [
      Param(
        type = 'CoglFixed',
        name = 'a',
      ),
    ],
  ),
  'cogl_fixed_atan2': Spec(
    return_type = 'CoglFixed',
    parameters = [
      Param(
        type = 'CoglFixed',
        name = 'a',
      ),
      Param(
        type = 'CoglFixed',
        name = 'b',
      ),
    ],
  ),
  'cogl_fixed_mul': Spec(
    return_type = 'CoglFixed',
    parameters = [
      Param(
        type = 'CoglFixed',
        name = 'a',
      ),
      Param(
        type = 'CoglFixed',
        name = 'b',
      ),
    ],
  ),
  'cogl_fixed_div': Spec(
    return_type = 'CoglFixed',
    parameters = [
      Param(
        type = 'CoglFixed',
        name = 'a',
      ),
      Param(
        type = 'CoglFixed',
        name = 'b',
      ),
    ],
  ),
  'cogl_fixed_mul_div': Spec(
    return_type = 'CoglFixed',
    parameters = [
      Param(
        type = 'CoglFixed',
        name = 'a',
      ),
      Param(
        type = 'CoglFixed',
        name = 'b',
      ),
      Param(
        type = 'CoglFixed',
        name = 'c',
      ),
    ],
  ),
  'cogl_fixed_sqrt': Spec(
    return_type = 'CoglFixed',
    parameters = [
      Param(
        type = 'CoglFixed',
        name = 'x',
      ),
    ],
  ),
  'cogl_fixed_log2': Spec(
    return_type = 'CoglFixed',
    parameters = [
      Param(
        type = 'unsigned int',
        name = 'x',
      ),
    ],
  ),
  'cogl_fixed_pow2': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'CoglFixed',
        name = 'x',
      ),
    ],
  ),
  'cogl_fixed_pow': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'unsigned int',
        name = 'x',
      ),
      Param(
        type = 'CoglFixed',
        name = 'y',
      ),
    ],
  ),
  'cogl_sqrti': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = 'x',
      ),
    ],
  ),
  'cogl_angle_sin': Spec(
    return_type = 'CoglFixed',
    parameters = [
      Param(
        type = 'CoglAngle',
        name = 'angle',
      ),
    ],
  ),
  'cogl_angle_tan': Spec(
    return_type = 'CoglFixed',
    parameters = [
      Param(
        type = 'CoglAngle',
        name = 'angle',
      ),
    ],
  ),
  'cogl_angle_cos': Spec(
    return_type = 'CoglFixed',
    parameters = [
      Param(
        type = 'CoglAngle',
        name = 'angle',
      ),
    ],
  ),
  'cogl_fixed_mul': Spec(
    return_type = 'CoglFixed',
    parameters = [
      Param(
        type = 'CoglFixed',
        name = 'a',
      ),
      Param(
        type = 'CoglFixed',
        name = 'b',
      ),
    ],
  ),
  'cogl_fixed_div': Spec(
    return_type = 'CoglFixed',
    parameters = [
      Param(
        type = 'CoglFixed',
        name = 'a',
      ),
      Param(
        type = 'CoglFixed',
        name = 'b',
      ),
    ],
  ),
  'cogl_fixed_mul_div': Spec(
    return_type = 'CoglFixed',
    parameters = [
      Param(
        type = 'CoglFixed',
        name = 'a',
      ),
      Param(
        type = 'CoglFixed',
        name = 'b',
      ),
      Param(
        type = 'CoglFixed',
        name = 'c',
      ),
    ],
  ),
  'cogl_double_to_fixed': Spec(
    return_type = 'CoglFixed',
    parameters = [
      Param(
        type = 'double',
        name = 'value',
      ),
    ],
  ),
  'cogl_double_to_int': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'double',
        name = 'value',
      ),
    ],
  ),
  'cogl_double_to_uint': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'double',
        name = 'value',
      ),
    ],
  ),
  'cogl_depth_state_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglDepthState *',
        name = 'state',
      ),
    ],
  ),
  'cogl_depth_state_set_test_enabled': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglDepthState *',
        name = 'state',
      ),
      Param(
        type = 'gboolean',
        name = 'enable',
      ),
    ],
  ),
  'cogl_depth_state_get_test_enabled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'CoglDepthState *',
        name = 'state',
      ),
    ],
  ),
  'cogl_depth_state_set_write_enabled': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglDepthState *',
        name = 'state',
      ),
      Param(
        type = 'gboolean',
        name = 'enable',
      ),
    ],
  ),
  'cogl_depth_state_get_write_enabled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'CoglDepthState *',
        name = 'state',
      ),
    ],
  ),
  'cogl_depth_state_set_test_function': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglDepthState *',
        name = 'state',
      ),
      Param(
        type = 'CoglDepthTestFunction',
        name = 'function',
      ),
    ],
  ),
  'cogl_depth_state_get_test_function': Spec(
    return_type = 'CoglDepthTestFunction',
    parameters = [
      Param(
        type = 'CoglDepthState *',
        name = 'state',
      ),
    ],
  ),
  'cogl_depth_state_set_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglDepthState *',
        name = 'state',
      ),
      Param(
        type = 'float',
        name = 'near_val',
      ),
      Param(
        type = 'float',
        name = 'far_val',
      ),
    ],
  ),
  'cogl_depth_state_get_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglDepthState *',
        name = 'state',
      ),
      Param(
        type = 'float *',
        name = 'near_val',
      ),
      Param(
        type = 'float *',
        name = 'far_val',
      ),
    ],
  ),
  'cogl_material_new': Spec(
    return_type = 'CoglMaterial *',
    parameters = [
    ],
  ),
  'cogl_material_copy': Spec(
    return_type = 'CoglMaterial *',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'source',
      ),
    ],
  ),
  'cogl_material_ref': Spec(
    return_type = 'CoglHandle',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'material',
      ),
    ],
  ),
  'cogl_material_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'material',
      ),
    ],
  ),
  'cogl_is_material': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
    ],
  ),
  'cogl_material_set_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'const CoglColor *',
        name = 'color',
      ),
    ],
  ),
  'cogl_material_set_color4ub': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'guint8',
        name = 'red',
      ),
      Param(
        type = 'guint8',
        name = 'green',
      ),
      Param(
        type = 'guint8',
        name = 'blue',
      ),
      Param(
        type = 'guint8',
        name = 'alpha',
      ),
    ],
  ),
  'cogl_material_set_color4f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'float',
        name = 'red',
      ),
      Param(
        type = 'float',
        name = 'green',
      ),
      Param(
        type = 'float',
        name = 'blue',
      ),
      Param(
        type = 'float',
        name = 'alpha',
      ),
    ],
  ),
  'cogl_material_get_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'CoglColor *',
        name = 'color',
      ),
    ],
  ),
  'cogl_material_set_ambient': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'const CoglColor *',
        name = 'ambient',
      ),
    ],
  ),
  'cogl_material_get_ambient': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'CoglColor *',
        name = 'ambient',
      ),
    ],
  ),
  'cogl_material_set_diffuse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'const CoglColor *',
        name = 'diffuse',
      ),
    ],
  ),
  'cogl_material_get_diffuse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'CoglColor *',
        name = 'diffuse',
      ),
    ],
  ),
  'cogl_material_set_ambient_and_diffuse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'const CoglColor *',
        name = 'color',
      ),
    ],
  ),
  'cogl_material_set_specular': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'const CoglColor *',
        name = 'specular',
      ),
    ],
  ),
  'cogl_material_get_specular': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'CoglColor *',
        name = 'specular',
      ),
    ],
  ),
  'cogl_material_set_shininess': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'float',
        name = 'shininess',
      ),
    ],
  ),
  'cogl_material_get_shininess': Spec(
    return_type = 'float',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
    ],
  ),
  'cogl_material_set_emission': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'const CoglColor *',
        name = 'emission',
      ),
    ],
  ),
  'cogl_material_get_emission': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'CoglColor *',
        name = 'emission',
      ),
    ],
  ),
  'cogl_material_set_alpha_test_function': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'CoglMaterialAlphaFunc',
        name = 'alpha_func',
      ),
      Param(
        type = 'float',
        name = 'alpha_reference',
      ),
    ],
  ),
  'cogl_material_set_blend': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'const char *',
        name = 'blend_string',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'cogl_material_set_blend_constant': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'const CoglColor *',
        name = 'constant_color',
      ),
    ],
  ),
  'cogl_material_set_point_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'float',
        name = 'point_size',
      ),
    ],
  ),
  'cogl_material_get_point_size': Spec(
    return_type = 'float',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
    ],
  ),
  'cogl_material_get_user_program': Spec(
    return_type = 'CoglHandle',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
    ],
  ),
  'cogl_material_set_user_program': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'CoglHandle',
        name = 'program',
      ),
    ],
  ),
  'cogl_material_set_layer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'int',
        name = 'layer_index',
      ),
      Param(
        type = 'CoglHandle',
        name = 'texture',
      ),
    ],
  ),
  'cogl_material_remove_layer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'int',
        name = 'layer_index',
      ),
    ],
  ),
  'cogl_material_set_layer_combine': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'int',
        name = 'layer_index',
      ),
      Param(
        type = 'const char *',
        name = 'blend_string',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'cogl_material_set_layer_combine_constant': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'int',
        name = 'layer_index',
      ),
      Param(
        type = 'const CoglColor *',
        name = 'constant',
      ),
    ],
  ),
  'cogl_material_set_layer_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'int',
        name = 'layer_index',
      ),
      Param(
        type = 'const CoglMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'cogl_material_get_layers': Spec(
    return_type = 'const GList *',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
    ],
  ),
  'cogl_material_get_n_layers': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
    ],
  ),
  'cogl_material_layer_get_type': Spec(
    return_type = 'CoglMaterialLayerType',
    parameters = [
      Param(
        type = 'CoglMaterialLayer *',
        name = 'layer',
      ),
    ],
  ),
  'cogl_material_layer_get_texture': Spec(
    return_type = 'CoglHandle',
    parameters = [
      Param(
        type = 'CoglMaterialLayer *',
        name = 'layer',
      ),
    ],
  ),
  'cogl_material_layer_get_min_filter': Spec(
    return_type = 'CoglMaterialFilter',
    parameters = [
      Param(
        type = 'CoglMaterialLayer *',
        name = 'layer',
      ),
    ],
  ),
  'cogl_material_layer_get_mag_filter': Spec(
    return_type = 'CoglMaterialFilter',
    parameters = [
      Param(
        type = 'CoglMaterialLayer *',
        name = 'layer',
      ),
    ],
  ),
  'cogl_material_set_layer_filters': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'int',
        name = 'layer_index',
      ),
      Param(
        type = 'CoglMaterialFilter',
        name = 'min_filter',
      ),
      Param(
        type = 'CoglMaterialFilter',
        name = 'mag_filter',
      ),
    ],
  ),
  'cogl_material_set_layer_point_sprite_coords_enabled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'int',
        name = 'layer_index',
      ),
      Param(
        type = 'gboolean',
        name = 'enable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'cogl_material_get_layer_point_sprite_coords_enabled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'int',
        name = 'layer_index',
      ),
    ],
  ),
  'cogl_material_get_layer_wrap_mode_s': Spec(
    return_type = 'CoglMaterialWrapMode',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'int',
        name = 'layer_index',
      ),
    ],
  ),
  'cogl_material_set_layer_wrap_mode_s': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'int',
        name = 'layer_index',
      ),
      Param(
        type = 'CoglMaterialWrapMode',
        name = 'mode',
      ),
    ],
  ),
  'cogl_material_get_layer_wrap_mode_t': Spec(
    return_type = 'CoglMaterialWrapMode',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'int',
        name = 'layer_index',
      ),
    ],
  ),
  'cogl_material_set_layer_wrap_mode_t': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'int',
        name = 'layer_index',
      ),
      Param(
        type = 'CoglMaterialWrapMode',
        name = 'mode',
      ),
    ],
  ),
  'cogl_material_get_layer_wrap_mode_p': Spec(
    return_type = 'CoglMaterialWrapMode',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'int',
        name = 'layer_index',
      ),
    ],
  ),
  'cogl_material_set_layer_wrap_mode_p': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'int',
        name = 'layer_index',
      ),
      Param(
        type = 'CoglMaterialWrapMode',
        name = 'mode',
      ),
    ],
  ),
  'cogl_material_set_layer_wrap_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglMaterial *',
        name = 'material',
      ),
      Param(
        type = 'int',
        name = 'layer_index',
      ),
      Param(
        type = 'CoglMaterialWrapMode',
        name = 'mode',
      ),
    ],
  ),
  'cogl_material_layer_get_wrap_mode_s': Spec(
    return_type = 'CoglMaterialWrapMode',
    parameters = [
      Param(
        type = 'CoglMaterialLayer *',
        name = 'layer',
      ),
    ],
  ),
  'cogl_material_layer_get_wrap_mode_t': Spec(
    return_type = 'CoglMaterialWrapMode',
    parameters = [
      Param(
        type = 'CoglMaterialLayer *',
        name = 'layer',
      ),
    ],
  ),
  'cogl_material_layer_get_wrap_mode_p': Spec(
    return_type = 'CoglMaterialWrapMode',
    parameters = [
      Param(
        type = 'CoglMaterialLayer *',
        name = 'layer',
      ),
    ],
  ),
  'cogl_create_shader': Spec(
    return_type = 'CoglHandle',
    parameters = [
      Param(
        type = 'CoglShaderType',
        name = 'shader_type',
      ),
    ],
  ),
  'cogl_shader_ref': Spec(
    return_type = 'CoglHandle',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
    ],
  ),
  'cogl_shader_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
    ],
  ),
  'cogl_is_shader': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
    ],
  ),
  'cogl_shader_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'shader',
      ),
      Param(
        type = 'const char *',
        name = 'source',
      ),
    ],
  ),
  'cogl_shader_compile': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
    ],
  ),
  'cogl_shader_get_info_log': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
    ],
  ),
  'cogl_shader_get_type': Spec(
    return_type = 'CoglShaderType',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
    ],
  ),
  'cogl_shader_is_compiled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
    ],
  ),
  'cogl_create_program': Spec(
    return_type = 'CoglHandle',
    parameters = [
    ],
  ),
  'cogl_program_ref': Spec(
    return_type = 'CoglHandle',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
    ],
  ),
  'cogl_program_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
    ],
  ),
  'cogl_is_program': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
    ],
  ),
  'cogl_program_attach_shader': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'program_handle',
      ),
      Param(
        type = 'CoglHandle',
        name = 'shader_handle',
      ),
    ],
  ),
  'cogl_program_link': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
    ],
  ),
  'cogl_program_use': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
    ],
  ),
  'cogl_program_get_uniform_location': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'handle',
      ),
      Param(
        type = 'const char *',
        name = 'uniform_name',
      ),
    ],
  ),
  'cogl_program_set_uniform_1f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'program',
      ),
      Param(
        type = 'int',
        name = 'uniform_location',
      ),
      Param(
        type = 'float',
        name = 'value',
      ),
    ],
  ),
  'cogl_program_set_uniform_1i': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'program',
      ),
      Param(
        type = 'int',
        name = 'uniform_location',
      ),
      Param(
        type = 'int',
        name = 'value',
      ),
    ],
  ),
  'cogl_program_set_uniform_float': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'program',
      ),
      Param(
        type = 'int',
        name = 'uniform_location',
      ),
      Param(
        type = 'int',
        name = 'n_components',
      ),
      Param(
        type = 'int',
        name = 'count',
      ),
      Param(
        type = 'const float *',
        name = 'value',
      ),
    ],
  ),
  'cogl_program_set_uniform_int': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'program',
      ),
      Param(
        type = 'int',
        name = 'uniform_location',
      ),
      Param(
        type = 'int',
        name = 'n_components',
      ),
      Param(
        type = 'int',
        name = 'count',
      ),
      Param(
        type = 'const int *',
        name = 'value',
      ),
    ],
  ),
  'cogl_program_set_uniform_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'CoglHandle',
        name = 'program',
      ),
      Param(
        type = 'int',
        name = 'uniform_location',
      ),
      Param(
        type = 'int',
        name = 'dimensions',
      ),
      Param(
        type = 'int',
        name = 'count',
      ),
      Param(
        type = 'gboolean',
        name = 'transpose',
      ),
      Param(
        type = 'const float *',
        name = 'value',
      ),
    ],
  ),
  'cogl_program_uniform_1f': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'int',
        name = 'uniform_no',
      ),
      Param(
        type = 'float',
        name = 'value',
      ),
    ],
  ),
  'cogl_program_uniform_1i': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'int',
        name = 'uniform_no',
      ),
      Param(
        type = 'int',
        name = 'value',
      ),
    ],
  ),
  'cogl_program_uniform_float': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'int',
        name = 'uniform_no',
      ),
      Param(
        type = 'int',
        name = 'size',
      ),
      Param(
        type = 'int',
        name = 'count',
      ),
      Param(
        type = 'const float *',
        name = 'value',
      ),
    ],
  ),
  'cogl_program_uniform_int': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'int',
        name = 'uniform_no',
      ),
      Param(
        type = 'int',
        name = 'size',
      ),
      Param(
        type = 'int',
        name = 'count',
      ),
      Param(
        type = 'const int *',
        name = 'value',
      ),
    ],
  ),
  'cogl_program_uniform_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'int',
        name = 'uniform_no',
      ),
      Param(
        type = 'int',
        name = 'size',
      ),
      Param(
        type = 'int',
        name = 'count',
      ),
      Param(
        type = 'gboolean',
        name = 'transpose',
      ),
      Param(
        type = 'const float *',
        name = 'value',
      ),
    ],
  ),
  'clutter_check_version': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'guint',
        name = 'major',
      ),
      Param(
        type = 'guint',
        name = 'minor',
      ),
      Param(
        type = 'guint',
        name = 'micro',
      ),
    ],
  ),
  'clutter_check_windowing_backend': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char *',
        name = 'backend_type',
      ),
    ],
  ),
  'clutter_point_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_point_zero': Spec(
    return_type = 'const ClutterPoint *',
    parameters = [
    ],
  ),
  'clutter_point_alloc': Spec(
    return_type = 'ClutterPoint *',
    parameters = [
    ],
  ),
  'clutter_point_init': Spec(
    return_type = 'ClutterPoint *',
    parameters = [
      Param(
        type = 'ClutterPoint *',
        name = 'point',
      ),
      Param(
        type = 'float',
        name = 'x',
      ),
      Param(
        type = 'float',
        name = 'y',
      ),
    ],
  ),
  'clutter_point_copy': Spec(
    return_type = 'ClutterPoint *',
    parameters = [
      Param(
        type = 'const ClutterPoint *',
        name = 'point',
      ),
    ],
  ),
  'clutter_point_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPoint *',
        name = 'point',
      ),
    ],
  ),
  'clutter_point_equals': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const ClutterPoint *',
        name = 'a',
      ),
      Param(
        type = 'const ClutterPoint *',
        name = 'b',
      ),
    ],
  ),
  'clutter_point_distance': Spec(
    return_type = 'float',
    parameters = [
      Param(
        type = 'const ClutterPoint *',
        name = 'a',
      ),
      Param(
        type = 'const ClutterPoint *',
        name = 'b',
      ),
      Param(
        type = 'float *',
        name = 'x_distance',
      ),
      Param(
        type = 'float *',
        name = 'y_distance',
      ),
    ],
  ),
  'clutter_size_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_size_alloc': Spec(
    return_type = 'ClutterSize *',
    parameters = [
    ],
  ),
  'clutter_size_init': Spec(
    return_type = 'ClutterSize *',
    parameters = [
      Param(
        type = 'ClutterSize *',
        name = 'size',
      ),
      Param(
        type = 'float',
        name = 'width',
      ),
      Param(
        type = 'float',
        name = 'height',
      ),
    ],
  ),
  'clutter_size_copy': Spec(
    return_type = 'ClutterSize *',
    parameters = [
      Param(
        type = 'const ClutterSize *',
        name = 'size',
      ),
    ],
  ),
  'clutter_size_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterSize *',
        name = 'size',
      ),
    ],
  ),
  'clutter_size_equals': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const ClutterSize *',
        name = 'a',
      ),
      Param(
        type = 'const ClutterSize *',
        name = 'b',
      ),
    ],
  ),
  'clutter_rect_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_rect_zero': Spec(
    return_type = 'const ClutterRect *',
    parameters = [
    ],
  ),
  'clutter_rect_alloc': Spec(
    return_type = 'ClutterRect *',
    parameters = [
    ],
  ),
  'clutter_rect_init': Spec(
    return_type = 'ClutterRect *',
    parameters = [
      Param(
        type = 'ClutterRect *',
        name = 'rect',
      ),
      Param(
        type = 'float',
        name = 'x',
      ),
      Param(
        type = 'float',
        name = 'y',
      ),
      Param(
        type = 'float',
        name = 'width',
      ),
      Param(
        type = 'float',
        name = 'height',
      ),
    ],
  ),
  'clutter_rect_copy': Spec(
    return_type = 'ClutterRect *',
    parameters = [
      Param(
        type = 'const ClutterRect *',
        name = 'rect',
      ),
    ],
  ),
  'clutter_rect_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterRect *',
        name = 'rect',
      ),
    ],
  ),
  'clutter_rect_equals': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterRect *',
        name = 'a',
      ),
      Param(
        type = 'ClutterRect *',
        name = 'b',
      ),
    ],
  ),
  'clutter_rect_normalize': Spec(
    return_type = 'ClutterRect *',
    parameters = [
      Param(
        type = 'ClutterRect *',
        name = 'rect',
      ),
    ],
  ),
  'clutter_rect_get_center': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterRect *',
        name = 'rect',
      ),
      Param(
        type = 'ClutterPoint *',
        name = 'center',
      ),
    ],
  ),
  'clutter_rect_contains_point': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterRect *',
        name = 'rect',
      ),
      Param(
        type = 'ClutterPoint *',
        name = 'point',
      ),
    ],
  ),
  'clutter_rect_contains_rect': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterRect *',
        name = 'a',
      ),
      Param(
        type = 'ClutterRect *',
        name = 'b',
      ),
    ],
  ),
  'clutter_rect_union': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterRect *',
        name = 'a',
      ),
      Param(
        type = 'ClutterRect *',
        name = 'b',
      ),
      Param(
        type = 'ClutterRect *',
        name = 'res',
      ),
    ],
  ),
  'clutter_rect_intersection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterRect *',
        name = 'a',
      ),
      Param(
        type = 'ClutterRect *',
        name = 'b',
      ),
      Param(
        type = 'ClutterRect *',
        name = 'res',
      ),
    ],
  ),
  'clutter_rect_offset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterRect *',
        name = 'rect',
      ),
      Param(
        type = 'float',
        name = 'd_x',
      ),
      Param(
        type = 'float',
        name = 'd_y',
      ),
    ],
  ),
  'clutter_rect_inset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterRect *',
        name = 'rect',
      ),
      Param(
        type = 'float',
        name = 'd_x',
      ),
      Param(
        type = 'float',
        name = 'd_y',
      ),
    ],
  ),
  'clutter_rect_clamp_to_pixel': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterRect *',
        name = 'rect',
      ),
    ],
  ),
  'clutter_rect_get_x': Spec(
    return_type = 'float',
    parameters = [
      Param(
        type = 'ClutterRect *',
        name = 'rect',
      ),
    ],
  ),
  'clutter_rect_get_y': Spec(
    return_type = 'float',
    parameters = [
      Param(
        type = 'ClutterRect *',
        name = 'rect',
      ),
    ],
  ),
  'clutter_rect_get_width': Spec(
    return_type = 'float',
    parameters = [
      Param(
        type = 'ClutterRect *',
        name = 'rect',
      ),
    ],
  ),
  'clutter_rect_get_height': Spec(
    return_type = 'float',
    parameters = [
      Param(
        type = 'ClutterRect *',
        name = 'rect',
      ),
    ],
  ),
  'clutter_vertex_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_vertex_new': Spec(
    return_type = 'ClutterVertex *',
    parameters = [
      Param(
        type = 'gfloat',
        name = 'x',
      ),
      Param(
        type = 'gfloat',
        name = 'y',
      ),
      Param(
        type = 'gfloat',
        name = 'z',
      ),
    ],
  ),
  'clutter_vertex_alloc': Spec(
    return_type = 'ClutterVertex *',
    parameters = [
    ],
  ),
  'clutter_vertex_init': Spec(
    return_type = 'ClutterVertex *',
    parameters = [
      Param(
        type = 'ClutterVertex *',
        name = 'vertex',
      ),
      Param(
        type = 'gfloat',
        name = 'x',
      ),
      Param(
        type = 'gfloat',
        name = 'y',
      ),
      Param(
        type = 'gfloat',
        name = 'z',
      ),
    ],
  ),
  'clutter_vertex_copy': Spec(
    return_type = 'ClutterVertex *',
    parameters = [
      Param(
        type = 'const ClutterVertex *',
        name = 'vertex',
      ),
    ],
  ),
  'clutter_vertex_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterVertex *',
        name = 'vertex',
      ),
    ],
  ),
  'clutter_vertex_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const ClutterVertex *',
        name = 'vertex_a',
      ),
      Param(
        type = 'const ClutterVertex *',
        name = 'vertex_b',
      ),
    ],
  ),
  'clutter_actor_box_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_actor_box_new': Spec(
    return_type = 'ClutterActorBox *',
    parameters = [
      Param(
        type = 'gfloat',
        name = 'x_1',
      ),
      Param(
        type = 'gfloat',
        name = 'y_1',
      ),
      Param(
        type = 'gfloat',
        name = 'x_2',
      ),
      Param(
        type = 'gfloat',
        name = 'y_2',
      ),
    ],
  ),
  'clutter_actor_box_alloc': Spec(
    return_type = 'ClutterActorBox *',
    parameters = [
    ],
  ),
  'clutter_actor_box_init': Spec(
    return_type = 'ClutterActorBox *',
    parameters = [
      Param(
        type = 'ClutterActorBox *',
        name = 'box',
      ),
      Param(
        type = 'gfloat',
        name = 'x_1',
      ),
      Param(
        type = 'gfloat',
        name = 'y_1',
      ),
      Param(
        type = 'gfloat',
        name = 'x_2',
      ),
      Param(
        type = 'gfloat',
        name = 'y_2',
      ),
    ],
  ),
  'clutter_actor_box_init_rect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActorBox *',
        name = 'box',
      ),
      Param(
        type = 'gfloat',
        name = 'x',
      ),
      Param(
        type = 'gfloat',
        name = 'y',
      ),
      Param(
        type = 'gfloat',
        name = 'width',
      ),
      Param(
        type = 'gfloat',
        name = 'height',
      ),
    ],
  ),
  'clutter_actor_box_copy': Spec(
    return_type = 'ClutterActorBox *',
    parameters = [
      Param(
        type = 'const ClutterActorBox *',
        name = 'box',
      ),
    ],
  ),
  'clutter_actor_box_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActorBox *',
        name = 'box',
      ),
    ],
  ),
  'clutter_actor_box_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const ClutterActorBox *',
        name = 'box_a',
      ),
      Param(
        type = 'const ClutterActorBox *',
        name = 'box_b',
      ),
    ],
  ),
  'clutter_actor_box_get_x': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'const ClutterActorBox *',
        name = 'box',
      ),
    ],
  ),
  'clutter_actor_box_get_y': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'const ClutterActorBox *',
        name = 'box',
      ),
    ],
  ),
  'clutter_actor_box_get_width': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'const ClutterActorBox *',
        name = 'box',
      ),
    ],
  ),
  'clutter_actor_box_get_height': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'const ClutterActorBox *',
        name = 'box',
      ),
    ],
  ),
  'clutter_actor_box_get_origin': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const ClutterActorBox *',
        name = 'box',
      ),
      Param(
        type = 'gfloat *',
        name = 'x',
      ),
      Param(
        type = 'gfloat *',
        name = 'y',
      ),
    ],
  ),
  'clutter_actor_box_get_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const ClutterActorBox *',
        name = 'box',
      ),
      Param(
        type = 'gfloat *',
        name = 'width',
      ),
      Param(
        type = 'gfloat *',
        name = 'height',
      ),
    ],
  ),
  'clutter_actor_box_get_area': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'const ClutterActorBox *',
        name = 'box',
      ),
    ],
  ),
  'clutter_actor_box_contains': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const ClutterActorBox *',
        name = 'box',
      ),
      Param(
        type = 'gfloat',
        name = 'x',
      ),
      Param(
        type = 'gfloat',
        name = 'y',
      ),
    ],
  ),
  'clutter_actor_box_from_vertices': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActorBox *',
        name = 'box',
      ),
      Param(
        type = 'const ClutterVertex []',
        name = 'verts',
      ),
    ],
  ),
  'clutter_actor_box_interpolate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const ClutterActorBox *',
        name = 'initial',
      ),
      Param(
        type = 'const ClutterActorBox *',
        name = 'final',
      ),
      Param(
        type = 'gdouble',
        name = 'progress',
      ),
      Param(
        type = 'ClutterActorBox *',
        name = 'result',
      ),
    ],
  ),
  'clutter_actor_box_clamp_to_pixel': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActorBox *',
        name = 'box',
      ),
    ],
  ),
  'clutter_actor_box_union': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const ClutterActorBox *',
        name = 'a',
      ),
      Param(
        type = 'const ClutterActorBox *',
        name = 'b',
      ),
      Param(
        type = 'ClutterActorBox *',
        name = 'result',
      ),
    ],
  ),
  'clutter_actor_box_set_origin': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActorBox *',
        name = 'box',
      ),
      Param(
        type = 'gfloat',
        name = 'x',
      ),
      Param(
        type = 'gfloat',
        name = 'y',
      ),
    ],
  ),
  'clutter_actor_box_set_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActorBox *',
        name = 'box',
      ),
      Param(
        type = 'gfloat',
        name = 'width',
      ),
      Param(
        type = 'gfloat',
        name = 'height',
      ),
    ],
  ),
  'clutter_geometry_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_geometry_union': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const ClutterGeometry *',
        name = 'geometry_a',
      ),
      Param(
        type = 'const ClutterGeometry *',
        name = 'geometry_b',
      ),
      Param(
        type = 'ClutterGeometry *',
        name = 'result',
      ),
    ],
  ),
  'clutter_geometry_intersects': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const ClutterGeometry *',
        name = 'geometry0',
      ),
      Param(
        type = 'const ClutterGeometry *',
        name = 'geometry1',
      ),
    ],
  ),
  'clutter_knot_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_knot_copy': Spec(
    return_type = 'ClutterKnot *',
    parameters = [
      Param(
        type = 'const ClutterKnot *',
        name = 'knot',
      ),
    ],
  ),
  'clutter_knot_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterKnot *',
        name = 'knot',
      ),
    ],
  ),
  'clutter_knot_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const ClutterKnot *',
        name = 'knot_a',
      ),
      Param(
        type = 'const ClutterKnot *',
        name = 'knot_b',
      ),
    ],
  ),
  'clutter_path_node_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_path_node_copy': Spec(
    return_type = 'ClutterPathNode *',
    parameters = [
      Param(
        type = 'const ClutterPathNode *',
        name = 'node',
      ),
    ],
  ),
  'clutter_path_node_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPathNode *',
        name = 'node',
      ),
    ],
  ),
  'clutter_path_node_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const ClutterPathNode *',
        name = 'node_a',
      ),
      Param(
        type = 'const ClutterPathNode *',
        name = 'node_b',
      ),
    ],
  ),
  'clutter_paint_volume_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_paint_volume_copy': Spec(
    return_type = 'ClutterPaintVolume *',
    parameters = [
      Param(
        type = 'const ClutterPaintVolume *',
        name = 'pv',
      ),
    ],
  ),
  'clutter_paint_volume_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPaintVolume *',
        name = 'pv',
      ),
    ],
  ),
  'clutter_paint_volume_set_origin': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPaintVolume *',
        name = 'pv',
      ),
      Param(
        type = 'const ClutterVertex *',
        name = 'origin',
      ),
    ],
  ),
  'clutter_paint_volume_get_origin': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const ClutterPaintVolume *',
        name = 'pv',
      ),
      Param(
        type = 'ClutterVertex *',
        name = 'vertex',
      ),
    ],
  ),
  'clutter_paint_volume_set_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPaintVolume *',
        name = 'pv',
      ),
      Param(
        type = 'gfloat',
        name = 'width',
      ),
    ],
  ),
  'clutter_paint_volume_get_width': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'const ClutterPaintVolume *',
        name = 'pv',
      ),
    ],
  ),
  'clutter_paint_volume_set_height': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPaintVolume *',
        name = 'pv',
      ),
      Param(
        type = 'gfloat',
        name = 'height',
      ),
    ],
  ),
  'clutter_paint_volume_get_height': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'const ClutterPaintVolume *',
        name = 'pv',
      ),
    ],
  ),
  'clutter_paint_volume_set_depth': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPaintVolume *',
        name = 'pv',
      ),
      Param(
        type = 'gfloat',
        name = 'depth',
      ),
    ],
  ),
  'clutter_paint_volume_get_depth': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'const ClutterPaintVolume *',
        name = 'pv',
      ),
    ],
  ),
  'clutter_paint_volume_union': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPaintVolume *',
        name = 'pv',
      ),
      Param(
        type = 'const ClutterPaintVolume *',
        name = 'another_pv',
      ),
    ],
  ),
  'clutter_paint_volume_union_box': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPaintVolume *',
        name = 'pv',
      ),
      Param(
        type = 'const ClutterActorBox *',
        name = 'box',
      ),
    ],
  ),
  'clutter_paint_volume_set_from_allocation': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterPaintVolume *',
        name = 'pv',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_margin_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_margin_new': Spec(
    return_type = 'ClutterMargin *',
    parameters = [
    ],
  ),
  'clutter_margin_copy': Spec(
    return_type = 'ClutterMargin *',
    parameters = [
      Param(
        type = 'const ClutterMargin *',
        name = 'margin_',
      ),
    ],
  ),
  'clutter_margin_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterMargin *',
        name = 'margin_',
      ),
    ],
  ),
  'clutter_interval_register_progress_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'value_type',
      ),
      Param(
        type = 'ClutterProgressFunc',
        name = 'func',
      ),
    ],
  ),
  'clutter_matrix_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_matrix_alloc': Spec(
    return_type = 'ClutterMatrix *',
    parameters = [
    ],
  ),
  'clutter_matrix_init_identity': Spec(
    return_type = 'ClutterMatrix *',
    parameters = [
      Param(
        type = 'ClutterMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'clutter_matrix_init_from_array': Spec(
    return_type = 'ClutterMatrix *',
    parameters = [
      Param(
        type = 'ClutterMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'const float [16]',
        name = 'values',
      ),
    ],
  ),
  'clutter_matrix_init_from_matrix': Spec(
    return_type = 'ClutterMatrix *',
    parameters = [
      Param(
        type = 'ClutterMatrix *',
        name = 'a',
      ),
      Param(
        type = 'const ClutterMatrix *',
        name = 'b',
      ),
    ],
  ),
  'clutter_matrix_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'clutter_actor_meta_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_actor_meta_set_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActorMeta *',
        name = 'meta',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'clutter_actor_meta_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'ClutterActorMeta *',
        name = 'meta',
      ),
    ],
  ),
  'clutter_actor_meta_set_enabled': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActorMeta *',
        name = 'meta',
      ),
      Param(
        type = 'gboolean',
        name = 'is_enabled',
      ),
    ],
  ),
  'clutter_actor_meta_get_enabled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActorMeta *',
        name = 'meta',
      ),
    ],
  ),
  'clutter_actor_meta_get_actor': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterActorMeta *',
        name = 'meta',
      ),
    ],
  ),
  'clutter_action_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_actor_add_action': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterAction *',
        name = 'action',
      ),
    ],
  ),
  'clutter_actor_add_action_with_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'ClutterAction *',
        name = 'action',
      ),
    ],
  ),
  'clutter_actor_remove_action': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterAction *',
        name = 'action',
      ),
    ],
  ),
  'clutter_actor_remove_action_by_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'clutter_actor_get_action': Spec(
    return_type = 'ClutterAction *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'clutter_actor_get_actions': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_clear_actions': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_has_actions': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'pango_coverage_new': Spec(
    return_type = 'PangoCoverage *',
    parameters = [
    ],
  ),
  'pango_coverage_ref': Spec(
    return_type = 'PangoCoverage *',
    parameters = [
      Param(
        type = 'PangoCoverage *',
        name = 'coverage',
      ),
    ],
  ),
  'pango_coverage_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoCoverage *',
        name = 'coverage',
      ),
    ],
  ),
  'pango_coverage_copy': Spec(
    return_type = 'PangoCoverage *',
    parameters = [
      Param(
        type = 'PangoCoverage *',
        name = 'coverage',
      ),
    ],
  ),
  'pango_coverage_get': Spec(
    return_type = 'PangoCoverageLevel',
    parameters = [
      Param(
        type = 'PangoCoverage *',
        name = 'coverage',
      ),
      Param(
        type = 'int',
        name = 'index_',
      ),
    ],
  ),
  'pango_coverage_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoCoverage *',
        name = 'coverage',
      ),
      Param(
        type = 'int',
        name = 'index_',
      ),
      Param(
        type = 'PangoCoverageLevel',
        name = 'level',
      ),
    ],
  ),
  'pango_coverage_max': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoCoverage *',
        name = 'coverage',
      ),
      Param(
        type = 'PangoCoverage *',
        name = 'other',
      ),
    ],
  ),
  'pango_coverage_to_bytes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoCoverage *',
        name = 'coverage',
      ),
      Param(
        type = 'guchar **',
        name = 'bytes',
      ),
      Param(
        type = 'int *',
        name = 'n_bytes',
      ),
    ],
  ),
  'pango_coverage_from_bytes': Spec(
    return_type = 'PangoCoverage *',
    parameters = [
      Param(
        type = 'guchar *',
        name = 'bytes',
      ),
      Param(
        type = 'int',
        name = 'n_bytes',
      ),
    ],
  ),
  'pango_units_from_double': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'double',
        name = 'd',
      ),
    ],
  ),
  'pango_units_to_double': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'int',
        name = 'i',
      ),
    ],
  ),
  'pango_extents_to_pixels': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRectangle *',
        name = 'inclusive',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'nearest',
      ),
    ],
  ),
  'pango_matrix_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_matrix_copy': Spec(
    return_type = 'PangoMatrix *',
    parameters = [
      Param(
        type = 'const PangoMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'pango_matrix_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'pango_matrix_translate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'double',
        name = 'tx',
      ),
      Param(
        type = 'double',
        name = 'ty',
      ),
    ],
  ),
  'pango_matrix_scale': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'double',
        name = 'scale_x',
      ),
      Param(
        type = 'double',
        name = 'scale_y',
      ),
    ],
  ),
  'pango_matrix_rotate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'double',
        name = 'degrees',
      ),
    ],
  ),
  'pango_matrix_concat': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'const PangoMatrix *',
        name = 'new_matrix',
      ),
    ],
  ),
  'pango_matrix_transform_point': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const PangoMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'double *',
        name = 'x',
      ),
      Param(
        type = 'double *',
        name = 'y',
      ),
    ],
  ),
  'pango_matrix_transform_distance': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const PangoMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'double *',
        name = 'dx',
      ),
      Param(
        type = 'double *',
        name = 'dy',
      ),
    ],
  ),
  'pango_matrix_transform_rectangle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const PangoMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'rect',
      ),
    ],
  ),
  'pango_matrix_transform_pixel_rectangle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const PangoMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'rect',
      ),
    ],
  ),
  'pango_matrix_get_font_scale_factor': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'const PangoMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'pango_script_for_unichar': Spec(
    return_type = 'PangoScript',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'ch',
      ),
    ],
  ),
  'pango_script_iter_new': Spec(
    return_type = 'PangoScriptIter *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'text',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
    ],
  ),
  'pango_script_iter_get_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoScriptIter *',
        name = 'iter',
      ),
      Param(
        type = 'const char **',
        name = 'start',
      ),
      Param(
        type = 'const char **',
        name = 'end',
      ),
      Param(
        type = 'PangoScript *',
        name = 'script',
      ),
    ],
  ),
  'pango_script_iter_next': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoScriptIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_script_iter_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoScriptIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_language_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_language_from_string': Spec(
    return_type = 'PangoLanguage *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'language',
      ),
    ],
  ),
  'pango_language_to_string': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
    ],
  ),
  'pango_language_get_sample_string': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
    ],
  ),
  'pango_language_get_default': Spec(
    return_type = 'PangoLanguage *',
    parameters = [
    ],
  ),
  'pango_language_matches': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
      Param(
        type = 'const char *',
        name = 'range_list',
      ),
    ],
  ),
  'pango_language_includes_script': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
      Param(
        type = 'PangoScript',
        name = 'script',
      ),
    ],
  ),
  'pango_language_get_scripts': Spec(
    return_type = 'const PangoScript *',
    parameters = [
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
      Param(
        type = 'int *',
        name = 'num_scripts',
      ),
    ],
  ),
  'pango_script_get_sample_language': Spec(
    return_type = 'PangoLanguage *',
    parameters = [
      Param(
        type = 'PangoScript',
        name = 'script',
      ),
    ],
  ),
  'pango_gravity_to_rotation': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'PangoGravity',
        name = 'gravity',
      ),
    ],
  ),
  'pango_gravity_get_for_matrix': Spec(
    return_type = 'PangoGravity',
    parameters = [
      Param(
        type = 'const PangoMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'pango_gravity_get_for_script': Spec(
    return_type = 'PangoGravity',
    parameters = [
      Param(
        type = 'PangoScript',
        name = 'script',
      ),
      Param(
        type = 'PangoGravity',
        name = 'base_gravity',
      ),
      Param(
        type = 'PangoGravityHint',
        name = 'hint',
      ),
    ],
  ),
  'pango_gravity_get_for_script_and_width': Spec(
    return_type = 'PangoGravity',
    parameters = [
      Param(
        type = 'PangoScript',
        name = 'script',
      ),
      Param(
        type = 'gboolean',
        name = 'wide',
      ),
      Param(
        type = 'PangoGravity',
        name = 'base_gravity',
      ),
      Param(
        type = 'PangoGravityHint',
        name = 'hint',
      ),
    ],
  ),
  'pango_bidi_type_for_unichar': Spec(
    return_type = 'PangoBidiType',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'ch',
      ),
    ],
  ),
  'pango_unichar_direction': Spec(
    return_type = 'PangoDirection',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'ch',
      ),
    ],
  ),
  'pango_find_base_dir': Spec(
    return_type = 'PangoDirection',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'length',
      ),
    ],
  ),
  'pango_get_mirror_char': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'ch',
      ),
      Param(
        type = 'gunichar *',
        name = 'mirrored_ch',
      ),
    ],
  ),
  'pango_font_description_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_font_description_new': Spec(
    return_type = 'PangoFontDescription *',
    parameters = [
    ],
  ),
  'pango_font_description_copy': Spec(
    return_type = 'PangoFontDescription *',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_copy_static': Spec(
    return_type = 'PangoFontDescription *',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc1',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc2',
      ),
    ],
  ),
  'pango_font_description_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_descriptions_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription **',
        name = 'descs',
      ),
      Param(
        type = 'int',
        name = 'n_descs',
      ),
    ],
  ),
  'pango_font_description_set_family': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'const char *',
        name = 'family',
      ),
    ],
  ),
  'pango_font_description_set_family_static': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'const char *',
        name = 'family',
      ),
    ],
  ),
  'pango_font_description_get_family': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_set_style': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'PangoStyle',
        name = 'style',
      ),
    ],
  ),
  'pango_font_description_get_style': Spec(
    return_type = 'PangoStyle',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_set_variant': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'PangoVariant',
        name = 'variant',
      ),
    ],
  ),
  'pango_font_description_get_variant': Spec(
    return_type = 'PangoVariant',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_set_weight': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'PangoWeight',
        name = 'weight',
      ),
    ],
  ),
  'pango_font_description_get_weight': Spec(
    return_type = 'PangoWeight',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_set_stretch': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'PangoStretch',
        name = 'stretch',
      ),
    ],
  ),
  'pango_font_description_get_stretch': Spec(
    return_type = 'PangoStretch',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_set_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'gint',
        name = 'size',
      ),
    ],
  ),
  'pango_font_description_get_size': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_set_absolute_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'double',
        name = 'size',
      ),
    ],
  ),
  'pango_font_description_get_size_is_absolute': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_set_gravity': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'PangoGravity',
        name = 'gravity',
      ),
    ],
  ),
  'pango_font_description_get_gravity': Spec(
    return_type = 'PangoGravity',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_get_set_fields': Spec(
    return_type = 'PangoFontMask',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_unset_fields': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'PangoFontMask',
        name = 'to_unset',
      ),
    ],
  ),
  'pango_font_description_merge': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc_to_merge',
      ),
      Param(
        type = 'gboolean',
        name = 'replace_existing',
      ),
    ],
  ),
  'pango_font_description_merge_static': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc_to_merge',
      ),
      Param(
        type = 'gboolean',
        name = 'replace_existing',
      ),
    ],
  ),
  'pango_font_description_better_match': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'old_match',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'new_match',
      ),
    ],
  ),
  'pango_font_description_from_string': Spec(
    return_type = 'PangoFontDescription *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'str',
      ),
    ],
  ),
  'pango_font_description_to_string': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_to_filename': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_metrics_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_font_metrics_ref': Spec(
    return_type = 'PangoFontMetrics *',
    parameters = [
      Param(
        type = 'PangoFontMetrics *',
        name = 'metrics',
      ),
    ],
  ),
  'pango_font_metrics_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontMetrics *',
        name = 'metrics',
      ),
    ],
  ),
  'pango_font_metrics_get_ascent': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoFontMetrics *',
        name = 'metrics',
      ),
    ],
  ),
  'pango_font_metrics_get_descent': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoFontMetrics *',
        name = 'metrics',
      ),
    ],
  ),
  'pango_font_metrics_get_approximate_char_width': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoFontMetrics *',
        name = 'metrics',
      ),
    ],
  ),
  'pango_font_metrics_get_approximate_digit_width': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoFontMetrics *',
        name = 'metrics',
      ),
    ],
  ),
  'pango_font_metrics_get_underline_position': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoFontMetrics *',
        name = 'metrics',
      ),
    ],
  ),
  'pango_font_metrics_get_underline_thickness': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoFontMetrics *',
        name = 'metrics',
      ),
    ],
  ),
  'pango_font_metrics_get_strikethrough_position': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoFontMetrics *',
        name = 'metrics',
      ),
    ],
  ),
  'pango_font_metrics_get_strikethrough_thickness': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoFontMetrics *',
        name = 'metrics',
      ),
    ],
  ),
  'pango_font_family_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_font_family_list_faces': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontFamily *',
        name = 'family',
      ),
      Param(
        type = 'PangoFontFace ***',
        name = 'faces',
      ),
      Param(
        type = 'int *',
        name = 'n_faces',
      ),
    ],
  ),
  'pango_font_family_get_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'PangoFontFamily *',
        name = 'family',
      ),
    ],
  ),
  'pango_font_family_is_monospace': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoFontFamily *',
        name = 'family',
      ),
    ],
  ),
  'pango_font_face_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_font_face_describe': Spec(
    return_type = 'PangoFontDescription *',
    parameters = [
      Param(
        type = 'PangoFontFace *',
        name = 'face',
      ),
    ],
  ),
  'pango_font_face_get_face_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'PangoFontFace *',
        name = 'face',
      ),
    ],
  ),
  'pango_font_face_list_sizes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontFace *',
        name = 'face',
      ),
      Param(
        type = 'int **',
        name = 'sizes',
      ),
      Param(
        type = 'int *',
        name = 'n_sizes',
      ),
    ],
  ),
  'pango_font_face_is_synthesized': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoFontFace *',
        name = 'face',
      ),
    ],
  ),
  'pango_font_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_font_describe': Spec(
    return_type = 'PangoFontDescription *',
    parameters = [
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
    ],
  ),
  'pango_font_describe_with_absolute_size': Spec(
    return_type = 'PangoFontDescription *',
    parameters = [
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
    ],
  ),
  'pango_font_get_coverage': Spec(
    return_type = 'PangoCoverage *',
    parameters = [
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
    ],
  ),
  'pango_font_find_shaper': Spec(
    return_type = 'PangoEngineShape *',
    parameters = [
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
      Param(
        type = 'guint32',
        name = 'ch',
      ),
    ],
  ),
  'pango_font_get_metrics': Spec(
    return_type = 'PangoFontMetrics *',
    parameters = [
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
    ],
  ),
  'pango_font_get_glyph_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
      Param(
        type = 'PangoGlyph',
        name = 'glyph',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_font_get_font_map': Spec(
    return_type = 'PangoFontMap *',
    parameters = [
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
    ],
  ),
  'pango_color_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_color_copy': Spec(
    return_type = 'PangoColor *',
    parameters = [
      Param(
        type = 'const PangoColor *',
        name = 'src',
      ),
    ],
  ),
  'pango_color_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoColor *',
        name = 'color',
      ),
    ],
  ),
  'pango_color_parse': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoColor *',
        name = 'color',
      ),
      Param(
        type = 'const char *',
        name = 'spec',
      ),
    ],
  ),
  'pango_color_to_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const PangoColor *',
        name = 'color',
      ),
    ],
  ),
  'pango_attr_type_register': Spec(
    return_type = 'PangoAttrType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'pango_attr_type_get_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'PangoAttrType',
        name = 'type',
      ),
    ],
  ),
  'pango_attribute_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoAttribute *',
        name = 'attr',
      ),
      Param(
        type = 'const PangoAttrClass *',
        name = 'klass',
      ),
    ],
  ),
  'pango_attribute_copy': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'const PangoAttribute *',
        name = 'attr',
      ),
    ],
  ),
  'pango_attribute_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoAttribute *',
        name = 'attr',
      ),
    ],
  ),
  'pango_attribute_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const PangoAttribute *',
        name = 'attr1',
      ),
      Param(
        type = 'const PangoAttribute *',
        name = 'attr2',
      ),
    ],
  ),
  'pango_attr_language_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
    ],
  ),
  'pango_attr_family_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'family',
      ),
    ],
  ),
  'pango_attr_foreground_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'guint16',
        name = 'red',
      ),
      Param(
        type = 'guint16',
        name = 'green',
      ),
      Param(
        type = 'guint16',
        name = 'blue',
      ),
    ],
  ),
  'pango_attr_background_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'guint16',
        name = 'red',
      ),
      Param(
        type = 'guint16',
        name = 'green',
      ),
      Param(
        type = 'guint16',
        name = 'blue',
      ),
    ],
  ),
  'pango_attr_size_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'int',
        name = 'size',
      ),
    ],
  ),
  'pango_attr_size_new_absolute': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'int',
        name = 'size',
      ),
    ],
  ),
  'pango_attr_style_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'PangoStyle',
        name = 'style',
      ),
    ],
  ),
  'pango_attr_weight_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'PangoWeight',
        name = 'weight',
      ),
    ],
  ),
  'pango_attr_variant_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'PangoVariant',
        name = 'variant',
      ),
    ],
  ),
  'pango_attr_stretch_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'PangoStretch',
        name = 'stretch',
      ),
    ],
  ),
  'pango_attr_font_desc_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_attr_underline_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'PangoUnderline',
        name = 'underline',
      ),
    ],
  ),
  'pango_attr_underline_color_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'guint16',
        name = 'red',
      ),
      Param(
        type = 'guint16',
        name = 'green',
      ),
      Param(
        type = 'guint16',
        name = 'blue',
      ),
    ],
  ),
  'pango_attr_strikethrough_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'strikethrough',
      ),
    ],
  ),
  'pango_attr_strikethrough_color_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'guint16',
        name = 'red',
      ),
      Param(
        type = 'guint16',
        name = 'green',
      ),
      Param(
        type = 'guint16',
        name = 'blue',
      ),
    ],
  ),
  'pango_attr_rise_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'int',
        name = 'rise',
      ),
    ],
  ),
  'pango_attr_scale_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'double',
        name = 'scale_factor',
      ),
    ],
  ),
  'pango_attr_fallback_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'enable_fallback',
      ),
    ],
  ),
  'pango_attr_letter_spacing_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'int',
        name = 'letter_spacing',
      ),
    ],
  ),
  'pango_attr_shape_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'const PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'const PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_attr_shape_new_with_data': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'const PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'const PangoRectangle *',
        name = 'logical_rect',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'PangoAttrDataCopyFunc',
        name = 'copy_func',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy_func',
      ),
    ],
  ),
  'pango_attr_gravity_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'PangoGravity',
        name = 'gravity',
      ),
    ],
  ),
  'pango_attr_gravity_hint_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'PangoGravityHint',
        name = 'hint',
      ),
    ],
  ),
  'pango_attr_list_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_attr_list_new': Spec(
    return_type = 'PangoAttrList *',
    parameters = [
    ],
  ),
  'pango_attr_list_ref': Spec(
    return_type = 'PangoAttrList *',
    parameters = [
      Param(
        type = 'PangoAttrList *',
        name = 'list',
      ),
    ],
  ),
  'pango_attr_list_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoAttrList *',
        name = 'list',
      ),
    ],
  ),
  'pango_attr_list_copy': Spec(
    return_type = 'PangoAttrList *',
    parameters = [
      Param(
        type = 'PangoAttrList *',
        name = 'list',
      ),
    ],
  ),
  'pango_attr_list_insert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoAttrList *',
        name = 'list',
      ),
      Param(
        type = 'PangoAttribute *',
        name = 'attr',
      ),
    ],
  ),
  'pango_attr_list_insert_before': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoAttrList *',
        name = 'list',
      ),
      Param(
        type = 'PangoAttribute *',
        name = 'attr',
      ),
    ],
  ),
  'pango_attr_list_change': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoAttrList *',
        name = 'list',
      ),
      Param(
        type = 'PangoAttribute *',
        name = 'attr',
      ),
    ],
  ),
  'pango_attr_list_splice': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoAttrList *',
        name = 'list',
      ),
      Param(
        type = 'PangoAttrList *',
        name = 'other',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
      Param(
        type = 'gint',
        name = 'len',
      ),
    ],
  ),
  'pango_attr_list_filter': Spec(
    return_type = 'PangoAttrList *',
    parameters = [
      Param(
        type = 'PangoAttrList *',
        name = 'list',
      ),
      Param(
        type = 'PangoAttrFilterFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'pango_attr_list_get_iterator': Spec(
    return_type = 'PangoAttrIterator *',
    parameters = [
      Param(
        type = 'PangoAttrList *',
        name = 'list',
      ),
    ],
  ),
  'pango_attr_iterator_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoAttrIterator *',
        name = 'iterator',
      ),
      Param(
        type = 'gint *',
        name = 'start',
      ),
      Param(
        type = 'gint *',
        name = 'end',
      ),
    ],
  ),
  'pango_attr_iterator_next': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoAttrIterator *',
        name = 'iterator',
      ),
    ],
  ),
  'pango_attr_iterator_copy': Spec(
    return_type = 'PangoAttrIterator *',
    parameters = [
      Param(
        type = 'PangoAttrIterator *',
        name = 'iterator',
      ),
    ],
  ),
  'pango_attr_iterator_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoAttrIterator *',
        name = 'iterator',
      ),
    ],
  ),
  'pango_attr_iterator_get': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'PangoAttrIterator *',
        name = 'iterator',
      ),
      Param(
        type = 'PangoAttrType',
        name = 'type',
      ),
    ],
  ),
  'pango_attr_iterator_get_font': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoAttrIterator *',
        name = 'iterator',
      ),
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'PangoLanguage **',
        name = 'language',
      ),
      Param(
        type = 'GSList **',
        name = 'extra_attrs',
      ),
    ],
  ),
  'pango_attr_iterator_get_attrs': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'PangoAttrIterator *',
        name = 'iterator',
      ),
    ],
  ),
  'pango_parse_markup': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char *',
        name = 'markup_text',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
      Param(
        type = 'gunichar',
        name = 'accel_marker',
      ),
      Param(
        type = 'PangoAttrList **',
        name = 'attr_list',
      ),
      Param(
        type = 'char **',
        name = 'text',
      ),
      Param(
        type = 'gunichar *',
        name = 'accel_char',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'pango_item_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_item_new': Spec(
    return_type = 'PangoItem *',
    parameters = [
    ],
  ),
  'pango_item_copy': Spec(
    return_type = 'PangoItem *',
    parameters = [
      Param(
        type = 'PangoItem *',
        name = 'item',
      ),
    ],
  ),
  'pango_item_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoItem *',
        name = 'item',
      ),
    ],
  ),
  'pango_item_split': Spec(
    return_type = 'PangoItem *',
    parameters = [
      Param(
        type = 'PangoItem *',
        name = 'orig',
      ),
      Param(
        type = 'int',
        name = 'split_index',
      ),
      Param(
        type = 'int',
        name = 'split_offset',
      ),
    ],
  ),
  'pango_break': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
      Param(
        type = 'PangoAnalysis *',
        name = 'analysis',
      ),
      Param(
        type = 'PangoLogAttr *',
        name = 'attrs',
      ),
      Param(
        type = 'int',
        name = 'attrs_len',
      ),
    ],
  ),
  'pango_find_paragraph_boundary': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'length',
      ),
      Param(
        type = 'gint *',
        name = 'paragraph_delimiter_index',
      ),
      Param(
        type = 'gint *',
        name = 'next_paragraph_start',
      ),
    ],
  ),
  'pango_get_log_attrs': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'text',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
      Param(
        type = 'int',
        name = 'level',
      ),
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
      Param(
        type = 'PangoLogAttr *',
        name = 'log_attrs',
      ),
      Param(
        type = 'int',
        name = 'attrs_len',
      ),
    ],
  ),
  'pango_fontset_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_fontset_get_font': Spec(
    return_type = 'PangoFont *',
    parameters = [
      Param(
        type = 'PangoFontset *',
        name = 'fontset',
      ),
      Param(
        type = 'guint',
        name = 'wc',
      ),
    ],
  ),
  'pango_fontset_get_metrics': Spec(
    return_type = 'PangoFontMetrics *',
    parameters = [
      Param(
        type = 'PangoFontset *',
        name = 'fontset',
      ),
    ],
  ),
  'pango_fontset_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontset *',
        name = 'fontset',
      ),
      Param(
        type = 'PangoFontsetForeachFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'pango_font_map_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_font_map_create_context': Spec(
    return_type = 'PangoContext *',
    parameters = [
      Param(
        type = 'PangoFontMap *',
        name = 'fontmap',
      ),
    ],
  ),
  'pango_font_map_load_font': Spec(
    return_type = 'PangoFont *',
    parameters = [
      Param(
        type = 'PangoFontMap *',
        name = 'fontmap',
      ),
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_map_load_fontset': Spec(
    return_type = 'PangoFontset *',
    parameters = [
      Param(
        type = 'PangoFontMap *',
        name = 'fontmap',
      ),
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
    ],
  ),
  'pango_font_map_list_families': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontMap *',
        name = 'fontmap',
      ),
      Param(
        type = 'PangoFontFamily ***',
        name = 'families',
      ),
      Param(
        type = 'int *',
        name = 'n_families',
      ),
    ],
  ),
  'pango_context_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_context_new': Spec(
    return_type = 'PangoContext *',
    parameters = [
    ],
  ),
  'pango_context_set_font_map': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'PangoFontMap *',
        name = 'font_map',
      ),
    ],
  ),
  'pango_context_get_font_map': Spec(
    return_type = 'PangoFontMap *',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
    ],
  ),
  'pango_context_list_families': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'PangoFontFamily ***',
        name = 'families',
      ),
      Param(
        type = 'int *',
        name = 'n_families',
      ),
    ],
  ),
  'pango_context_load_font': Spec(
    return_type = 'PangoFont *',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_context_load_fontset': Spec(
    return_type = 'PangoFontset *',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
    ],
  ),
  'pango_context_get_metrics': Spec(
    return_type = 'PangoFontMetrics *',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
    ],
  ),
  'pango_context_set_font_description': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_context_get_font_description': Spec(
    return_type = 'PangoFontDescription *',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
    ],
  ),
  'pango_context_get_language': Spec(
    return_type = 'PangoLanguage *',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
    ],
  ),
  'pango_context_set_language': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
    ],
  ),
  'pango_context_set_base_dir': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'PangoDirection',
        name = 'direction',
      ),
    ],
  ),
  'pango_context_get_base_dir': Spec(
    return_type = 'PangoDirection',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
    ],
  ),
  'pango_context_set_base_gravity': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'PangoGravity',
        name = 'gravity',
      ),
    ],
  ),
  'pango_context_get_base_gravity': Spec(
    return_type = 'PangoGravity',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
    ],
  ),
  'pango_context_get_gravity': Spec(
    return_type = 'PangoGravity',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
    ],
  ),
  'pango_context_set_gravity_hint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'PangoGravityHint',
        name = 'hint',
      ),
    ],
  ),
  'pango_context_get_gravity_hint': Spec(
    return_type = 'PangoGravityHint',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
    ],
  ),
  'pango_context_set_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'const PangoMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'pango_context_get_matrix': Spec(
    return_type = 'const PangoMatrix *',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
    ],
  ),
  'pango_itemize': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'const char *',
        name = 'text',
      ),
      Param(
        type = 'int',
        name = 'start_index',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
      Param(
        type = 'PangoAttrList *',
        name = 'attrs',
      ),
      Param(
        type = 'PangoAttrIterator *',
        name = 'cached_iter',
      ),
    ],
  ),
  'pango_itemize_with_base_dir': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'PangoDirection',
        name = 'base_dir',
      ),
      Param(
        type = 'const char *',
        name = 'text',
      ),
      Param(
        type = 'int',
        name = 'start_index',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
      Param(
        type = 'PangoAttrList *',
        name = 'attrs',
      ),
      Param(
        type = 'PangoAttrIterator *',
        name = 'cached_iter',
      ),
    ],
  ),
  'pango_glyph_string_new': Spec(
    return_type = 'PangoGlyphString *',
    parameters = [
    ],
  ),
  'pango_glyph_string_set_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoGlyphString *',
        name = 'string',
      ),
      Param(
        type = 'gint',
        name = 'new_len',
      ),
    ],
  ),
  'pango_glyph_string_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_glyph_string_copy': Spec(
    return_type = 'PangoGlyphString *',
    parameters = [
      Param(
        type = 'PangoGlyphString *',
        name = 'string',
      ),
    ],
  ),
  'pango_glyph_string_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoGlyphString *',
        name = 'string',
      ),
    ],
  ),
  'pango_glyph_string_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoGlyphString *',
        name = 'glyphs',
      ),
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_glyph_string_get_width': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoGlyphString *',
        name = 'glyphs',
      ),
    ],
  ),
  'pango_glyph_string_extents_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoGlyphString *',
        name = 'glyphs',
      ),
      Param(
        type = 'int',
        name = 'start',
      ),
      Param(
        type = 'int',
        name = 'end',
      ),
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_glyph_string_get_logical_widths': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoGlyphString *',
        name = 'glyphs',
      ),
      Param(
        type = 'const char *',
        name = 'text',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
      Param(
        type = 'int',
        name = 'embedding_level',
      ),
      Param(
        type = 'int *',
        name = 'logical_widths',
      ),
    ],
  ),
  'pango_glyph_string_index_to_x': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoGlyphString *',
        name = 'glyphs',
      ),
      Param(
        type = 'char *',
        name = 'text',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
      Param(
        type = 'PangoAnalysis *',
        name = 'analysis',
      ),
      Param(
        type = 'int',
        name = 'index_',
      ),
      Param(
        type = 'gboolean',
        name = 'trailing',
      ),
      Param(
        type = 'int *',
        name = 'x_pos',
      ),
    ],
  ),
  'pango_glyph_string_x_to_index': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoGlyphString *',
        name = 'glyphs',
      ),
      Param(
        type = 'char *',
        name = 'text',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
      Param(
        type = 'PangoAnalysis *',
        name = 'analysis',
      ),
      Param(
        type = 'int',
        name = 'x_pos',
      ),
      Param(
        type = 'int *',
        name = 'index_',
      ),
      Param(
        type = 'int *',
        name = 'trailing',
      ),
    ],
  ),
  'pango_shape': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'length',
      ),
      Param(
        type = 'const PangoAnalysis *',
        name = 'analysis',
      ),
      Param(
        type = 'PangoGlyphString *',
        name = 'glyphs',
      ),
    ],
  ),
  'pango_shape_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'item_text',
      ),
      Param(
        type = 'gint',
        name = 'item_length',
      ),
      Param(
        type = 'const gchar *',
        name = 'paragraph_text',
      ),
      Param(
        type = 'gint',
        name = 'paragraph_length',
      ),
      Param(
        type = 'const PangoAnalysis *',
        name = 'analysis',
      ),
      Param(
        type = 'PangoGlyphString *',
        name = 'glyphs',
      ),
    ],
  ),
  'pango_reorder_items': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'logical_items',
      ),
    ],
  ),
  'pango_attr_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_underline_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_bidi_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_direction_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_coverage_level_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_style_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_variant_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_weight_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_stretch_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_font_mask_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_gravity_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_gravity_hint_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_alignment_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_wrap_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_ellipsize_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_render_part_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_script_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_tab_align_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_glyph_item_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_glyph_item_split': Spec(
    return_type = 'PangoGlyphItem *',
    parameters = [
      Param(
        type = 'PangoGlyphItem *',
        name = 'orig',
      ),
      Param(
        type = 'const char *',
        name = 'text',
      ),
      Param(
        type = 'int',
        name = 'split_index',
      ),
    ],
  ),
  'pango_glyph_item_copy': Spec(
    return_type = 'PangoGlyphItem *',
    parameters = [
      Param(
        type = 'PangoGlyphItem *',
        name = 'orig',
      ),
    ],
  ),
  'pango_glyph_item_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoGlyphItem *',
        name = 'glyph_item',
      ),
    ],
  ),
  'pango_glyph_item_apply_attrs': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'PangoGlyphItem *',
        name = 'glyph_item',
      ),
      Param(
        type = 'const char *',
        name = 'text',
      ),
      Param(
        type = 'PangoAttrList *',
        name = 'list',
      ),
    ],
  ),
  'pango_glyph_item_letter_space': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoGlyphItem *',
        name = 'glyph_item',
      ),
      Param(
        type = 'const char *',
        name = 'text',
      ),
      Param(
        type = 'PangoLogAttr *',
        name = 'log_attrs',
      ),
      Param(
        type = 'int',
        name = 'letter_spacing',
      ),
    ],
  ),
  'pango_glyph_item_get_logical_widths': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoGlyphItem *',
        name = 'glyph_item',
      ),
      Param(
        type = 'const char *',
        name = 'text',
      ),
      Param(
        type = 'int *',
        name = 'logical_widths',
      ),
    ],
  ),
  'pango_glyph_item_iter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_glyph_item_iter_copy': Spec(
    return_type = 'PangoGlyphItemIter *',
    parameters = [
      Param(
        type = 'PangoGlyphItemIter *',
        name = 'orig',
      ),
    ],
  ),
  'pango_glyph_item_iter_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoGlyphItemIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_glyph_item_iter_init_start': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoGlyphItemIter *',
        name = 'iter',
      ),
      Param(
        type = 'PangoGlyphItem *',
        name = 'glyph_item',
      ),
      Param(
        type = 'const char *',
        name = 'text',
      ),
    ],
  ),
  'pango_glyph_item_iter_init_end': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoGlyphItemIter *',
        name = 'iter',
      ),
      Param(
        type = 'PangoGlyphItem *',
        name = 'glyph_item',
      ),
      Param(
        type = 'const char *',
        name = 'text',
      ),
    ],
  ),
  'pango_glyph_item_iter_next_cluster': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoGlyphItemIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_glyph_item_iter_prev_cluster': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoGlyphItemIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_tab_array_new': Spec(
    return_type = 'PangoTabArray *',
    parameters = [
      Param(
        type = 'gint',
        name = 'initial_size',
      ),
      Param(
        type = 'gboolean',
        name = 'positions_in_pixels',
      ),
    ],
  ),
  'pango_tab_array_new_with_positions': Spec(
    return_type = 'PangoTabArray *',
    parameters = [
      Param(
        type = 'gint',
        name = 'size',
      ),
      Param(
        type = 'gboolean',
        name = 'positions_in_pixels',
      ),
      Param(
        type = 'PangoTabAlign',
        name = 'first_alignment',
      ),
      Param(
        type = 'gint',
        name = 'first_position',
      ),
    ],
  ),
  'pango_tab_array_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_tab_array_copy': Spec(
    return_type = 'PangoTabArray *',
    parameters = [
      Param(
        type = 'PangoTabArray *',
        name = 'src',
      ),
    ],
  ),
  'pango_tab_array_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoTabArray *',
        name = 'tab_array',
      ),
    ],
  ),
  'pango_tab_array_get_size': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'PangoTabArray *',
        name = 'tab_array',
      ),
    ],
  ),
  'pango_tab_array_resize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoTabArray *',
        name = 'tab_array',
      ),
      Param(
        type = 'gint',
        name = 'new_size',
      ),
    ],
  ),
  'pango_tab_array_set_tab': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoTabArray *',
        name = 'tab_array',
      ),
      Param(
        type = 'gint',
        name = 'tab_index',
      ),
      Param(
        type = 'PangoTabAlign',
        name = 'alignment',
      ),
      Param(
        type = 'gint',
        name = 'location',
      ),
    ],
  ),
  'pango_tab_array_get_tab': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoTabArray *',
        name = 'tab_array',
      ),
      Param(
        type = 'gint',
        name = 'tab_index',
      ),
      Param(
        type = 'PangoTabAlign *',
        name = 'alignment',
      ),
      Param(
        type = 'gint *',
        name = 'location',
      ),
    ],
  ),
  'pango_tab_array_get_tabs': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoTabArray *',
        name = 'tab_array',
      ),
      Param(
        type = 'PangoTabAlign **',
        name = 'alignments',
      ),
      Param(
        type = 'gint **',
        name = 'locations',
      ),
    ],
  ),
  'pango_tab_array_get_positions_in_pixels': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoTabArray *',
        name = 'tab_array',
      ),
    ],
  ),
  'pango_layout_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_layout_new': Spec(
    return_type = 'PangoLayout *',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
    ],
  ),
  'pango_layout_copy': Spec(
    return_type = 'PangoLayout *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'src',
      ),
    ],
  ),
  'pango_layout_get_context': Spec(
    return_type = 'PangoContext *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_attributes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'PangoAttrList *',
        name = 'attrs',
      ),
    ],
  ),
  'pango_layout_get_attributes': Spec(
    return_type = 'PangoAttrList *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'const char *',
        name = 'text',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
    ],
  ),
  'pango_layout_get_text': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_get_character_count': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_markup': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'const char *',
        name = 'markup',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
    ],
  ),
  'pango_layout_set_markup_with_accel': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'const char *',
        name = 'markup',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
      Param(
        type = 'gunichar',
        name = 'accel_marker',
      ),
      Param(
        type = 'gunichar *',
        name = 'accel_char',
      ),
    ],
  ),
  'pango_layout_set_font_description': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_layout_get_font_description': Spec(
    return_type = 'const PangoFontDescription *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
    ],
  ),
  'pango_layout_get_width': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_height': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'pango_layout_get_height': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_wrap': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'PangoWrapMode',
        name = 'wrap',
      ),
    ],
  ),
  'pango_layout_get_wrap': Spec(
    return_type = 'PangoWrapMode',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_is_wrapped': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_indent': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int',
        name = 'indent',
      ),
    ],
  ),
  'pango_layout_get_indent': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_spacing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int',
        name = 'spacing',
      ),
    ],
  ),
  'pango_layout_get_spacing': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_justify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gboolean',
        name = 'justify',
      ),
    ],
  ),
  'pango_layout_get_justify': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_auto_dir': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gboolean',
        name = 'auto_dir',
      ),
    ],
  ),
  'pango_layout_get_auto_dir': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_alignment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'PangoAlignment',
        name = 'alignment',
      ),
    ],
  ),
  'pango_layout_get_alignment': Spec(
    return_type = 'PangoAlignment',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_tabs': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'PangoTabArray *',
        name = 'tabs',
      ),
    ],
  ),
  'pango_layout_get_tabs': Spec(
    return_type = 'PangoTabArray *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_single_paragraph_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'pango_layout_get_single_paragraph_mode': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_ellipsize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'PangoEllipsizeMode',
        name = 'ellipsize',
      ),
    ],
  ),
  'pango_layout_get_ellipsize': Spec(
    return_type = 'PangoEllipsizeMode',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_is_ellipsized': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_get_unknown_glyphs_count': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_context_changed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_get_log_attrs': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'PangoLogAttr **',
        name = 'attrs',
      ),
      Param(
        type = 'gint *',
        name = 'n_attrs',
      ),
    ],
  ),
  'pango_layout_get_log_attrs_readonly': Spec(
    return_type = 'const PangoLogAttr *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gint *',
        name = 'n_attrs',
      ),
    ],
  ),
  'pango_layout_index_to_pos': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int',
        name = 'index_',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'pos',
      ),
    ],
  ),
  'pango_layout_index_to_line_x': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int',
        name = 'index_',
      ),
      Param(
        type = 'gboolean',
        name = 'trailing',
      ),
      Param(
        type = 'int *',
        name = 'line',
      ),
      Param(
        type = 'int *',
        name = 'x_pos',
      ),
    ],
  ),
  'pango_layout_get_cursor_pos': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int',
        name = 'index_',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'strong_pos',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'weak_pos',
      ),
    ],
  ),
  'pango_layout_move_cursor_visually': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gboolean',
        name = 'strong',
      ),
      Param(
        type = 'int',
        name = 'old_index',
      ),
      Param(
        type = 'int',
        name = 'old_trailing',
      ),
      Param(
        type = 'int',
        name = 'direction',
      ),
      Param(
        type = 'int *',
        name = 'new_index',
      ),
      Param(
        type = 'int *',
        name = 'new_trailing',
      ),
    ],
  ),
  'pango_layout_xy_to_index': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int',
        name = 'x',
      ),
      Param(
        type = 'int',
        name = 'y',
      ),
      Param(
        type = 'int *',
        name = 'index_',
      ),
      Param(
        type = 'int *',
        name = 'trailing',
      ),
    ],
  ),
  'pango_layout_get_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_layout_get_pixel_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_layout_get_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int *',
        name = 'width',
      ),
      Param(
        type = 'int *',
        name = 'height',
      ),
    ],
  ),
  'pango_layout_get_pixel_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int *',
        name = 'width',
      ),
      Param(
        type = 'int *',
        name = 'height',
      ),
    ],
  ),
  'pango_layout_get_baseline': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_get_line_count': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_get_line': Spec(
    return_type = 'PangoLayoutLine *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int',
        name = 'line',
      ),
    ],
  ),
  'pango_layout_get_line_readonly': Spec(
    return_type = 'PangoLayoutLine *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int',
        name = 'line',
      ),
    ],
  ),
  'pango_layout_get_lines': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_get_lines_readonly': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_line_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_layout_line_ref': Spec(
    return_type = 'PangoLayoutLine *',
    parameters = [
      Param(
        type = 'PangoLayoutLine *',
        name = 'line',
      ),
    ],
  ),
  'pango_layout_line_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutLine *',
        name = 'line',
      ),
    ],
  ),
  'pango_layout_line_x_to_index': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayoutLine *',
        name = 'line',
      ),
      Param(
        type = 'int',
        name = 'x_pos',
      ),
      Param(
        type = 'int *',
        name = 'index_',
      ),
      Param(
        type = 'int *',
        name = 'trailing',
      ),
    ],
  ),
  'pango_layout_line_index_to_x': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutLine *',
        name = 'line',
      ),
      Param(
        type = 'int',
        name = 'index_',
      ),
      Param(
        type = 'gboolean',
        name = 'trailing',
      ),
      Param(
        type = 'int *',
        name = 'x_pos',
      ),
    ],
  ),
  'pango_layout_line_get_x_ranges': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutLine *',
        name = 'line',
      ),
      Param(
        type = 'int',
        name = 'start_index',
      ),
      Param(
        type = 'int',
        name = 'end_index',
      ),
      Param(
        type = 'int **',
        name = 'ranges',
      ),
      Param(
        type = 'int *',
        name = 'n_ranges',
      ),
    ],
  ),
  'pango_layout_line_get_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutLine *',
        name = 'line',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_layout_line_get_pixel_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutLine *',
        name = 'layout_line',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_layout_iter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_layout_get_iter': Spec(
    return_type = 'PangoLayoutIter *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_iter_copy': Spec(
    return_type = 'PangoLayoutIter *',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_get_index': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_get_run': Spec(
    return_type = 'PangoLayoutRun *',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_get_run_readonly': Spec(
    return_type = 'PangoLayoutRun *',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_get_line': Spec(
    return_type = 'PangoLayoutLine *',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_get_line_readonly': Spec(
    return_type = 'PangoLayoutLine *',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_at_last_line': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_get_layout': Spec(
    return_type = 'PangoLayout *',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_next_char': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_next_cluster': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_next_run': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_next_line': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_get_char_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_layout_iter_get_cluster_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_layout_iter_get_run_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_layout_iter_get_line_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_layout_iter_get_line_yrange': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
      Param(
        type = 'int *',
        name = 'y0_',
      ),
      Param(
        type = 'int *',
        name = 'y1_',
      ),
    ],
  ),
  'pango_layout_iter_get_layout_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_layout_iter_get_baseline': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_renderer_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_renderer_draw_layout': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int',
        name = 'x',
      ),
      Param(
        type = 'int',
        name = 'y',
      ),
    ],
  ),
  'pango_renderer_draw_layout_line': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'PangoLayoutLine *',
        name = 'line',
      ),
      Param(
        type = 'int',
        name = 'x',
      ),
      Param(
        type = 'int',
        name = 'y',
      ),
    ],
  ),
  'pango_renderer_draw_glyphs': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
      Param(
        type = 'PangoGlyphString *',
        name = 'glyphs',
      ),
      Param(
        type = 'int',
        name = 'x',
      ),
      Param(
        type = 'int',
        name = 'y',
      ),
    ],
  ),
  'pango_renderer_draw_glyph_item': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'const char *',
        name = 'text',
      ),
      Param(
        type = 'PangoGlyphItem *',
        name = 'glyph_item',
      ),
      Param(
        type = 'int',
        name = 'x',
      ),
      Param(
        type = 'int',
        name = 'y',
      ),
    ],
  ),
  'pango_renderer_draw_rectangle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'PangoRenderPart',
        name = 'part',
      ),
      Param(
        type = 'int',
        name = 'x',
      ),
      Param(
        type = 'int',
        name = 'y',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'pango_renderer_draw_error_underline': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'int',
        name = 'x',
      ),
      Param(
        type = 'int',
        name = 'y',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'pango_renderer_draw_trapezoid': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'PangoRenderPart',
        name = 'part',
      ),
      Param(
        type = 'double',
        name = 'y1_',
      ),
      Param(
        type = 'double',
        name = 'x11',
      ),
      Param(
        type = 'double',
        name = 'x21',
      ),
      Param(
        type = 'double',
        name = 'y2',
      ),
      Param(
        type = 'double',
        name = 'x12',
      ),
      Param(
        type = 'double',
        name = 'x22',
      ),
    ],
  ),
  'pango_renderer_draw_glyph': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
      Param(
        type = 'PangoGlyph',
        name = 'glyph',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
    ],
  ),
  'pango_renderer_activate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
    ],
  ),
  'pango_renderer_deactivate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
    ],
  ),
  'pango_renderer_part_changed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'PangoRenderPart',
        name = 'part',
      ),
    ],
  ),
  'pango_renderer_set_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'PangoRenderPart',
        name = 'part',
      ),
      Param(
        type = 'const PangoColor *',
        name = 'color',
      ),
    ],
  ),
  'pango_renderer_get_color': Spec(
    return_type = 'PangoColor *',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'PangoRenderPart',
        name = 'part',
      ),
    ],
  ),
  'pango_renderer_set_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'const PangoMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'pango_renderer_get_matrix': Spec(
    return_type = 'const PangoMatrix *',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
    ],
  ),
  'pango_renderer_get_layout': Spec(
    return_type = 'PangoLayout *',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
    ],
  ),
  'pango_renderer_get_layout_line': Spec(
    return_type = 'PangoLayoutLine *',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
    ],
  ),
  '__underflow': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '',
      ),
    ],
  ),
  '__uflow': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '',
      ),
    ],
  ),
  '__overflow': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  '_IO_getc': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '__fp',
      ),
    ],
  ),
  '_IO_putc': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__c',
      ),
      Param(
        type = '_IO_FILE *',
        name = '__fp',
      ),
    ],
  ),
  '_IO_feof': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '__fp',
      ),
    ],
  ),
  '_IO_ferror': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '__fp',
      ),
    ],
  ),
  '_IO_peekc_locked': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '__fp',
      ),
    ],
  ),
  '_IO_flockfile': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '',
      ),
    ],
  ),
  '_IO_funlockfile': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '',
      ),
    ],
  ),
  '_IO_ftrylockfile': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '',
      ),
    ],
  ),
  '_IO_vfscanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '_IO_FILE *restrict',
        name = '',
      ),
      Param(
        type = 'const char *restrict',
        name = '',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '',
      ),
      Param(
        type = 'int *restrict',
        name = '',
      ),
    ],
  ),
  '_IO_vfprintf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '_IO_FILE *restrict',
        name = '',
      ),
      Param(
        type = 'const char *restrict',
        name = '',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '',
      ),
    ],
  ),
  '_IO_padn': Spec(
    return_type = '__ssize_t',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = '__ssize_t',
        name = '',
      ),
    ],
  ),
  '_IO_sgetn': Spec(
    return_type = 'size_t',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '',
      ),
      Param(
        type = 'void *',
        name = '',
      ),
      Param(
        type = 'size_t',
        name = '',
      ),
    ],
  ),
  '_IO_seekoff': Spec(
    return_type = '__off64_t',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '',
      ),
      Param(
        type = '__off64_t',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  '_IO_seekpos': Spec(
    return_type = '__off64_t',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '',
      ),
      Param(
        type = '__off64_t',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  '_IO_free_backup_area': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '',
      ),
    ],
  ),
  'remove': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__filename',
      ),
    ],
  ),
  'rename': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__old',
      ),
      Param(
        type = 'const char *',
        name = '__new',
      ),
    ],
  ),
  'renameat': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__oldfd',
      ),
      Param(
        type = 'const char *',
        name = '__old',
      ),
      Param(
        type = 'int',
        name = '__newfd',
      ),
      Param(
        type = 'const char *',
        name = '__new',
      ),
    ],
  ),
  'tmpfile': Spec(
    return_type = 'FILE *',
    parameters = [
    ],
  ),
  'tmpnam': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'char *',
        name = '__s',
      ),
    ],
  ),
  'tmpnam_r': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'char *',
        name = '__s',
      ),
    ],
  ),
  'tempnam': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const char *',
        name = '__dir',
      ),
      Param(
        type = 'const char *',
        name = '__pfx',
      ),
    ],
  ),
  'fclose': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'fflush': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'fflush_unlocked': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'fopen': Spec(
    return_type = 'FILE *',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__filename',
      ),
      Param(
        type = 'const char *restrict',
        name = '__modes',
      ),
    ],
  ),
  'freopen': Spec(
    return_type = 'FILE *',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__filename',
      ),
      Param(
        type = 'const char *restrict',
        name = '__modes',
      ),
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
    ],
  ),
  'fdopen': Spec(
    return_type = 'FILE *',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'const char *',
        name = '__modes',
      ),
    ],
  ),
  'fmemopen': Spec(
    return_type = 'FILE *',
    parameters = [
      Param(
        type = 'void *',
        name = '__s',
      ),
      Param(
        type = 'size_t',
        name = '__len',
      ),
      Param(
        type = 'const char *',
        name = '__modes',
      ),
    ],
  ),
  'open_memstream': Spec(
    return_type = 'FILE *',
    parameters = [
      Param(
        type = 'char **',
        name = '__bufloc',
      ),
      Param(
        type = 'size_t *',
        name = '__sizeloc',
      ),
    ],
  ),
  'setbuf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
      Param(
        type = 'char *restrict',
        name = '__buf',
      ),
    ],
  ),
  'setvbuf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
      Param(
        type = 'char *restrict',
        name = '__buf',
      ),
      Param(
        type = 'int',
        name = '__modes',
      ),
      Param(
        type = 'size_t',
        name = '__n',
      ),
    ],
  ),
  'setbuffer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
      Param(
        type = 'char *restrict',
        name = '__buf',
      ),
      Param(
        type = 'size_t',
        name = '__size',
      ),
    ],
  ),
  'setlinebuf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'fprintf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
    ],
  ),
  'printf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
    ],
  ),
  'sprintf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'char *restrict',
        name = '__s',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
    ],
  ),
  'vfprintf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *restrict',
        name = '__s',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '__arg',
      ),
    ],
  ),
  'vprintf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '__arg',
      ),
    ],
  ),
  'vsprintf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'char *restrict',
        name = '__s',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '__arg',
      ),
    ],
  ),
  'snprintf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'char *restrict',
        name = '__s',
      ),
      Param(
        type = 'size_t',
        name = '__maxlen',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
    ],
  ),
  'vsnprintf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'char *restrict',
        name = '__s',
      ),
      Param(
        type = 'size_t',
        name = '__maxlen',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '__arg',
      ),
    ],
  ),
  'vdprintf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'const char *restrict',
        name = '__fmt',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '__arg',
      ),
    ],
  ),
  'dprintf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'const char *restrict',
        name = '__fmt',
      ),
    ],
  ),
  'fscanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
    ],
  ),
  'scanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
    ],
  ),
  'sscanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__s',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
    ],
  ),
  'fscanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
    ],
  ),
  'scanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
    ],
  ),
  'sscanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__s',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
    ],
  ),
  'vfscanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *restrict',
        name = '__s',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '__arg',
      ),
    ],
  ),
  'vscanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '__arg',
      ),
    ],
  ),
  'vsscanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__s',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '__arg',
      ),
    ],
  ),
  'vfscanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *restrict',
        name = '__s',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '__arg',
      ),
    ],
  ),
  'vscanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '__arg',
      ),
    ],
  ),
  'vsscanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__s',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '__arg',
      ),
    ],
  ),
  'fgetc': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'getc': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'getchar': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'getc_unlocked': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'getchar_unlocked': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'fgetc_unlocked': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'fputc': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__c',
      ),
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'putc': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__c',
      ),
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'putchar': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__c',
      ),
    ],
  ),
  'fputc_unlocked': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__c',
      ),
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'putc_unlocked': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__c',
      ),
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'putchar_unlocked': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__c',
      ),
    ],
  ),
  'getw': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'putw': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__w',
      ),
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'fgets': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'char *restrict',
        name = '__s',
      ),
      Param(
        type = 'int',
        name = '__n',
      ),
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
    ],
  ),
  'gets': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'char *',
        name = '__s',
      ),
    ],
  ),
  '__getdelim': Spec(
    return_type = '__ssize_t',
    parameters = [
      Param(
        type = 'char **restrict',
        name = '__lineptr',
      ),
      Param(
        type = 'size_t *restrict',
        name = '__n',
      ),
      Param(
        type = 'int',
        name = '__delimiter',
      ),
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
    ],
  ),
  'getdelim': Spec(
    return_type = '__ssize_t',
    parameters = [
      Param(
        type = 'char **restrict',
        name = '__lineptr',
      ),
      Param(
        type = 'size_t *restrict',
        name = '__n',
      ),
      Param(
        type = 'int',
        name = '__delimiter',
      ),
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
    ],
  ),
  'getline': Spec(
    return_type = '__ssize_t',
    parameters = [
      Param(
        type = 'char **restrict',
        name = '__lineptr',
      ),
      Param(
        type = 'size_t *restrict',
        name = '__n',
      ),
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
    ],
  ),
  'fputs': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__s',
      ),
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
    ],
  ),
  'puts': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__s',
      ),
    ],
  ),
  'ungetc': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__c',
      ),
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'fread': Spec(
    return_type = 'size_t',
    parameters = [
      Param(
        type = 'void *restrict',
        name = '__ptr',
      ),
      Param(
        type = 'size_t',
        name = '__size',
      ),
      Param(
        type = 'size_t',
        name = '__n',
      ),
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
    ],
  ),
  'fwrite': Spec(
    return_type = 'size_t',
    parameters = [
      Param(
        type = 'const void *restrict',
        name = '__ptr',
      ),
      Param(
        type = 'size_t',
        name = '__size',
      ),
      Param(
        type = 'size_t',
        name = '__n',
      ),
      Param(
        type = 'FILE *restrict',
        name = '__s',
      ),
    ],
  ),
  'fread_unlocked': Spec(
    return_type = 'size_t',
    parameters = [
      Param(
        type = 'void *restrict',
        name = '__ptr',
      ),
      Param(
        type = 'size_t',
        name = '__size',
      ),
      Param(
        type = 'size_t',
        name = '__n',
      ),
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
    ],
  ),
  'fwrite_unlocked': Spec(
    return_type = 'size_t',
    parameters = [
      Param(
        type = 'const void *restrict',
        name = '__ptr',
      ),
      Param(
        type = 'size_t',
        name = '__size',
      ),
      Param(
        type = 'size_t',
        name = '__n',
      ),
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
    ],
  ),
  'fseek': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
      Param(
        type = 'long',
        name = '__off',
      ),
      Param(
        type = 'int',
        name = '__whence',
      ),
    ],
  ),
  'ftell': Spec(
    return_type = 'long',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'rewind': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'fseeko': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
      Param(
        type = '__off_t',
        name = '__off',
      ),
      Param(
        type = 'int',
        name = '__whence',
      ),
    ],
  ),
  'ftello': Spec(
    return_type = '__off_t',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'fgetpos': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
      Param(
        type = 'fpos_t *restrict',
        name = '__pos',
      ),
    ],
  ),
  'fsetpos': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
      Param(
        type = 'const fpos_t *',
        name = '__pos',
      ),
    ],
  ),
  'clearerr': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'feof': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'ferror': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'clearerr_unlocked': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'feof_unlocked': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'ferror_unlocked': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'perror': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = '__s',
      ),
    ],
  ),
  'fileno': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'fileno_unlocked': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'popen': Spec(
    return_type = 'FILE *',
    parameters = [
      Param(
        type = 'const char *',
        name = '__command',
      ),
      Param(
        type = 'const char *',
        name = '__modes',
      ),
    ],
  ),
  'pclose': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'ctermid': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'char *',
        name = '__s',
      ),
    ],
  ),
  'flockfile': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'ftrylockfile': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'funlockfile': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'pango_split_file_list': Spec(
    return_type = 'char **',
    parameters = [
      Param(
        type = 'const char *',
        name = 'str',
      ),
    ],
  ),
  'pango_trim_string': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'str',
      ),
    ],
  ),
  'pango_read_line': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'FILE *',
        name = 'stream',
      ),
      Param(
        type = 'GString *',
        name = 'str',
      ),
    ],
  ),
  'pango_skip_space': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char **',
        name = 'pos',
      ),
    ],
  ),
  'pango_scan_word': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char **',
        name = 'pos',
      ),
      Param(
        type = 'GString *',
        name = 'out',
      ),
    ],
  ),
  'pango_scan_string': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char **',
        name = 'pos',
      ),
      Param(
        type = 'GString *',
        name = 'out',
      ),
    ],
  ),
  'pango_scan_int': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char **',
        name = 'pos',
      ),
      Param(
        type = 'int *',
        name = 'out',
      ),
    ],
  ),
  'pango_parse_enum': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
      Param(
        type = 'const char *',
        name = 'str',
      ),
      Param(
        type = 'int *',
        name = 'value',
      ),
      Param(
        type = 'gboolean',
        name = 'warn',
      ),
      Param(
        type = 'char **',
        name = 'possible_values',
      ),
    ],
  ),
  'pango_parse_style': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char *',
        name = 'str',
      ),
      Param(
        type = 'PangoStyle *',
        name = 'style',
      ),
      Param(
        type = 'gboolean',
        name = 'warn',
      ),
    ],
  ),
  'pango_parse_variant': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char *',
        name = 'str',
      ),
      Param(
        type = 'PangoVariant *',
        name = 'variant',
      ),
      Param(
        type = 'gboolean',
        name = 'warn',
      ),
    ],
  ),
  'pango_parse_weight': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char *',
        name = 'str',
      ),
      Param(
        type = 'PangoWeight *',
        name = 'weight',
      ),
      Param(
        type = 'gboolean',
        name = 'warn',
      ),
    ],
  ),
  'pango_parse_stretch': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char *',
        name = 'str',
      ),
      Param(
        type = 'PangoStretch *',
        name = 'stretch',
      ),
      Param(
        type = 'gboolean',
        name = 'warn',
      ),
    ],
  ),
  'pango_quantize_line_geometry': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'int *',
        name = 'thickness',
      ),
      Param(
        type = 'int *',
        name = 'position',
      ),
    ],
  ),
  'pango_log2vis_get_embedding_levels': Spec(
    return_type = 'guint8 *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
      Param(
        type = 'PangoDirection *',
        name = 'pbase_dir',
      ),
    ],
  ),
  'pango_is_zero_width': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'ch',
      ),
    ],
  ),
  'pango_version': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'pango_version_string': Spec(
    return_type = 'const char *',
    parameters = [
    ],
  ),
  'pango_version_check': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'int',
        name = 'required_major',
      ),
      Param(
        type = 'int',
        name = 'required_minor',
      ),
      Param(
        type = 'int',
        name = 'required_micro',
      ),
    ],
  ),
  'atk_state_type_register': Spec(
    return_type = 'AtkStateType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'atk_state_type_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkStateType',
        name = 'type',
      ),
    ],
  ),
  'atk_state_type_for_name': Spec(
    return_type = 'AtkStateType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'atk_role_register': Spec(
    return_type = 'AtkRole',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'atk_object_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_implementor_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_implementor_ref_accessible': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkImplementor *',
        name = 'implementor',
      ),
    ],
  ),
  'atk_object_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_object_get_description': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_object_get_parent': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_object_get_n_accessible_children': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_object_ref_accessible_child': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_object_ref_relation_set': Spec(
    return_type = 'AtkRelationSet *',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_object_get_role': Spec(
    return_type = 'AtkRole',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_object_get_layer': Spec(
    return_type = 'AtkLayer',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_object_get_mdi_zorder': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_object_get_attributes': Spec(
    return_type = 'AtkAttributeSet *',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_object_ref_state_set': Spec(
    return_type = 'AtkStateSet *',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_object_get_index_in_parent': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_object_set_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'atk_object_set_description': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
      Param(
        type = 'const gchar *',
        name = 'description',
      ),
    ],
  ),
  'atk_object_set_parent': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
      Param(
        type = 'AtkObject *',
        name = 'parent',
      ),
    ],
  ),
  'atk_object_set_role': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
      Param(
        type = 'AtkRole',
        name = 'role',
      ),
    ],
  ),
  'atk_object_connect_property_change_handler': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
      Param(
        type = 'AtkPropertyChangeHandler *',
        name = 'handler',
      ),
    ],
  ),
  'atk_object_remove_property_change_handler': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
      Param(
        type = 'guint',
        name = 'handler_id',
      ),
    ],
  ),
  'atk_object_notify_state_change': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
      Param(
        type = 'AtkState',
        name = 'state',
      ),
      Param(
        type = 'gboolean',
        name = 'value',
      ),
    ],
  ),
  'atk_object_initialize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'atk_role_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkRole',
        name = 'role',
      ),
    ],
  ),
  'atk_role_for_name': Spec(
    return_type = 'AtkRole',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'atk_object_add_relationship': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'object',
      ),
      Param(
        type = 'AtkRelationType',
        name = 'relationship',
      ),
      Param(
        type = 'AtkObject *',
        name = 'target',
      ),
    ],
  ),
  'atk_object_remove_relationship': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'object',
      ),
      Param(
        type = 'AtkRelationType',
        name = 'relationship',
      ),
      Param(
        type = 'AtkObject *',
        name = 'target',
      ),
    ],
  ),
  'atk_role_get_localized_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkRole',
        name = 'role',
      ),
    ],
  ),
  'atk_action_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_action_do_action': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkAction *',
        name = 'action',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_action_get_n_actions': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkAction *',
        name = 'action',
      ),
    ],
  ),
  'atk_action_get_description': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkAction *',
        name = 'action',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_action_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkAction *',
        name = 'action',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_action_get_keybinding': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkAction *',
        name = 'action',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_action_set_description': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkAction *',
        name = 'action',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
      Param(
        type = 'const gchar *',
        name = 'desc',
      ),
    ],
  ),
  'atk_action_get_localized_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkAction *',
        name = 'action',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_util_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_add_focus_tracker': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'AtkEventListener',
        name = 'focus_tracker',
      ),
    ],
  ),
  'atk_remove_focus_tracker': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'tracker_id',
      ),
    ],
  ),
  'atk_focus_tracker_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkEventListenerInit',
        name = 'init',
      ),
    ],
  ),
  'atk_focus_tracker_notify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'object',
      ),
    ],
  ),
  'atk_add_global_event_listener': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSignalEmissionHook',
        name = 'listener',
      ),
      Param(
        type = 'const gchar *',
        name = 'event_type',
      ),
    ],
  ),
  'atk_remove_global_event_listener': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'listener_id',
      ),
    ],
  ),
  'atk_add_key_event_listener': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'AtkKeySnoopFunc',
        name = 'listener',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'atk_remove_key_event_listener': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'listener_id',
      ),
    ],
  ),
  'atk_get_root': Spec(
    return_type = 'AtkObject *',
    parameters = [
    ],
  ),
  'atk_get_focus_object': Spec(
    return_type = 'AtkObject *',
    parameters = [
    ],
  ),
  'atk_get_toolkit_name': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'atk_get_toolkit_version': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'atk_get_version': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'atk_rectangle_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_component_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_component_add_focus_handler': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
      Param(
        type = 'AtkFocusHandler',
        name = 'handler',
      ),
    ],
  ),
  'atk_component_contains': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'AtkCoordType',
        name = 'coord_type',
      ),
    ],
  ),
  'atk_component_ref_accessible_at_point': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'AtkCoordType',
        name = 'coord_type',
      ),
    ],
  ),
  'atk_component_get_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
      Param(
        type = 'gint *',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'height',
      ),
      Param(
        type = 'AtkCoordType',
        name = 'coord_type',
      ),
    ],
  ),
  'atk_component_get_position': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
      Param(
        type = 'AtkCoordType',
        name = 'coord_type',
      ),
    ],
  ),
  'atk_component_get_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
      Param(
        type = 'gint *',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'height',
      ),
    ],
  ),
  'atk_component_get_layer': Spec(
    return_type = 'AtkLayer',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
    ],
  ),
  'atk_component_get_mdi_zorder': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
    ],
  ),
  'atk_component_grab_focus': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
    ],
  ),
  'atk_component_remove_focus_handler': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
      Param(
        type = 'guint',
        name = 'handler_id',
      ),
    ],
  ),
  'atk_component_set_extents': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
      Param(
        type = 'AtkCoordType',
        name = 'coord_type',
      ),
    ],
  ),
  'atk_component_set_position': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'AtkCoordType',
        name = 'coord_type',
      ),
    ],
  ),
  'atk_component_set_size': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'atk_component_get_alpha': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
    ],
  ),
  'atk_document_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_document_get_document_type': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkDocument *',
        name = 'document',
      ),
    ],
  ),
  'atk_document_get_document': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'AtkDocument *',
        name = 'document',
      ),
    ],
  ),
  'atk_document_get_locale': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkDocument *',
        name = 'document',
      ),
    ],
  ),
  'atk_document_get_attributes': Spec(
    return_type = 'AtkAttributeSet *',
    parameters = [
      Param(
        type = 'AtkDocument *',
        name = 'document',
      ),
    ],
  ),
  'atk_document_get_attribute_value': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkDocument *',
        name = 'document',
      ),
      Param(
        type = 'const gchar *',
        name = 'attribute_name',
      ),
    ],
  ),
  'atk_document_set_attribute_value': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkDocument *',
        name = 'document',
      ),
      Param(
        type = 'const gchar *',
        name = 'attribute_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'attribute_value',
      ),
    ],
  ),
  'atk_text_attribute_register': Spec(
    return_type = 'AtkTextAttribute',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'atk_text_range_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_text_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_text_get_text': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'start_offset',
      ),
      Param(
        type = 'gint',
        name = 'end_offset',
      ),
    ],
  ),
  'atk_text_get_character_at_offset': Spec(
    return_type = 'gunichar',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'offset',
      ),
    ],
  ),
  'atk_text_get_text_after_offset': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'offset',
      ),
      Param(
        type = 'AtkTextBoundary',
        name = 'boundary_type',
      ),
      Param(
        type = 'gint *',
        name = 'start_offset',
      ),
      Param(
        type = 'gint *',
        name = 'end_offset',
      ),
    ],
  ),
  'atk_text_get_text_at_offset': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'offset',
      ),
      Param(
        type = 'AtkTextBoundary',
        name = 'boundary_type',
      ),
      Param(
        type = 'gint *',
        name = 'start_offset',
      ),
      Param(
        type = 'gint *',
        name = 'end_offset',
      ),
    ],
  ),
  'atk_text_get_text_before_offset': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'offset',
      ),
      Param(
        type = 'AtkTextBoundary',
        name = 'boundary_type',
      ),
      Param(
        type = 'gint *',
        name = 'start_offset',
      ),
      Param(
        type = 'gint *',
        name = 'end_offset',
      ),
    ],
  ),
  'atk_text_get_caret_offset': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
    ],
  ),
  'atk_text_get_character_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'offset',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
      Param(
        type = 'gint *',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'height',
      ),
      Param(
        type = 'AtkCoordType',
        name = 'coords',
      ),
    ],
  ),
  'atk_text_get_run_attributes': Spec(
    return_type = 'AtkAttributeSet *',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'offset',
      ),
      Param(
        type = 'gint *',
        name = 'start_offset',
      ),
      Param(
        type = 'gint *',
        name = 'end_offset',
      ),
    ],
  ),
  'atk_text_get_default_attributes': Spec(
    return_type = 'AtkAttributeSet *',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
    ],
  ),
  'atk_text_get_character_count': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
    ],
  ),
  'atk_text_get_offset_at_point': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'AtkCoordType',
        name = 'coords',
      ),
    ],
  ),
  'atk_text_get_n_selections': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
    ],
  ),
  'atk_text_get_selection': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'selection_num',
      ),
      Param(
        type = 'gint *',
        name = 'start_offset',
      ),
      Param(
        type = 'gint *',
        name = 'end_offset',
      ),
    ],
  ),
  'atk_text_add_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'start_offset',
      ),
      Param(
        type = 'gint',
        name = 'end_offset',
      ),
    ],
  ),
  'atk_text_remove_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'selection_num',
      ),
    ],
  ),
  'atk_text_set_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'selection_num',
      ),
      Param(
        type = 'gint',
        name = 'start_offset',
      ),
      Param(
        type = 'gint',
        name = 'end_offset',
      ),
    ],
  ),
  'atk_text_set_caret_offset': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'offset',
      ),
    ],
  ),
  'atk_text_get_range_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'start_offset',
      ),
      Param(
        type = 'gint',
        name = 'end_offset',
      ),
      Param(
        type = 'AtkCoordType',
        name = 'coord_type',
      ),
      Param(
        type = 'AtkTextRectangle *',
        name = 'rect',
      ),
    ],
  ),
  'atk_text_get_bounded_ranges': Spec(
    return_type = 'AtkTextRange **',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'AtkTextRectangle *',
        name = 'rect',
      ),
      Param(
        type = 'AtkCoordType',
        name = 'coord_type',
      ),
      Param(
        type = 'AtkTextClipType',
        name = 'x_clip_type',
      ),
      Param(
        type = 'AtkTextClipType',
        name = 'y_clip_type',
      ),
    ],
  ),
  'atk_text_free_ranges': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkTextRange **',
        name = 'ranges',
      ),
    ],
  ),
  'atk_attribute_set_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkAttributeSet *',
        name = 'attrib_set',
      ),
    ],
  ),
  'atk_text_attribute_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkTextAttribute',
        name = 'attr',
      ),
    ],
  ),
  'atk_text_attribute_for_name': Spec(
    return_type = 'AtkTextAttribute',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'atk_text_attribute_get_value': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkTextAttribute',
        name = 'attr',
      ),
      Param(
        type = 'gint',
        name = 'index_',
      ),
    ],
  ),
  'atk_editable_text_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_editable_text_set_run_attributes': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkEditableText *',
        name = 'text',
      ),
      Param(
        type = 'AtkAttributeSet *',
        name = 'attrib_set',
      ),
      Param(
        type = 'gint',
        name = 'start_offset',
      ),
      Param(
        type = 'gint',
        name = 'end_offset',
      ),
    ],
  ),
  'atk_editable_text_set_text_contents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkEditableText *',
        name = 'text',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'atk_editable_text_insert_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkEditableText *',
        name = 'text',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'gint',
        name = 'length',
      ),
      Param(
        type = 'gint *',
        name = 'position',
      ),
    ],
  ),
  'atk_editable_text_copy_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkEditableText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'start_pos',
      ),
      Param(
        type = 'gint',
        name = 'end_pos',
      ),
    ],
  ),
  'atk_editable_text_cut_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkEditableText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'start_pos',
      ),
      Param(
        type = 'gint',
        name = 'end_pos',
      ),
    ],
  ),
  'atk_editable_text_delete_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkEditableText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'start_pos',
      ),
      Param(
        type = 'gint',
        name = 'end_pos',
      ),
    ],
  ),
  'atk_editable_text_paste_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkEditableText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'atk_gobject_accessible_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_gobject_accessible_for_object': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'obj',
      ),
    ],
  ),
  'atk_gobject_accessible_get_object': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'AtkGObjectAccessible *',
        name = 'obj',
      ),
    ],
  ),
  'atk_hyperlink_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_hyperlink_get_uri': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'AtkHyperlink *',
        name = 'link_',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_hyperlink_get_object': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkHyperlink *',
        name = 'link_',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_hyperlink_get_end_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkHyperlink *',
        name = 'link_',
      ),
    ],
  ),
  'atk_hyperlink_get_start_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkHyperlink *',
        name = 'link_',
      ),
    ],
  ),
  'atk_hyperlink_is_valid': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkHyperlink *',
        name = 'link_',
      ),
    ],
  ),
  'atk_hyperlink_is_inline': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkHyperlink *',
        name = 'link_',
      ),
    ],
  ),
  'atk_hyperlink_get_n_anchors': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkHyperlink *',
        name = 'link_',
      ),
    ],
  ),
  'atk_hyperlink_is_selected_link': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkHyperlink *',
        name = 'link_',
      ),
    ],
  ),
  'atk_hyperlink_impl_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_hyperlink_impl_get_hyperlink': Spec(
    return_type = 'AtkHyperlink *',
    parameters = [
      Param(
        type = 'AtkHyperlinkImpl *',
        name = 'obj',
      ),
    ],
  ),
  'atk_hypertext_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_hypertext_get_link': Spec(
    return_type = 'AtkHyperlink *',
    parameters = [
      Param(
        type = 'AtkHypertext *',
        name = 'hypertext',
      ),
      Param(
        type = 'gint',
        name = 'link_index',
      ),
    ],
  ),
  'atk_hypertext_get_n_links': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkHypertext *',
        name = 'hypertext',
      ),
    ],
  ),
  'atk_hypertext_get_link_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkHypertext *',
        name = 'hypertext',
      ),
      Param(
        type = 'gint',
        name = 'char_index',
      ),
    ],
  ),
  'atk_image_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_image_get_image_description': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkImage *',
        name = 'image',
      ),
    ],
  ),
  'atk_image_get_image_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkImage *',
        name = 'image',
      ),
      Param(
        type = 'gint *',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'height',
      ),
    ],
  ),
  'atk_image_set_image_description': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkImage *',
        name = 'image',
      ),
      Param(
        type = 'const gchar *',
        name = 'description',
      ),
    ],
  ),
  'atk_image_get_image_position': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkImage *',
        name = 'image',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
      Param(
        type = 'AtkCoordType',
        name = 'coord_type',
      ),
    ],
  ),
  'atk_image_get_image_locale': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkImage *',
        name = 'image',
      ),
    ],
  ),
  'atk_no_op_object_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_no_op_object_new': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'obj',
      ),
    ],
  ),
  'atk_object_factory_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_object_factory_create_accessible': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkObjectFactory *',
        name = 'factory',
      ),
      Param(
        type = 'GObject *',
        name = 'obj',
      ),
    ],
  ),
  'atk_object_factory_invalidate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkObjectFactory *',
        name = 'factory',
      ),
    ],
  ),
  'atk_object_factory_get_accessible_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'AtkObjectFactory *',
        name = 'factory',
      ),
    ],
  ),
  'atk_no_op_object_factory_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_no_op_object_factory_new': Spec(
    return_type = 'AtkObjectFactory *',
    parameters = [
    ],
  ),
  'atk_plug_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_plug_new': Spec(
    return_type = 'AtkObject *',
    parameters = [
    ],
  ),
  'atk_plug_get_id': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'AtkPlug *',
        name = 'plug',
      ),
    ],
  ),
  'atk_registry_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_registry_set_factory_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkRegistry *',
        name = 'registry',
      ),
      Param(
        type = 'GType',
        name = 'type',
      ),
      Param(
        type = 'GType',
        name = 'factory_type',
      ),
    ],
  ),
  'atk_registry_get_factory_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'AtkRegistry *',
        name = 'registry',
      ),
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'atk_registry_get_factory': Spec(
    return_type = 'AtkObjectFactory *',
    parameters = [
      Param(
        type = 'AtkRegistry *',
        name = 'registry',
      ),
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'atk_get_default_registry': Spec(
    return_type = 'AtkRegistry *',
    parameters = [
    ],
  ),
  'atk_relation_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_relation_type_register': Spec(
    return_type = 'AtkRelationType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'atk_relation_type_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkRelationType',
        name = 'type',
      ),
    ],
  ),
  'atk_relation_type_for_name': Spec(
    return_type = 'AtkRelationType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'atk_relation_new': Spec(
    return_type = 'AtkRelation *',
    parameters = [
      Param(
        type = 'AtkObject **',
        name = 'targets',
      ),
      Param(
        type = 'gint',
        name = 'n_targets',
      ),
      Param(
        type = 'AtkRelationType',
        name = 'relationship',
      ),
    ],
  ),
  'atk_relation_get_relation_type': Spec(
    return_type = 'AtkRelationType',
    parameters = [
      Param(
        type = 'AtkRelation *',
        name = 'relation',
      ),
    ],
  ),
  'atk_relation_get_target': Spec(
    return_type = 'GPtrArray *',
    parameters = [
      Param(
        type = 'AtkRelation *',
        name = 'relation',
      ),
    ],
  ),
  'atk_relation_add_target': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkRelation *',
        name = 'relation',
      ),
      Param(
        type = 'AtkObject *',
        name = 'target',
      ),
    ],
  ),
  'atk_relation_remove_target': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkRelation *',
        name = 'relation',
      ),
      Param(
        type = 'AtkObject *',
        name = 'target',
      ),
    ],
  ),
  'atk_relation_set_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_relation_set_new': Spec(
    return_type = 'AtkRelationSet *',
    parameters = [
    ],
  ),
  'atk_relation_set_contains': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkRelationSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkRelationType',
        name = 'relationship',
      ),
    ],
  ),
  'atk_relation_set_contains_target': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkRelationSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkRelationType',
        name = 'relationship',
      ),
      Param(
        type = 'AtkObject *',
        name = 'targe',
      ),
    ],
  ),
  'atk_relation_set_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkRelationSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkRelation *',
        name = 'relation',
      ),
    ],
  ),
  'atk_relation_set_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkRelationSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkRelation *',
        name = 'relation',
      ),
    ],
  ),
  'atk_relation_set_get_n_relations': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkRelationSet *',
        name = 'set',
      ),
    ],
  ),
  'atk_relation_set_get_relation': Spec(
    return_type = 'AtkRelation *',
    parameters = [
      Param(
        type = 'AtkRelationSet *',
        name = 'set',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_relation_set_get_relation_by_type': Spec(
    return_type = 'AtkRelation *',
    parameters = [
      Param(
        type = 'AtkRelationSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkRelationType',
        name = 'relationship',
      ),
    ],
  ),
  'atk_relation_set_add_relation_by_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkRelationSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkRelationType',
        name = 'relationship',
      ),
      Param(
        type = 'AtkObject *',
        name = 'target',
      ),
    ],
  ),
  'atk_selection_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_selection_add_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkSelection *',
        name = 'selection',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_selection_clear_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkSelection *',
        name = 'selection',
      ),
    ],
  ),
  'atk_selection_ref_selection': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkSelection *',
        name = 'selection',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_selection_get_selection_count': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkSelection *',
        name = 'selection',
      ),
    ],
  ),
  'atk_selection_is_child_selected': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkSelection *',
        name = 'selection',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_selection_remove_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkSelection *',
        name = 'selection',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_selection_select_all_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkSelection *',
        name = 'selection',
      ),
    ],
  ),
  'atk_socket_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_socket_new': Spec(
    return_type = 'AtkObject *',
    parameters = [
    ],
  ),
  'atk_socket_embed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkSocket *',
        name = 'obj',
      ),
      Param(
        type = 'gchar *',
        name = 'plug_id',
      ),
    ],
  ),
  'atk_socket_is_occupied': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkSocket *',
        name = 'obj',
      ),
    ],
  ),
  'atk_state_set_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_state_set_new': Spec(
    return_type = 'AtkStateSet *',
    parameters = [
    ],
  ),
  'atk_state_set_is_empty': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkStateSet *',
        name = 'set',
      ),
    ],
  ),
  'atk_state_set_add_state': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkStateSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkStateType',
        name = 'type',
      ),
    ],
  ),
  'atk_state_set_add_states': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkStateSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkStateType *',
        name = 'types',
      ),
      Param(
        type = 'gint',
        name = 'n_types',
      ),
    ],
  ),
  'atk_state_set_clear_states': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkStateSet *',
        name = 'set',
      ),
    ],
  ),
  'atk_state_set_contains_state': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkStateSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkStateType',
        name = 'type',
      ),
    ],
  ),
  'atk_state_set_contains_states': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkStateSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkStateType *',
        name = 'types',
      ),
      Param(
        type = 'gint',
        name = 'n_types',
      ),
    ],
  ),
  'atk_state_set_remove_state': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkStateSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkStateType',
        name = 'type',
      ),
    ],
  ),
  'atk_state_set_and_sets': Spec(
    return_type = 'AtkStateSet *',
    parameters = [
      Param(
        type = 'AtkStateSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkStateSet *',
        name = 'compare_set',
      ),
    ],
  ),
  'atk_state_set_or_sets': Spec(
    return_type = 'AtkStateSet *',
    parameters = [
      Param(
        type = 'AtkStateSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkStateSet *',
        name = 'compare_set',
      ),
    ],
  ),
  'atk_state_set_xor_sets': Spec(
    return_type = 'AtkStateSet *',
    parameters = [
      Param(
        type = 'AtkStateSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkStateSet *',
        name = 'compare_set',
      ),
    ],
  ),
  'atk_streamable_content_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_streamable_content_get_n_mime_types': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkStreamableContent *',
        name = 'streamable',
      ),
    ],
  ),
  'atk_streamable_content_get_mime_type': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkStreamableContent *',
        name = 'streamable',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_streamable_content_get_stream': Spec(
    return_type = 'GIOChannel *',
    parameters = [
      Param(
        type = 'AtkStreamableContent *',
        name = 'streamable',
      ),
      Param(
        type = 'const gchar *',
        name = 'mime_type',
      ),
    ],
  ),
  'atk_streamable_content_get_uri': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkStreamableContent *',
        name = 'streamable',
      ),
      Param(
        type = 'const gchar *',
        name = 'mime_type',
      ),
    ],
  ),
  'atk_table_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_table_ref_at': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'atk_table_get_index_at': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'atk_table_get_column_at_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'index_',
      ),
    ],
  ),
  'atk_table_get_row_at_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'index_',
      ),
    ],
  ),
  'atk_table_get_n_columns': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
    ],
  ),
  'atk_table_get_n_rows': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
    ],
  ),
  'atk_table_get_column_extent_at': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'atk_table_get_row_extent_at': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'atk_table_get_caption': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
    ],
  ),
  'atk_table_get_column_description': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'atk_table_get_column_header': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'atk_table_get_row_description': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
    ],
  ),
  'atk_table_get_row_header': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
    ],
  ),
  'atk_table_get_summary': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
    ],
  ),
  'atk_table_set_caption': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'AtkObject *',
        name = 'caption',
      ),
    ],
  ),
  'atk_table_set_column_description': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
      Param(
        type = 'const gchar *',
        name = 'description',
      ),
    ],
  ),
  'atk_table_set_column_header': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
      Param(
        type = 'AtkObject *',
        name = 'header',
      ),
    ],
  ),
  'atk_table_set_row_description': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
      Param(
        type = 'const gchar *',
        name = 'description',
      ),
    ],
  ),
  'atk_table_set_row_header': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
      Param(
        type = 'AtkObject *',
        name = 'header',
      ),
    ],
  ),
  'atk_table_set_summary': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_table_get_selected_columns': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint **',
        name = 'selected',
      ),
    ],
  ),
  'atk_table_get_selected_rows': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint **',
        name = 'selected',
      ),
    ],
  ),
  'atk_table_is_column_selected': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'atk_table_is_row_selected': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
    ],
  ),
  'atk_table_is_selected': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'atk_table_add_row_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
    ],
  ),
  'atk_table_remove_row_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
    ],
  ),
  'atk_table_add_column_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'atk_table_remove_column_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'atk_misc_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_misc_threads_enter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkMisc *',
        name = 'misc',
      ),
    ],
  ),
  'atk_misc_threads_leave': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkMisc *',
        name = 'misc',
      ),
    ],
  ),
  'atk_misc_get_instance': Spec(
    return_type = 'const AtkMisc *',
    parameters = [
    ],
  ),
  'atk_value_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_value_get_current_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkValue *',
        name = 'obj',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'atk_value_get_maximum_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkValue *',
        name = 'obj',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'atk_value_get_minimum_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkValue *',
        name = 'obj',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'atk_value_set_current_value': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkValue *',
        name = 'obj',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'atk_value_get_minimum_increment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkValue *',
        name = 'obj',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'atk_window_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_input_device_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_input_device_get_device_type': Spec(
    return_type = 'ClutterInputDeviceType',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
    ],
  ),
  'clutter_input_device_get_device_id': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
    ],
  ),
  'clutter_input_device_get_coords': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
      Param(
        type = 'ClutterEventSequence *',
        name = 'sequence',
      ),
      Param(
        type = 'ClutterPoint *',
        name = 'point',
      ),
    ],
  ),
  'clutter_input_device_get_pointer_actor': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
    ],
  ),
  'clutter_input_device_get_pointer_stage': Spec(
    return_type = 'ClutterStage *',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
    ],
  ),
  'clutter_input_device_get_device_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
    ],
  ),
  'clutter_input_device_get_device_mode': Spec(
    return_type = 'ClutterInputMode',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
    ],
  ),
  'clutter_input_device_get_has_cursor': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
    ],
  ),
  'clutter_input_device_set_enabled': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
      Param(
        type = 'gboolean',
        name = 'enabled',
      ),
    ],
  ),
  'clutter_input_device_get_enabled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
    ],
  ),
  'clutter_input_device_get_n_axes': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
    ],
  ),
  'clutter_input_device_get_axis': Spec(
    return_type = 'ClutterInputAxis',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'clutter_input_device_get_axis_value': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
      Param(
        type = 'gdouble *',
        name = 'axes',
      ),
      Param(
        type = 'ClutterInputAxis',
        name = 'axis',
      ),
      Param(
        type = 'gdouble *',
        name = 'value',
      ),
    ],
  ),
  'clutter_input_device_get_n_keys': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
    ],
  ),
  'clutter_input_device_set_key': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
      Param(
        type = 'guint',
        name = 'keyval',
      ),
      Param(
        type = 'ClutterModifierType',
        name = 'modifiers',
      ),
    ],
  ),
  'clutter_input_device_get_key': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
      Param(
        type = 'guint *',
        name = 'keyval',
      ),
      Param(
        type = 'ClutterModifierType *',
        name = 'modifiers',
      ),
    ],
  ),
  'clutter_input_device_get_associated_device': Spec(
    return_type = 'ClutterInputDevice *',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
    ],
  ),
  'clutter_input_device_get_slave_devices': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
    ],
  ),
  'clutter_input_device_update_from_event': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
      Param(
        type = 'ClutterEvent *',
        name = 'event',
      ),
      Param(
        type = 'gboolean',
        name = 'update_stage',
      ),
    ],
  ),
  'clutter_input_device_grab': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_input_device_ungrab': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
    ],
  ),
  'clutter_input_device_get_grabbed_actor': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
    ],
  ),
  'clutter_input_device_sequence_grab': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
      Param(
        type = 'ClutterEventSequence *',
        name = 'sequence',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_input_device_sequence_ungrab': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
      Param(
        type = 'ClutterEventSequence *',
        name = 'sequence',
      ),
    ],
  ),
  'clutter_input_device_sequence_get_grabbed_actor': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
      Param(
        type = 'ClutterEventSequence *',
        name = 'sequence',
      ),
    ],
  ),
  'clutter_input_device_keycode_to_evdev': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
      Param(
        type = 'guint',
        name = 'hardware_keycode',
      ),
      Param(
        type = 'guint *',
        name = 'evdev_keycode',
      ),
    ],
  ),
  'clutter_event_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_events_pending': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'clutter_event_get': Spec(
    return_type = 'ClutterEvent *',
    parameters = [
    ],
  ),
  'clutter_event_peek': Spec(
    return_type = 'ClutterEvent *',
    parameters = [
    ],
  ),
  'clutter_event_put': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_event_new': Spec(
    return_type = 'ClutterEvent *',
    parameters = [
      Param(
        type = 'ClutterEventType',
        name = 'type',
      ),
    ],
  ),
  'clutter_event_copy': Spec(
    return_type = 'ClutterEvent *',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_event_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_event_type': Spec(
    return_type = 'ClutterEventType',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_event_set_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterEvent *',
        name = 'event',
      ),
      Param(
        type = 'ClutterEventFlags',
        name = 'flags',
      ),
    ],
  ),
  'clutter_event_get_flags': Spec(
    return_type = 'ClutterEventFlags',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_event_set_time': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterEvent *',
        name = 'event',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
    ],
  ),
  'clutter_event_get_time': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_event_set_state': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterEvent *',
        name = 'event',
      ),
      Param(
        type = 'ClutterModifierType',
        name = 'state',
      ),
    ],
  ),
  'clutter_event_get_state': Spec(
    return_type = 'ClutterModifierType',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_event_set_device': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterEvent *',
        name = 'event',
      ),
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
    ],
  ),
  'clutter_event_get_device': Spec(
    return_type = 'ClutterInputDevice *',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_event_set_source_device': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterEvent *',
        name = 'event',
      ),
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
    ],
  ),
  'clutter_event_get_source_device': Spec(
    return_type = 'ClutterInputDevice *',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_event_set_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterEvent *',
        name = 'event',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_event_get_source': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_event_set_stage': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterEvent *',
        name = 'event',
      ),
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
    ],
  ),
  'clutter_event_get_stage': Spec(
    return_type = 'ClutterStage *',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_event_get_device_id': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_event_get_device_type': Spec(
    return_type = 'ClutterInputDeviceType',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_event_set_coords': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterEvent *',
        name = 'event',
      ),
      Param(
        type = 'gfloat',
        name = 'x',
      ),
      Param(
        type = 'gfloat',
        name = 'y',
      ),
    ],
  ),
  'clutter_event_get_coords': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
      Param(
        type = 'gfloat *',
        name = 'x',
      ),
      Param(
        type = 'gfloat *',
        name = 'y',
      ),
    ],
  ),
  'clutter_event_get_position': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
      Param(
        type = 'ClutterPoint *',
        name = 'position',
      ),
    ],
  ),
  'clutter_event_get_distance': Spec(
    return_type = 'float',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'source',
      ),
      Param(
        type = 'const ClutterEvent *',
        name = 'target',
      ),
    ],
  ),
  'clutter_event_get_angle': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'source',
      ),
      Param(
        type = 'const ClutterEvent *',
        name = 'target',
      ),
    ],
  ),
  'clutter_event_get_axes': Spec(
    return_type = 'gdouble *',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
      Param(
        type = 'guint *',
        name = 'n_axes',
      ),
    ],
  ),
  'clutter_event_has_shift_modifier': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_event_has_control_modifier': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_event_is_pointer_emulated': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_event_set_key_symbol': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterEvent *',
        name = 'event',
      ),
      Param(
        type = 'guint',
        name = 'key_sym',
      ),
    ],
  ),
  'clutter_event_get_key_symbol': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_event_set_key_code': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterEvent *',
        name = 'event',
      ),
      Param(
        type = 'guint16',
        name = 'key_code',
      ),
    ],
  ),
  'clutter_event_get_key_code': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_event_set_key_unicode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterEvent *',
        name = 'event',
      ),
      Param(
        type = 'guint32',
        name = 'key_unicode',
      ),
    ],
  ),
  'clutter_event_get_key_unicode': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_event_set_button': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterEvent *',
        name = 'event',
      ),
      Param(
        type = 'guint32',
        name = 'button',
      ),
    ],
  ),
  'clutter_event_get_button': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_event_get_click_count': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_event_set_related': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterEvent *',
        name = 'event',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_event_get_related': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_event_set_scroll_direction': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterEvent *',
        name = 'event',
      ),
      Param(
        type = 'ClutterScrollDirection',
        name = 'direction',
      ),
    ],
  ),
  'clutter_event_get_scroll_direction': Spec(
    return_type = 'ClutterScrollDirection',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_event_set_scroll_delta': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterEvent *',
        name = 'event',
      ),
      Param(
        type = 'gdouble',
        name = 'dx',
      ),
      Param(
        type = 'gdouble',
        name = 'dy',
      ),
    ],
  ),
  'clutter_event_get_scroll_delta': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
      Param(
        type = 'gdouble *',
        name = 'dx',
      ),
      Param(
        type = 'gdouble *',
        name = 'dy',
      ),
    ],
  ),
  'clutter_event_get_event_sequence': Spec(
    return_type = 'ClutterEventSequence *',
    parameters = [
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_keysym_to_unicode': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'guint',
        name = 'keyval',
      ),
    ],
  ),
  'clutter_unicode_to_keysym': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'guint32',
        name = 'wc',
      ),
    ],
  ),
  'clutter_get_current_event_time': Spec(
    return_type = 'guint32',
    parameters = [
    ],
  ),
  'clutter_get_current_event': Spec(
    return_type = 'const ClutterEvent *',
    parameters = [
    ],
  ),
  'clutter_actor_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_actor_new': Spec(
    return_type = 'ClutterActor *',
    parameters = [
    ],
  ),
  'clutter_actor_set_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActorFlags',
        name = 'flags',
      ),
    ],
  ),
  'clutter_actor_unset_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActorFlags',
        name = 'flags',
      ),
    ],
  ),
  'clutter_actor_get_flags': Spec(
    return_type = 'ClutterActorFlags',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_show': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_hide': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_realize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_unrealize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_map': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_unmap': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_paint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_continue_paint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_queue_redraw': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_queue_redraw_with_clip': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const cairo_rectangle_int_t *',
        name = 'clip',
      ),
    ],
  ),
  'clutter_actor_queue_relayout': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'clutter_actor_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_get_accessible': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_request_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterRequestMode',
        name = 'mode',
      ),
    ],
  ),
  'clutter_actor_get_request_mode': Spec(
    return_type = 'ClutterRequestMode',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_get_preferred_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'for_height',
      ),
      Param(
        type = 'gfloat *',
        name = 'min_width_p',
      ),
      Param(
        type = 'gfloat *',
        name = 'natural_width_p',
      ),
    ],
  ),
  'clutter_actor_get_preferred_height': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'for_width',
      ),
      Param(
        type = 'gfloat *',
        name = 'min_height_p',
      ),
      Param(
        type = 'gfloat *',
        name = 'natural_height_p',
      ),
    ],
  ),
  'clutter_actor_get_preferred_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat *',
        name = 'min_width_p',
      ),
      Param(
        type = 'gfloat *',
        name = 'min_height_p',
      ),
      Param(
        type = 'gfloat *',
        name = 'natural_width_p',
      ),
      Param(
        type = 'gfloat *',
        name = 'natural_height_p',
      ),
    ],
  ),
  'clutter_actor_allocate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const ClutterActorBox *',
        name = 'box',
      ),
      Param(
        type = 'ClutterAllocationFlags',
        name = 'flags',
      ),
    ],
  ),
  'clutter_actor_allocate_preferred_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterAllocationFlags',
        name = 'flags',
      ),
    ],
  ),
  'clutter_actor_allocate_available_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'x',
      ),
      Param(
        type = 'gfloat',
        name = 'y',
      ),
      Param(
        type = 'gfloat',
        name = 'available_width',
      ),
      Param(
        type = 'gfloat',
        name = 'available_height',
      ),
      Param(
        type = 'ClutterAllocationFlags',
        name = 'flags',
      ),
    ],
  ),
  'clutter_actor_allocate_align_fill': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const ClutterActorBox *',
        name = 'box',
      ),
      Param(
        type = 'gdouble',
        name = 'x_align',
      ),
      Param(
        type = 'gdouble',
        name = 'y_align',
      ),
      Param(
        type = 'gboolean',
        name = 'x_fill',
      ),
      Param(
        type = 'gboolean',
        name = 'y_fill',
      ),
      Param(
        type = 'ClutterAllocationFlags',
        name = 'flags',
      ),
    ],
  ),
  'clutter_actor_set_allocation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const ClutterActorBox *',
        name = 'box',
      ),
      Param(
        type = 'ClutterAllocationFlags',
        name = 'flags',
      ),
    ],
  ),
  'clutter_actor_get_allocation_box': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActorBox *',
        name = 'box',
      ),
    ],
  ),
  'clutter_actor_get_allocation_vertices': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'ancestor',
      ),
      Param(
        type = 'ClutterVertex []',
        name = 'verts',
      ),
    ],
  ),
  'clutter_actor_has_allocation': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'width',
      ),
      Param(
        type = 'gfloat',
        name = 'height',
      ),
    ],
  ),
  'clutter_actor_get_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat *',
        name = 'width',
      ),
      Param(
        type = 'gfloat *',
        name = 'height',
      ),
    ],
  ),
  'clutter_actor_set_position': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'x',
      ),
      Param(
        type = 'gfloat',
        name = 'y',
      ),
    ],
  ),
  'clutter_actor_get_position': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat *',
        name = 'x',
      ),
      Param(
        type = 'gfloat *',
        name = 'y',
      ),
    ],
  ),
  'clutter_actor_get_fixed_position_set': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_fixed_position_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gboolean',
        name = 'is_set',
      ),
    ],
  ),
  'clutter_actor_move_by': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'dx',
      ),
      Param(
        type = 'gfloat',
        name = 'dy',
      ),
    ],
  ),
  'clutter_actor_get_width': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_get_height': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'width',
      ),
    ],
  ),
  'clutter_actor_set_height': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'height',
      ),
    ],
  ),
  'clutter_actor_get_x': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_get_y': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_x': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'x',
      ),
    ],
  ),
  'clutter_actor_set_y': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'y',
      ),
    ],
  ),
  'clutter_actor_set_z_position': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'z_position',
      ),
    ],
  ),
  'clutter_actor_get_z_position': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_layout_manager': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterLayoutManager *',
        name = 'manager',
      ),
    ],
  ),
  'clutter_actor_get_layout_manager': Spec(
    return_type = 'ClutterLayoutManager *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_x_align': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActorAlign',
        name = 'x_align',
      ),
    ],
  ),
  'clutter_actor_get_x_align': Spec(
    return_type = 'ClutterActorAlign',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_y_align': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActorAlign',
        name = 'y_align',
      ),
    ],
  ),
  'clutter_actor_get_y_align': Spec(
    return_type = 'ClutterActorAlign',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_margin_top': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'margin',
      ),
    ],
  ),
  'clutter_actor_get_margin_top': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_margin_bottom': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'margin',
      ),
    ],
  ),
  'clutter_actor_get_margin_bottom': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_margin_left': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'margin',
      ),
    ],
  ),
  'clutter_actor_get_margin_left': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_margin_right': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'margin',
      ),
    ],
  ),
  'clutter_actor_get_margin_right': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_margin': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const ClutterMargin *',
        name = 'margin',
      ),
    ],
  ),
  'clutter_actor_get_margin': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterMargin *',
        name = 'margin',
      ),
    ],
  ),
  'clutter_actor_set_x_expand': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gboolean',
        name = 'expand',
      ),
    ],
  ),
  'clutter_actor_get_x_expand': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_y_expand': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gboolean',
        name = 'expand',
      ),
    ],
  ),
  'clutter_actor_get_y_expand': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_needs_expand': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterOrientation',
        name = 'orientation',
      ),
    ],
  ),
  'clutter_actor_set_clip': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'xoff',
      ),
      Param(
        type = 'gfloat',
        name = 'yoff',
      ),
      Param(
        type = 'gfloat',
        name = 'width',
      ),
      Param(
        type = 'gfloat',
        name = 'height',
      ),
    ],
  ),
  'clutter_actor_remove_clip': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_has_clip': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_get_clip': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat *',
        name = 'xoff',
      ),
      Param(
        type = 'gfloat *',
        name = 'yoff',
      ),
      Param(
        type = 'gfloat *',
        name = 'width',
      ),
      Param(
        type = 'gfloat *',
        name = 'height',
      ),
    ],
  ),
  'clutter_actor_set_clip_to_allocation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gboolean',
        name = 'clip_set',
      ),
    ],
  ),
  'clutter_actor_get_clip_to_allocation': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_opacity': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'guint8',
        name = 'opacity',
      ),
    ],
  ),
  'clutter_actor_get_opacity': Spec(
    return_type = 'guint8',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_get_paint_opacity': Spec(
    return_type = 'guint8',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_get_paint_visibility': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_offscreen_redirect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterOffscreenRedirect',
        name = 'redirect',
      ),
    ],
  ),
  'clutter_actor_get_offscreen_redirect': Spec(
    return_type = 'ClutterOffscreenRedirect',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_should_pick_paint': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_is_in_clone_paint': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_get_paint_box': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActorBox *',
        name = 'box',
      ),
    ],
  ),
  'clutter_actor_has_overlaps': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_content': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterContent *',
        name = 'content',
      ),
    ],
  ),
  'clutter_actor_get_content': Spec(
    return_type = 'ClutterContent *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_content_gravity': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterContentGravity',
        name = 'gravity',
      ),
    ],
  ),
  'clutter_actor_get_content_gravity': Spec(
    return_type = 'ClutterContentGravity',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_content_scaling_filters': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterScalingFilter',
        name = 'min_filter',
      ),
      Param(
        type = 'ClutterScalingFilter',
        name = 'mag_filter',
      ),
    ],
  ),
  'clutter_actor_get_content_scaling_filters': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterScalingFilter *',
        name = 'min_filter',
      ),
      Param(
        type = 'ClutterScalingFilter *',
        name = 'mag_filter',
      ),
    ],
  ),
  'clutter_actor_set_content_repeat': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterContentRepeat',
        name = 'repeat',
      ),
    ],
  ),
  'clutter_actor_get_content_repeat': Spec(
    return_type = 'ClutterContentRepeat',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_get_content_box': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActorBox *',
        name = 'box',
      ),
    ],
  ),
  'clutter_actor_set_background_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_actor_get_background_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_actor_get_paint_volume': Spec(
    return_type = 'const ClutterPaintVolume *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_get_transformed_paint_volume': Spec(
    return_type = 'const ClutterPaintVolume *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'relative_to_ancestor',
      ),
    ],
  ),
  'clutter_actor_get_default_paint_volume': Spec(
    return_type = 'const ClutterPaintVolume *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_reactive': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'gboolean',
        name = 'reactive',
      ),
    ],
  ),
  'clutter_actor_get_reactive': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_actor_has_key_focus': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_grab_key_focus': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_event': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'const ClutterEvent *',
        name = 'event',
      ),
      Param(
        type = 'gboolean',
        name = 'capture',
      ),
    ],
  ),
  'clutter_actor_has_pointer': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_get_pango_context': Spec(
    return_type = 'PangoContext *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_create_pango_context': Spec(
    return_type = 'PangoContext *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_create_pango_layout': Spec(
    return_type = 'PangoLayout *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'clutter_actor_set_text_direction': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterTextDirection',
        name = 'text_dir',
      ),
    ],
  ),
  'clutter_actor_get_text_direction': Spec(
    return_type = 'ClutterTextDirection',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_add_child': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'child',
      ),
    ],
  ),
  'clutter_actor_insert_child_at_index': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'child',
      ),
      Param(
        type = 'gint',
        name = 'index_',
      ),
    ],
  ),
  'clutter_actor_insert_child_above': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'child',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'sibling',
      ),
    ],
  ),
  'clutter_actor_insert_child_below': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'child',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'sibling',
      ),
    ],
  ),
  'clutter_actor_replace_child': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'old_child',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'new_child',
      ),
    ],
  ),
  'clutter_actor_remove_child': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'child',
      ),
    ],
  ),
  'clutter_actor_remove_all_children': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_destroy_all_children': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_get_children': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_get_n_children': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_get_child_at_index': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gint',
        name = 'index_',
      ),
    ],
  ),
  'clutter_actor_get_previous_sibling': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_get_next_sibling': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_get_first_child': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_get_last_child': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_get_parent': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_contains': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'descendant',
      ),
    ],
  ),
  'clutter_actor_get_stage': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_actor_set_child_below_sibling': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'child',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'sibling',
      ),
    ],
  ),
  'clutter_actor_set_child_above_sibling': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'child',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'sibling',
      ),
    ],
  ),
  'clutter_actor_set_child_at_index': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'child',
      ),
      Param(
        type = 'gint',
        name = 'index_',
      ),
    ],
  ),
  'clutter_actor_iter_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActorIter *',
        name = 'iter',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'root',
      ),
    ],
  ),
  'clutter_actor_iter_next': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActorIter *',
        name = 'iter',
      ),
      Param(
        type = 'ClutterActor **',
        name = 'child',
      ),
    ],
  ),
  'clutter_actor_iter_prev': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActorIter *',
        name = 'iter',
      ),
      Param(
        type = 'ClutterActor **',
        name = 'child',
      ),
    ],
  ),
  'clutter_actor_iter_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActorIter *',
        name = 'iter',
      ),
    ],
  ),
  'clutter_actor_iter_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActorIter *',
        name = 'iter',
      ),
    ],
  ),
  'clutter_actor_iter_is_valid': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const ClutterActorIter *',
        name = 'iter',
      ),
    ],
  ),
  'clutter_actor_is_rotated': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_is_scaled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_pivot_point': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'pivot_x',
      ),
      Param(
        type = 'gfloat',
        name = 'pivot_y',
      ),
    ],
  ),
  'clutter_actor_get_pivot_point': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat *',
        name = 'pivot_x',
      ),
      Param(
        type = 'gfloat *',
        name = 'pivot_y',
      ),
    ],
  ),
  'clutter_actor_set_pivot_point_z': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'pivot_z',
      ),
    ],
  ),
  'clutter_actor_get_pivot_point_z': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_rotation_angle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterRotateAxis',
        name = 'axis',
      ),
      Param(
        type = 'gdouble',
        name = 'angle',
      ),
    ],
  ),
  'clutter_actor_get_rotation_angle': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterRotateAxis',
        name = 'axis',
      ),
    ],
  ),
  'clutter_actor_set_scale': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gdouble',
        name = 'scale_x',
      ),
      Param(
        type = 'gdouble',
        name = 'scale_y',
      ),
    ],
  ),
  'clutter_actor_get_scale': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gdouble *',
        name = 'scale_x',
      ),
      Param(
        type = 'gdouble *',
        name = 'scale_y',
      ),
    ],
  ),
  'clutter_actor_set_scale_z': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gdouble',
        name = 'scale_z',
      ),
    ],
  ),
  'clutter_actor_get_scale_z': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_translation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'translate_x',
      ),
      Param(
        type = 'gfloat',
        name = 'translate_y',
      ),
      Param(
        type = 'gfloat',
        name = 'translate_z',
      ),
    ],
  ),
  'clutter_actor_get_translation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat *',
        name = 'translate_x',
      ),
      Param(
        type = 'gfloat *',
        name = 'translate_y',
      ),
      Param(
        type = 'gfloat *',
        name = 'translate_z',
      ),
    ],
  ),
  'clutter_actor_set_transform': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const ClutterMatrix *',
        name = 'transform',
      ),
    ],
  ),
  'clutter_actor_get_transform': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterMatrix *',
        name = 'transform',
      ),
    ],
  ),
  'clutter_actor_set_child_transform': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const ClutterMatrix *',
        name = 'transform',
      ),
    ],
  ),
  'clutter_actor_get_child_transform': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterMatrix *',
        name = 'transform',
      ),
    ],
  ),
  'clutter_actor_get_transformed_position': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat *',
        name = 'x',
      ),
      Param(
        type = 'gfloat *',
        name = 'y',
      ),
    ],
  ),
  'clutter_actor_get_transformed_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat *',
        name = 'width',
      ),
      Param(
        type = 'gfloat *',
        name = 'height',
      ),
    ],
  ),
  'clutter_actor_transform_stage_point': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'x',
      ),
      Param(
        type = 'gfloat',
        name = 'y',
      ),
      Param(
        type = 'gfloat *',
        name = 'x_out',
      ),
      Param(
        type = 'gfloat *',
        name = 'y_out',
      ),
    ],
  ),
  'clutter_actor_get_abs_allocation_vertices': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterVertex []',
        name = 'verts',
      ),
    ],
  ),
  'clutter_actor_apply_transform_to_point': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const ClutterVertex *',
        name = 'point',
      ),
      Param(
        type = 'ClutterVertex *',
        name = 'vertex',
      ),
    ],
  ),
  'clutter_actor_apply_relative_transform_to_point': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'ancestor',
      ),
      Param(
        type = 'const ClutterVertex *',
        name = 'point',
      ),
      Param(
        type = 'ClutterVertex *',
        name = 'vertex',
      ),
    ],
  ),
  'clutter_actor_save_easing_state': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_restore_easing_state': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_easing_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterAnimationMode',
        name = 'mode',
      ),
    ],
  ),
  'clutter_actor_get_easing_mode': Spec(
    return_type = 'ClutterAnimationMode',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_easing_duration': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'guint',
        name = 'msecs',
      ),
    ],
  ),
  'clutter_actor_get_easing_duration': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_easing_delay': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'guint',
        name = 'msecs',
      ),
    ],
  ),
  'clutter_actor_get_easing_delay': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_get_transition': Spec(
    return_type = 'ClutterTransition *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const char *',
        name = 'name',
      ),
    ],
  ),
  'clutter_actor_add_transition': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const char *',
        name = 'name',
      ),
      Param(
        type = 'ClutterTransition *',
        name = 'transition',
      ),
    ],
  ),
  'clutter_actor_remove_transition': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const char *',
        name = 'name',
      ),
    ],
  ),
  'clutter_actor_remove_all_transitions': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_constraint_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_actor_add_constraint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterConstraint *',
        name = 'constraint',
      ),
    ],
  ),
  'clutter_actor_add_constraint_with_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'ClutterConstraint *',
        name = 'constraint',
      ),
    ],
  ),
  'clutter_actor_remove_constraint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterConstraint *',
        name = 'constraint',
      ),
    ],
  ),
  'clutter_actor_remove_constraint_by_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'clutter_actor_get_constraints': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_get_constraint': Spec(
    return_type = 'ClutterConstraint *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'clutter_actor_clear_constraints': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_has_constraints': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_align_constraint_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_align_constraint_new': Spec(
    return_type = 'ClutterConstraint *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'source',
      ),
      Param(
        type = 'ClutterAlignAxis',
        name = 'axis',
      ),
      Param(
        type = 'gfloat',
        name = 'factor',
      ),
    ],
  ),
  'clutter_align_constraint_set_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAlignConstraint *',
        name = 'align',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'source',
      ),
    ],
  ),
  'clutter_align_constraint_get_source': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterAlignConstraint *',
        name = 'align',
      ),
    ],
  ),
  'clutter_align_constraint_set_align_axis': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAlignConstraint *',
        name = 'align',
      ),
      Param(
        type = 'ClutterAlignAxis',
        name = 'axis',
      ),
    ],
  ),
  'clutter_align_constraint_get_align_axis': Spec(
    return_type = 'ClutterAlignAxis',
    parameters = [
      Param(
        type = 'ClutterAlignConstraint *',
        name = 'align',
      ),
    ],
  ),
  'clutter_align_constraint_set_factor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAlignConstraint *',
        name = 'align',
      ),
      Param(
        type = 'gfloat',
        name = 'factor',
      ),
    ],
  ),
  'clutter_align_constraint_get_factor': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'ClutterAlignConstraint *',
        name = 'align',
      ),
    ],
  ),
  'clutter_animatable_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_animatable_find_property': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'ClutterAnimatable *',
        name = 'animatable',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
    ],
  ),
  'clutter_animatable_get_initial_state': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAnimatable *',
        name = 'animatable',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_animatable_set_final_state': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAnimatable *',
        name = 'animatable',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_animatable_interpolate_value': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterAnimatable *',
        name = 'animatable',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'ClutterInterval *',
        name = 'interval',
      ),
      Param(
        type = 'gdouble',
        name = 'progress',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_backend_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_get_default_backend': Spec(
    return_type = 'ClutterBackend *',
    parameters = [
    ],
  ),
  'clutter_backend_get_resolution': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'ClutterBackend *',
        name = 'backend',
      ),
    ],
  ),
  'clutter_backend_set_font_options': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBackend *',
        name = 'backend',
      ),
      Param(
        type = 'const cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'clutter_backend_get_font_options': Spec(
    return_type = 'const cairo_font_options_t *',
    parameters = [
      Param(
        type = 'ClutterBackend *',
        name = 'backend',
      ),
    ],
  ),
  'clutter_bind_constraint_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_bind_constraint_new': Spec(
    return_type = 'ClutterConstraint *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'source',
      ),
      Param(
        type = 'ClutterBindCoordinate',
        name = 'coordinate',
      ),
      Param(
        type = 'gfloat',
        name = 'offset',
      ),
    ],
  ),
  'clutter_bind_constraint_set_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBindConstraint *',
        name = 'constraint',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'source',
      ),
    ],
  ),
  'clutter_bind_constraint_get_source': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterBindConstraint *',
        name = 'constraint',
      ),
    ],
  ),
  'clutter_bind_constraint_set_coordinate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBindConstraint *',
        name = 'constraint',
      ),
      Param(
        type = 'ClutterBindCoordinate',
        name = 'coordinate',
      ),
    ],
  ),
  'clutter_bind_constraint_get_coordinate': Spec(
    return_type = 'ClutterBindCoordinate',
    parameters = [
      Param(
        type = 'ClutterBindConstraint *',
        name = 'constraint',
      ),
    ],
  ),
  'clutter_bind_constraint_set_offset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBindConstraint *',
        name = 'constraint',
      ),
      Param(
        type = 'gfloat',
        name = 'offset',
      ),
    ],
  ),
  'clutter_bind_constraint_get_offset': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'ClutterBindConstraint *',
        name = 'constraint',
      ),
    ],
  ),
  'clutter_binding_pool_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_binding_pool_new': Spec(
    return_type = 'ClutterBindingPool *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'clutter_binding_pool_get_for_class': Spec(
    return_type = 'ClutterBindingPool *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'klass',
      ),
    ],
  ),
  'clutter_binding_pool_find': Spec(
    return_type = 'ClutterBindingPool *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'clutter_binding_pool_install_action': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBindingPool *',
        name = 'pool',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
      Param(
        type = 'guint',
        name = 'key_val',
      ),
      Param(
        type = 'ClutterModifierType',
        name = 'modifiers',
      ),
      Param(
        type = 'GCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'clutter_binding_pool_install_closure': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBindingPool *',
        name = 'pool',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
      Param(
        type = 'guint',
        name = 'key_val',
      ),
      Param(
        type = 'ClutterModifierType',
        name = 'modifiers',
      ),
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
    ],
  ),
  'clutter_binding_pool_override_action': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBindingPool *',
        name = 'pool',
      ),
      Param(
        type = 'guint',
        name = 'key_val',
      ),
      Param(
        type = 'ClutterModifierType',
        name = 'modifiers',
      ),
      Param(
        type = 'GCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'clutter_binding_pool_override_closure': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBindingPool *',
        name = 'pool',
      ),
      Param(
        type = 'guint',
        name = 'key_val',
      ),
      Param(
        type = 'ClutterModifierType',
        name = 'modifiers',
      ),
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
    ],
  ),
  'clutter_binding_pool_find_action': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'ClutterBindingPool *',
        name = 'pool',
      ),
      Param(
        type = 'guint',
        name = 'key_val',
      ),
      Param(
        type = 'ClutterModifierType',
        name = 'modifiers',
      ),
    ],
  ),
  'clutter_binding_pool_remove_action': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBindingPool *',
        name = 'pool',
      ),
      Param(
        type = 'guint',
        name = 'key_val',
      ),
      Param(
        type = 'ClutterModifierType',
        name = 'modifiers',
      ),
    ],
  ),
  'clutter_binding_pool_activate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterBindingPool *',
        name = 'pool',
      ),
      Param(
        type = 'guint',
        name = 'key_val',
      ),
      Param(
        type = 'ClutterModifierType',
        name = 'modifiers',
      ),
      Param(
        type = 'GObject *',
        name = 'gobject',
      ),
    ],
  ),
  'clutter_binding_pool_block_action': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBindingPool *',
        name = 'pool',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'clutter_binding_pool_unblock_action': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBindingPool *',
        name = 'pool',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'clutter_layout_manager_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_layout_manager_get_preferred_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterLayoutManager *',
        name = 'manager',
      ),
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'gfloat',
        name = 'for_height',
      ),
      Param(
        type = 'gfloat *',
        name = 'min_width_p',
      ),
      Param(
        type = 'gfloat *',
        name = 'nat_width_p',
      ),
    ],
  ),
  'clutter_layout_manager_get_preferred_height': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterLayoutManager *',
        name = 'manager',
      ),
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'gfloat',
        name = 'for_width',
      ),
      Param(
        type = 'gfloat *',
        name = 'min_height_p',
      ),
      Param(
        type = 'gfloat *',
        name = 'nat_height_p',
      ),
    ],
  ),
  'clutter_layout_manager_allocate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterLayoutManager *',
        name = 'manager',
      ),
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'const ClutterActorBox *',
        name = 'allocation',
      ),
      Param(
        type = 'ClutterAllocationFlags',
        name = 'flags',
      ),
    ],
  ),
  'clutter_layout_manager_set_container': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterLayoutManager *',
        name = 'manager',
      ),
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
    ],
  ),
  'clutter_layout_manager_layout_changed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterLayoutManager *',
        name = 'manager',
      ),
    ],
  ),
  'clutter_layout_manager_find_child_property': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'ClutterLayoutManager *',
        name = 'manager',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'clutter_layout_manager_list_child_properties': Spec(
    return_type = 'GParamSpec **',
    parameters = [
      Param(
        type = 'ClutterLayoutManager *',
        name = 'manager',
      ),
      Param(
        type = 'guint *',
        name = 'n_pspecs',
      ),
    ],
  ),
  'clutter_layout_manager_get_child_meta': Spec(
    return_type = 'ClutterLayoutMeta *',
    parameters = [
      Param(
        type = 'ClutterLayoutManager *',
        name = 'manager',
      ),
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_layout_manager_child_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterLayoutManager *',
        name = 'manager',
      ),
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property',
      ),
    ],
  ),
  'clutter_layout_manager_child_get': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterLayoutManager *',
        name = 'manager',
      ),
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property',
      ),
    ],
  ),
  'clutter_layout_manager_child_set_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterLayoutManager *',
        name = 'manager',
      ),
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_layout_manager_child_get_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterLayoutManager *',
        name = 'manager',
      ),
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_layout_manager_begin_animation': Spec(
    return_type = 'ClutterAlpha *',
    parameters = [
      Param(
        type = 'ClutterLayoutManager *',
        name = 'manager',
      ),
      Param(
        type = 'guint',
        name = 'duration',
      ),
      Param(
        type = 'gulong',
        name = 'mode',
      ),
    ],
  ),
  'clutter_layout_manager_end_animation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterLayoutManager *',
        name = 'manager',
      ),
    ],
  ),
  'clutter_layout_manager_get_animation_progress': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'ClutterLayoutManager *',
        name = 'manager',
      ),
    ],
  ),
  'clutter_bin_layout_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_bin_layout_new': Spec(
    return_type = 'ClutterLayoutManager *',
    parameters = [
      Param(
        type = 'ClutterBinAlignment',
        name = 'x_align',
      ),
      Param(
        type = 'ClutterBinAlignment',
        name = 'y_align',
      ),
    ],
  ),
  'clutter_effect_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_effect_queue_repaint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterEffect *',
        name = 'effect',
      ),
    ],
  ),
  'clutter_actor_add_effect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterEffect *',
        name = 'effect',
      ),
    ],
  ),
  'clutter_actor_add_effect_with_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'ClutterEffect *',
        name = 'effect',
      ),
    ],
  ),
  'clutter_actor_remove_effect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterEffect *',
        name = 'effect',
      ),
    ],
  ),
  'clutter_actor_remove_effect_by_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'clutter_actor_get_effects': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_get_effect': Spec(
    return_type = 'ClutterEffect *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'clutter_actor_clear_effects': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_has_effects': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_blur_effect_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_blur_effect_new': Spec(
    return_type = 'ClutterEffect *',
    parameters = [
    ],
  ),
  'clutter_box_layout_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_box_layout_new': Spec(
    return_type = 'ClutterLayoutManager *',
    parameters = [
    ],
  ),
  'clutter_box_layout_set_orientation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBoxLayout *',
        name = 'layout',
      ),
      Param(
        type = 'ClutterOrientation',
        name = 'orientation',
      ),
    ],
  ),
  'clutter_box_layout_get_orientation': Spec(
    return_type = 'ClutterOrientation',
    parameters = [
      Param(
        type = 'ClutterBoxLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_box_layout_set_spacing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBoxLayout *',
        name = 'layout',
      ),
      Param(
        type = 'guint',
        name = 'spacing',
      ),
    ],
  ),
  'clutter_box_layout_get_spacing': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterBoxLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_box_layout_set_homogeneous': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBoxLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gboolean',
        name = 'homogeneous',
      ),
    ],
  ),
  'clutter_box_layout_get_homogeneous': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterBoxLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_box_layout_set_pack_start': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBoxLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gboolean',
        name = 'pack_start',
      ),
    ],
  ),
  'clutter_box_layout_get_pack_start': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterBoxLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_box_layout_set_vertical': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBoxLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gboolean',
        name = 'vertical',
      ),
    ],
  ),
  'clutter_box_layout_get_vertical': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterBoxLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_box_layout_pack': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBoxLayout *',
        name = 'layout',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'gboolean',
        name = 'expand',
      ),
      Param(
        type = 'gboolean',
        name = 'x_fill',
      ),
      Param(
        type = 'gboolean',
        name = 'y_fill',
      ),
      Param(
        type = 'ClutterBoxAlignment',
        name = 'x_align',
      ),
      Param(
        type = 'ClutterBoxAlignment',
        name = 'y_align',
      ),
    ],
  ),
  'clutter_box_layout_set_alignment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBoxLayout *',
        name = 'layout',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'ClutterBoxAlignment',
        name = 'x_align',
      ),
      Param(
        type = 'ClutterBoxAlignment',
        name = 'y_align',
      ),
    ],
  ),
  'clutter_box_layout_get_alignment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBoxLayout *',
        name = 'layout',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'ClutterBoxAlignment *',
        name = 'x_align',
      ),
      Param(
        type = 'ClutterBoxAlignment *',
        name = 'y_align',
      ),
    ],
  ),
  'clutter_box_layout_set_fill': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBoxLayout *',
        name = 'layout',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'gboolean',
        name = 'x_fill',
      ),
      Param(
        type = 'gboolean',
        name = 'y_fill',
      ),
    ],
  ),
  'clutter_box_layout_get_fill': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBoxLayout *',
        name = 'layout',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'gboolean *',
        name = 'x_fill',
      ),
      Param(
        type = 'gboolean *',
        name = 'y_fill',
      ),
    ],
  ),
  'clutter_box_layout_set_expand': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBoxLayout *',
        name = 'layout',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'gboolean',
        name = 'expand',
      ),
    ],
  ),
  'clutter_box_layout_get_expand': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterBoxLayout *',
        name = 'layout',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_box_layout_set_use_animations': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBoxLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gboolean',
        name = 'animate',
      ),
    ],
  ),
  'clutter_box_layout_get_use_animations': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterBoxLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_box_layout_set_easing_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBoxLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gulong',
        name = 'mode',
      ),
    ],
  ),
  'clutter_box_layout_get_easing_mode': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'ClutterBoxLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_box_layout_set_easing_duration': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBoxLayout *',
        name = 'layout',
      ),
      Param(
        type = 'guint',
        name = 'msecs',
      ),
    ],
  ),
  'clutter_box_layout_get_easing_duration': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterBoxLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_color_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_color_new': Spec(
    return_type = 'ClutterColor *',
    parameters = [
      Param(
        type = 'guint8',
        name = 'red',
      ),
      Param(
        type = 'guint8',
        name = 'green',
      ),
      Param(
        type = 'guint8',
        name = 'blue',
      ),
      Param(
        type = 'guint8',
        name = 'alpha',
      ),
    ],
  ),
  'clutter_color_alloc': Spec(
    return_type = 'ClutterColor *',
    parameters = [
    ],
  ),
  'clutter_color_init': Spec(
    return_type = 'ClutterColor *',
    parameters = [
      Param(
        type = 'ClutterColor *',
        name = 'color',
      ),
      Param(
        type = 'guint8',
        name = 'red',
      ),
      Param(
        type = 'guint8',
        name = 'green',
      ),
      Param(
        type = 'guint8',
        name = 'blue',
      ),
      Param(
        type = 'guint8',
        name = 'alpha',
      ),
    ],
  ),
  'clutter_color_copy': Spec(
    return_type = 'ClutterColor *',
    parameters = [
      Param(
        type = 'const ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_color_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_color_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const ClutterColor *',
        name = 'a',
      ),
      Param(
        type = 'const ClutterColor *',
        name = 'b',
      ),
      Param(
        type = 'ClutterColor *',
        name = 'result',
      ),
    ],
  ),
  'clutter_color_subtract': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const ClutterColor *',
        name = 'a',
      ),
      Param(
        type = 'const ClutterColor *',
        name = 'b',
      ),
      Param(
        type = 'ClutterColor *',
        name = 'result',
      ),
    ],
  ),
  'clutter_color_lighten': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const ClutterColor *',
        name = 'color',
      ),
      Param(
        type = 'ClutterColor *',
        name = 'result',
      ),
    ],
  ),
  'clutter_color_darken': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const ClutterColor *',
        name = 'color',
      ),
      Param(
        type = 'ClutterColor *',
        name = 'result',
      ),
    ],
  ),
  'clutter_color_shade': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const ClutterColor *',
        name = 'color',
      ),
      Param(
        type = 'gdouble',
        name = 'factor',
      ),
      Param(
        type = 'ClutterColor *',
        name = 'result',
      ),
    ],
  ),
  'clutter_color_to_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_color_from_string': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterColor *',
        name = 'color',
      ),
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
    ],
  ),
  'clutter_color_to_hls': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const ClutterColor *',
        name = 'color',
      ),
      Param(
        type = 'gfloat *',
        name = 'hue',
      ),
      Param(
        type = 'gfloat *',
        name = 'luminance',
      ),
      Param(
        type = 'gfloat *',
        name = 'saturation',
      ),
    ],
  ),
  'clutter_color_from_hls': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterColor *',
        name = 'color',
      ),
      Param(
        type = 'gfloat',
        name = 'hue',
      ),
      Param(
        type = 'gfloat',
        name = 'luminance',
      ),
      Param(
        type = 'gfloat',
        name = 'saturation',
      ),
    ],
  ),
  'clutter_color_to_pixel': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'const ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_color_from_pixel': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterColor *',
        name = 'color',
      ),
      Param(
        type = 'guint32',
        name = 'pixel',
      ),
    ],
  ),
  'clutter_color_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v',
      ),
    ],
  ),
  'clutter_color_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'v2',
      ),
    ],
  ),
  'clutter_color_interpolate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const ClutterColor *',
        name = 'initial',
      ),
      Param(
        type = 'const ClutterColor *',
        name = 'final',
      ),
      Param(
        type = 'gdouble',
        name = 'progress',
      ),
      Param(
        type = 'ClutterColor *',
        name = 'result',
      ),
    ],
  ),
  'clutter_value_set_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'const ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_value_get_color': Spec(
    return_type = 'const ClutterColor *',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_param_color_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_param_spec_color': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'const ClutterColor *',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'clutter_color_get_static': Spec(
    return_type = 'const ClutterColor *',
    parameters = [
      Param(
        type = 'ClutterStaticColor',
        name = 'color',
      ),
    ],
  ),
  'clutter_brightness_contrast_effect_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_brightness_contrast_effect_new': Spec(
    return_type = 'ClutterEffect *',
    parameters = [
    ],
  ),
  'clutter_brightness_contrast_effect_set_brightness_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBrightnessContrastEffect *',
        name = 'effect',
      ),
      Param(
        type = 'float',
        name = 'red',
      ),
      Param(
        type = 'float',
        name = 'green',
      ),
      Param(
        type = 'float',
        name = 'blue',
      ),
    ],
  ),
  'clutter_brightness_contrast_effect_set_brightness': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBrightnessContrastEffect *',
        name = 'effect',
      ),
      Param(
        type = 'float',
        name = 'brightness',
      ),
    ],
  ),
  'clutter_brightness_contrast_effect_get_brightness': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBrightnessContrastEffect *',
        name = 'effect',
      ),
      Param(
        type = 'float *',
        name = 'red',
      ),
      Param(
        type = 'float *',
        name = 'green',
      ),
      Param(
        type = 'float *',
        name = 'blue',
      ),
    ],
  ),
  'clutter_brightness_contrast_effect_set_contrast_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBrightnessContrastEffect *',
        name = 'effect',
      ),
      Param(
        type = 'float',
        name = 'red',
      ),
      Param(
        type = 'float',
        name = 'green',
      ),
      Param(
        type = 'float',
        name = 'blue',
      ),
    ],
  ),
  'clutter_brightness_contrast_effect_set_contrast': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBrightnessContrastEffect *',
        name = 'effect',
      ),
      Param(
        type = 'float',
        name = 'contrast',
      ),
    ],
  ),
  'clutter_brightness_contrast_effect_get_contrast': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBrightnessContrastEffect *',
        name = 'effect',
      ),
      Param(
        type = 'float *',
        name = 'red',
      ),
      Param(
        type = 'float *',
        name = 'green',
      ),
      Param(
        type = 'float *',
        name = 'blue',
      ),
    ],
  ),
  'clutter_cairo_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'clutter_cairo_set_source_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_canvas_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_canvas_new': Spec(
    return_type = 'ClutterContent *',
    parameters = [
    ],
  ),
  'clutter_canvas_set_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterCanvas *',
        name = 'canvas',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'clutter_child_meta_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_child_meta_get_container': Spec(
    return_type = 'ClutterContainer *',
    parameters = [
      Param(
        type = 'ClutterChildMeta *',
        name = 'data',
      ),
    ],
  ),
  'clutter_child_meta_get_actor': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterChildMeta *',
        name = 'data',
      ),
    ],
  ),
  'clutter_click_action_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_click_action_new': Spec(
    return_type = 'ClutterAction *',
    parameters = [
    ],
  ),
  'clutter_click_action_get_button': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterClickAction *',
        name = 'action',
      ),
    ],
  ),
  'clutter_click_action_get_state': Spec(
    return_type = 'ClutterModifierType',
    parameters = [
      Param(
        type = 'ClutterClickAction *',
        name = 'action',
      ),
    ],
  ),
  'clutter_click_action_get_coords': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterClickAction *',
        name = 'action',
      ),
      Param(
        type = 'gfloat *',
        name = 'press_x',
      ),
      Param(
        type = 'gfloat *',
        name = 'press_y',
      ),
    ],
  ),
  'clutter_click_action_release': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterClickAction *',
        name = 'action',
      ),
    ],
  ),
  'clutter_clone_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_clone_new': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'source',
      ),
    ],
  ),
  'clutter_clone_set_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterClone *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'source',
      ),
    ],
  ),
  'clutter_clone_get_source': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterClone *',
        name = 'self',
      ),
    ],
  ),
  'clutter_colorize_effect_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_colorize_effect_new': Spec(
    return_type = 'ClutterEffect *',
    parameters = [
      Param(
        type = 'const ClutterColor *',
        name = 'tint',
      ),
    ],
  ),
  'clutter_colorize_effect_set_tint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterColorizeEffect *',
        name = 'effect',
      ),
      Param(
        type = 'const ClutterColor *',
        name = 'tint',
      ),
    ],
  ),
  'clutter_colorize_effect_get_tint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterColorizeEffect *',
        name = 'effect',
      ),
      Param(
        type = 'ClutterColor *',
        name = 'tint',
      ),
    ],
  ),
  'clutter_container_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_container_find_child_by_name': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'const gchar *',
        name = 'child_name',
      ),
    ],
  ),
  'clutter_container_class_find_child_property': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'GObjectClass *',
        name = 'klass',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
    ],
  ),
  'clutter_container_class_list_child_properties': Spec(
    return_type = 'GParamSpec **',
    parameters = [
      Param(
        type = 'GObjectClass *',
        name = 'klass',
      ),
      Param(
        type = 'guint *',
        name = 'n_properties',
      ),
    ],
  ),
  'clutter_container_create_child_meta': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_container_destroy_child_meta': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_container_get_child_meta': Spec(
    return_type = 'ClutterChildMeta *',
    parameters = [
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_container_child_set_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'child',
      ),
      Param(
        type = 'const gchar *',
        name = 'property',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_container_child_get_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'child',
      ),
      Param(
        type = 'const gchar *',
        name = 'property',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_container_child_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_prop',
      ),
    ],
  ),
  'clutter_container_child_get': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_prop',
      ),
    ],
  ),
  'clutter_container_child_notify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'child',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'clutter_content_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_content_get_preferred_size': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterContent *',
        name = 'content',
      ),
      Param(
        type = 'gfloat *',
        name = 'width',
      ),
      Param(
        type = 'gfloat *',
        name = 'height',
      ),
    ],
  ),
  'clutter_content_invalidate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterContent *',
        name = 'content',
      ),
    ],
  ),
  'clutter_offscreen_effect_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_offscreen_effect_get_target': Spec(
    return_type = 'CoglMaterial *',
    parameters = [
      Param(
        type = 'ClutterOffscreenEffect *',
        name = 'effect',
      ),
    ],
  ),
  'clutter_offscreen_effect_get_texture': Spec(
    return_type = 'CoglHandle',
    parameters = [
      Param(
        type = 'ClutterOffscreenEffect *',
        name = 'effect',
      ),
    ],
  ),
  'clutter_offscreen_effect_paint_target': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterOffscreenEffect *',
        name = 'effect',
      ),
    ],
  ),
  'clutter_offscreen_effect_create_texture': Spec(
    return_type = 'CoglHandle',
    parameters = [
      Param(
        type = 'ClutterOffscreenEffect *',
        name = 'effect',
      ),
      Param(
        type = 'gfloat',
        name = 'width',
      ),
      Param(
        type = 'gfloat',
        name = 'height',
      ),
    ],
  ),
  'clutter_offscreen_effect_get_target_size': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterOffscreenEffect *',
        name = 'effect',
      ),
      Param(
        type = 'gfloat *',
        name = 'width',
      ),
      Param(
        type = 'gfloat *',
        name = 'height',
      ),
    ],
  ),
  'clutter_deform_effect_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_deform_effect_set_back_material': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterDeformEffect *',
        name = 'effect',
      ),
      Param(
        type = 'CoglHandle',
        name = 'material',
      ),
    ],
  ),
  'clutter_deform_effect_get_back_material': Spec(
    return_type = 'CoglHandle',
    parameters = [
      Param(
        type = 'ClutterDeformEffect *',
        name = 'effect',
      ),
    ],
  ),
  'clutter_deform_effect_set_n_tiles': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterDeformEffect *',
        name = 'effect',
      ),
      Param(
        type = 'guint',
        name = 'x_tiles',
      ),
      Param(
        type = 'guint',
        name = 'y_tiles',
      ),
    ],
  ),
  'clutter_deform_effect_get_n_tiles': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterDeformEffect *',
        name = 'effect',
      ),
      Param(
        type = 'guint *',
        name = 'x_tiles',
      ),
      Param(
        type = 'guint *',
        name = 'y_tiles',
      ),
    ],
  ),
  'clutter_deform_effect_invalidate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterDeformEffect *',
        name = 'effect',
      ),
    ],
  ),
  'clutter_desaturate_effect_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_desaturate_effect_new': Spec(
    return_type = 'ClutterEffect *',
    parameters = [
      Param(
        type = 'gdouble',
        name = 'factor',
      ),
    ],
  ),
  'clutter_desaturate_effect_set_factor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterDesaturateEffect *',
        name = 'effect',
      ),
      Param(
        type = 'gdouble',
        name = 'factor',
      ),
    ],
  ),
  'clutter_desaturate_effect_get_factor': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'ClutterDesaturateEffect *',
        name = 'effect',
      ),
    ],
  ),
  'clutter_group_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_perspective_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_fog_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_stage_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_stage_new': Spec(
    return_type = 'ClutterActor *',
    parameters = [
    ],
  ),
  'clutter_stage_set_perspective': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
      Param(
        type = 'ClutterPerspective *',
        name = 'perspective',
      ),
    ],
  ),
  'clutter_stage_get_perspective': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
      Param(
        type = 'ClutterPerspective *',
        name = 'perspective',
      ),
    ],
  ),
  'clutter_stage_set_fullscreen': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
      Param(
        type = 'gboolean',
        name = 'fullscreen',
      ),
    ],
  ),
  'clutter_stage_get_fullscreen': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
    ],
  ),
  'clutter_stage_show_cursor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
    ],
  ),
  'clutter_stage_hide_cursor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
    ],
  ),
  'clutter_stage_set_title': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
    ],
  ),
  'clutter_stage_get_title': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
    ],
  ),
  'clutter_stage_set_user_resizable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
      Param(
        type = 'gboolean',
        name = 'resizable',
      ),
    ],
  ),
  'clutter_stage_get_user_resizable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
    ],
  ),
  'clutter_stage_set_minimum_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
      Param(
        type = 'guint',
        name = 'width',
      ),
      Param(
        type = 'guint',
        name = 'height',
      ),
    ],
  ),
  'clutter_stage_get_minimum_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
      Param(
        type = 'guint *',
        name = 'width',
      ),
      Param(
        type = 'guint *',
        name = 'height',
      ),
    ],
  ),
  'clutter_stage_set_no_clear_hint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
      Param(
        type = 'gboolean',
        name = 'no_clear',
      ),
    ],
  ),
  'clutter_stage_get_no_clear_hint': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
    ],
  ),
  'clutter_stage_set_use_alpha': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
      Param(
        type = 'gboolean',
        name = 'use_alpha',
      ),
    ],
  ),
  'clutter_stage_get_use_alpha': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
    ],
  ),
  'clutter_stage_set_key_focus': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_stage_get_key_focus': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
    ],
  ),
  'clutter_stage_set_throttle_motion_events': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
      Param(
        type = 'gboolean',
        name = 'throttle',
      ),
    ],
  ),
  'clutter_stage_get_throttle_motion_events': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
    ],
  ),
  'clutter_stage_set_motion_events_enabled': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
      Param(
        type = 'gboolean',
        name = 'enabled',
      ),
    ],
  ),
  'clutter_stage_get_motion_events_enabled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
    ],
  ),
  'clutter_stage_set_accept_focus': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
      Param(
        type = 'gboolean',
        name = 'accept_focus',
      ),
    ],
  ),
  'clutter_stage_get_accept_focus': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
    ],
  ),
  'clutter_stage_event': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
      Param(
        type = 'ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_stage_get_actor_at_pos': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
      Param(
        type = 'ClutterPickMode',
        name = 'pick_mode',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'clutter_stage_read_pixels': Spec(
    return_type = 'guchar *',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'clutter_stage_get_redraw_clip_bounds': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
      Param(
        type = 'cairo_rectangle_int_t *',
        name = 'clip',
      ),
    ],
  ),
  'clutter_stage_ensure_current': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
    ],
  ),
  'clutter_stage_ensure_viewport': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
    ],
  ),
  'clutter_stage_ensure_redraw': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
    ],
  ),
  'clutter_device_manager_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_device_manager_get_default': Spec(
    return_type = 'ClutterDeviceManager *',
    parameters = [
    ],
  ),
  'clutter_device_manager_list_devices': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'ClutterDeviceManager *',
        name = 'device_manager',
      ),
    ],
  ),
  'clutter_device_manager_peek_devices': Spec(
    return_type = 'const GSList *',
    parameters = [
      Param(
        type = 'ClutterDeviceManager *',
        name = 'device_manager',
      ),
    ],
  ),
  'clutter_device_manager_get_device': Spec(
    return_type = 'ClutterInputDevice *',
    parameters = [
      Param(
        type = 'ClutterDeviceManager *',
        name = 'device_manager',
      ),
      Param(
        type = 'gint',
        name = 'device_id',
      ),
    ],
  ),
  'clutter_device_manager_get_core_device': Spec(
    return_type = 'ClutterInputDevice *',
    parameters = [
      Param(
        type = 'ClutterDeviceManager *',
        name = 'device_manager',
      ),
      Param(
        type = 'ClutterInputDeviceType',
        name = 'device_type',
      ),
    ],
  ),
  'clutter_drag_action_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_drag_action_new': Spec(
    return_type = 'ClutterAction *',
    parameters = [
    ],
  ),
  'clutter_drag_action_set_drag_threshold': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterDragAction *',
        name = 'action',
      ),
      Param(
        type = 'gint',
        name = 'x_threshold',
      ),
      Param(
        type = 'gint',
        name = 'y_threshold',
      ),
    ],
  ),
  'clutter_drag_action_get_drag_threshold': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterDragAction *',
        name = 'action',
      ),
      Param(
        type = 'guint *',
        name = 'x_threshold',
      ),
      Param(
        type = 'guint *',
        name = 'y_threshold',
      ),
    ],
  ),
  'clutter_drag_action_set_drag_handle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterDragAction *',
        name = 'action',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'handle',
      ),
    ],
  ),
  'clutter_drag_action_get_drag_handle': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterDragAction *',
        name = 'action',
      ),
    ],
  ),
  'clutter_drag_action_set_drag_axis': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterDragAction *',
        name = 'action',
      ),
      Param(
        type = 'ClutterDragAxis',
        name = 'axis',
      ),
    ],
  ),
  'clutter_drag_action_get_drag_axis': Spec(
    return_type = 'ClutterDragAxis',
    parameters = [
      Param(
        type = 'ClutterDragAction *',
        name = 'action',
      ),
    ],
  ),
  'clutter_drag_action_get_press_coords': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterDragAction *',
        name = 'action',
      ),
      Param(
        type = 'gfloat *',
        name = 'press_x',
      ),
      Param(
        type = 'gfloat *',
        name = 'press_y',
      ),
    ],
  ),
  'clutter_drag_action_get_motion_coords': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterDragAction *',
        name = 'action',
      ),
      Param(
        type = 'gfloat *',
        name = 'motion_x',
      ),
      Param(
        type = 'gfloat *',
        name = 'motion_y',
      ),
    ],
  ),
  'clutter_drag_action_get_drag_area': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterDragAction *',
        name = 'action',
      ),
      Param(
        type = 'ClutterRect *',
        name = 'drag_area',
      ),
    ],
  ),
  'clutter_drag_action_set_drag_area': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterDragAction *',
        name = 'action',
      ),
      Param(
        type = 'const ClutterRect *',
        name = 'drag_area',
      ),
    ],
  ),
  'clutter_drop_action_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_drop_action_new': Spec(
    return_type = 'ClutterAction *',
    parameters = [
    ],
  ),
  'clutter_feature_available': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterFeatureFlags',
        name = 'feature',
      ),
    ],
  ),
  'clutter_feature_get_all': Spec(
    return_type = 'ClutterFeatureFlags',
    parameters = [
    ],
  ),
  'clutter_fixed_layout_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_fixed_layout_new': Spec(
    return_type = 'ClutterLayoutManager *',
    parameters = [
    ],
  ),
  'clutter_flow_layout_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_flow_layout_new': Spec(
    return_type = 'ClutterLayoutManager *',
    parameters = [
      Param(
        type = 'ClutterFlowOrientation',
        name = 'orientation',
      ),
    ],
  ),
  'clutter_flow_layout_set_orientation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterFlowLayout *',
        name = 'layout',
      ),
      Param(
        type = 'ClutterFlowOrientation',
        name = 'orientation',
      ),
    ],
  ),
  'clutter_flow_layout_get_orientation': Spec(
    return_type = 'ClutterFlowOrientation',
    parameters = [
      Param(
        type = 'ClutterFlowLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_flow_layout_set_homogeneous': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterFlowLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gboolean',
        name = 'homogeneous',
      ),
    ],
  ),
  'clutter_flow_layout_get_homogeneous': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterFlowLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_flow_layout_set_column_spacing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterFlowLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gfloat',
        name = 'spacing',
      ),
    ],
  ),
  'clutter_flow_layout_get_column_spacing': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'ClutterFlowLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_flow_layout_set_row_spacing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterFlowLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gfloat',
        name = 'spacing',
      ),
    ],
  ),
  'clutter_flow_layout_get_row_spacing': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'ClutterFlowLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_flow_layout_set_column_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterFlowLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gfloat',
        name = 'min_width',
      ),
      Param(
        type = 'gfloat',
        name = 'max_width',
      ),
    ],
  ),
  'clutter_flow_layout_get_column_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterFlowLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gfloat *',
        name = 'min_width',
      ),
      Param(
        type = 'gfloat *',
        name = 'max_width',
      ),
    ],
  ),
  'clutter_flow_layout_set_row_height': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterFlowLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gfloat',
        name = 'min_height',
      ),
      Param(
        type = 'gfloat',
        name = 'max_height',
      ),
    ],
  ),
  'clutter_flow_layout_get_row_height': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterFlowLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gfloat *',
        name = 'min_height',
      ),
      Param(
        type = 'gfloat *',
        name = 'max_height',
      ),
    ],
  ),
  'clutter_gesture_action_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_gesture_action_new': Spec(
    return_type = 'ClutterAction *',
    parameters = [
    ],
  ),
  'clutter_gesture_action_get_n_touch_points': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'ClutterGestureAction *',
        name = 'action',
      ),
    ],
  ),
  'clutter_gesture_action_set_n_touch_points': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterGestureAction *',
        name = 'action',
      ),
      Param(
        type = 'gint',
        name = 'nb_points',
      ),
    ],
  ),
  'clutter_gesture_action_get_press_coords': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterGestureAction *',
        name = 'action',
      ),
      Param(
        type = 'guint',
        name = 'device',
      ),
      Param(
        type = 'gfloat *',
        name = 'press_x',
      ),
      Param(
        type = 'gfloat *',
        name = 'press_y',
      ),
    ],
  ),
  'clutter_gesture_action_get_motion_coords': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterGestureAction *',
        name = 'action',
      ),
      Param(
        type = 'guint',
        name = 'device',
      ),
      Param(
        type = 'gfloat *',
        name = 'motion_x',
      ),
      Param(
        type = 'gfloat *',
        name = 'motion_y',
      ),
    ],
  ),
  'clutter_gesture_action_get_motion_delta': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'ClutterGestureAction *',
        name = 'action',
      ),
      Param(
        type = 'guint',
        name = 'device',
      ),
      Param(
        type = 'gfloat *',
        name = 'delta_x',
      ),
      Param(
        type = 'gfloat *',
        name = 'delta_y',
      ),
    ],
  ),
  'clutter_gesture_action_get_release_coords': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterGestureAction *',
        name = 'action',
      ),
      Param(
        type = 'guint',
        name = 'device',
      ),
      Param(
        type = 'gfloat *',
        name = 'release_x',
      ),
      Param(
        type = 'gfloat *',
        name = 'release_y',
      ),
    ],
  ),
  'clutter_gesture_action_get_velocity': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'ClutterGestureAction *',
        name = 'action',
      ),
      Param(
        type = 'guint',
        name = 'device',
      ),
      Param(
        type = 'gfloat *',
        name = 'velocity_x',
      ),
      Param(
        type = 'gfloat *',
        name = 'velocity_y',
      ),
    ],
  ),
  'clutter_gesture_action_get_n_current_points': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterGestureAction *',
        name = 'action',
      ),
    ],
  ),
  'clutter_gesture_action_get_sequence': Spec(
    return_type = 'ClutterEventSequence *',
    parameters = [
      Param(
        type = 'ClutterGestureAction *',
        name = 'action',
      ),
      Param(
        type = 'guint',
        name = 'point',
      ),
    ],
  ),
  'clutter_gesture_action_get_device': Spec(
    return_type = 'ClutterInputDevice *',
    parameters = [
      Param(
        type = 'ClutterGestureAction *',
        name = 'action',
      ),
      Param(
        type = 'guint',
        name = 'point',
      ),
    ],
  ),
  'clutter_gesture_action_cancel': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterGestureAction *',
        name = 'action',
      ),
    ],
  ),
  'clutter_grid_layout_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_grid_layout_new': Spec(
    return_type = 'ClutterLayoutManager *',
    parameters = [
    ],
  ),
  'clutter_grid_layout_attach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterGridLayout *',
        name = 'layout',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'child',
      ),
      Param(
        type = 'gint',
        name = 'left',
      ),
      Param(
        type = 'gint',
        name = 'top',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'clutter_grid_layout_attach_next_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterGridLayout *',
        name = 'layout',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'child',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'sibling',
      ),
      Param(
        type = 'ClutterGridPosition',
        name = 'side',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'clutter_grid_layout_get_child_at': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterGridLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gint',
        name = 'left',
      ),
      Param(
        type = 'gint',
        name = 'top',
      ),
    ],
  ),
  'clutter_grid_layout_insert_row': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterGridLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'clutter_grid_layout_insert_column': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterGridLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'clutter_grid_layout_insert_next_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterGridLayout *',
        name = 'layout',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'sibling',
      ),
      Param(
        type = 'ClutterGridPosition',
        name = 'side',
      ),
    ],
  ),
  'clutter_grid_layout_set_orientation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterGridLayout *',
        name = 'layout',
      ),
      Param(
        type = 'ClutterOrientation',
        name = 'orientation',
      ),
    ],
  ),
  'clutter_grid_layout_get_orientation': Spec(
    return_type = 'ClutterOrientation',
    parameters = [
      Param(
        type = 'ClutterGridLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_grid_layout_set_column_spacing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterGridLayout *',
        name = 'layout',
      ),
      Param(
        type = 'guint',
        name = 'spacing',
      ),
    ],
  ),
  'clutter_grid_layout_get_column_spacing': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterGridLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_grid_layout_set_row_spacing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterGridLayout *',
        name = 'layout',
      ),
      Param(
        type = 'guint',
        name = 'spacing',
      ),
    ],
  ),
  'clutter_grid_layout_get_row_spacing': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterGridLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_grid_layout_set_column_homogeneous': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterGridLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gboolean',
        name = 'homogeneous',
      ),
    ],
  ),
  'clutter_grid_layout_get_column_homogeneous': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterGridLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_grid_layout_set_row_homogeneous': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterGridLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gboolean',
        name = 'homogeneous',
      ),
    ],
  ),
  'clutter_grid_layout_get_row_homogeneous': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterGridLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_image_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'clutter_image_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_image_new': Spec(
    return_type = 'ClutterContent *',
    parameters = [
    ],
  ),
  'clutter_image_set_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterImage *',
        name = 'image',
      ),
      Param(
        type = 'const guint8 *',
        name = 'data',
      ),
      Param(
        type = 'CoglPixelFormat',
        name = 'pixel_format',
      ),
      Param(
        type = 'guint',
        name = 'width',
      ),
      Param(
        type = 'guint',
        name = 'height',
      ),
      Param(
        type = 'guint',
        name = 'row_stride',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'clutter_image_set_area': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterImage *',
        name = 'image',
      ),
      Param(
        type = 'const guint8 *',
        name = 'data',
      ),
      Param(
        type = 'CoglPixelFormat',
        name = 'pixel_format',
      ),
      Param(
        type = 'const cairo_rectangle_int_t *',
        name = 'rect',
      ),
      Param(
        type = 'guint',
        name = 'row_stride',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'clutter_image_set_bytes': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterImage *',
        name = 'image',
      ),
      Param(
        type = 'GBytes *',
        name = 'data',
      ),
      Param(
        type = 'CoglPixelFormat',
        name = 'pixel_format',
      ),
      Param(
        type = 'guint',
        name = 'width',
      ),
      Param(
        type = 'guint',
        name = 'height',
      ),
      Param(
        type = 'guint',
        name = 'row_stride',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'clutter_interval_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_interval_new': Spec(
    return_type = 'ClutterInterval *',
    parameters = [
      Param(
        type = 'GType',
        name = 'gtype',
      ),
    ],
  ),
  'clutter_interval_new_with_values': Spec(
    return_type = 'ClutterInterval *',
    parameters = [
      Param(
        type = 'GType',
        name = 'gtype',
      ),
      Param(
        type = 'const GValue *',
        name = 'initial',
      ),
      Param(
        type = 'const GValue *',
        name = 'final',
      ),
    ],
  ),
  'clutter_interval_clone': Spec(
    return_type = 'ClutterInterval *',
    parameters = [
      Param(
        type = 'ClutterInterval *',
        name = 'interval',
      ),
    ],
  ),
  'clutter_interval_get_value_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'ClutterInterval *',
        name = 'interval',
      ),
    ],
  ),
  'clutter_interval_set_initial': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterInterval *',
        name = 'interval',
      ),
    ],
  ),
  'clutter_interval_set_initial_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterInterval *',
        name = 'interval',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_interval_get_initial_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterInterval *',
        name = 'interval',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_interval_peek_initial_value': Spec(
    return_type = 'GValue *',
    parameters = [
      Param(
        type = 'ClutterInterval *',
        name = 'interval',
      ),
    ],
  ),
  'clutter_interval_set_final': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterInterval *',
        name = 'interval',
      ),
    ],
  ),
  'clutter_interval_set_final_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterInterval *',
        name = 'interval',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_interval_get_final_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterInterval *',
        name = 'interval',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_interval_peek_final_value': Spec(
    return_type = 'GValue *',
    parameters = [
      Param(
        type = 'ClutterInterval *',
        name = 'interval',
      ),
    ],
  ),
  'clutter_interval_set_interval': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterInterval *',
        name = 'interval',
      ),
    ],
  ),
  'clutter_interval_get_interval': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterInterval *',
        name = 'interval',
      ),
    ],
  ),
  'clutter_interval_validate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterInterval *',
        name = 'interval',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'clutter_interval_compute_value': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterInterval *',
        name = 'interval',
      ),
      Param(
        type = 'gdouble',
        name = 'factor',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_interval_compute': Spec(
    return_type = 'const GValue *',
    parameters = [
      Param(
        type = 'ClutterInterval *',
        name = 'interval',
      ),
      Param(
        type = 'gdouble',
        name = 'factor',
      ),
    ],
  ),
  'clutter_interval_is_valid': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterInterval *',
        name = 'interval',
      ),
    ],
  ),
  'clutter_timeline_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_timeline_new': Spec(
    return_type = 'ClutterTimeline *',
    parameters = [
      Param(
        type = 'guint',
        name = 'msecs',
      ),
    ],
  ),
  'clutter_timeline_get_duration': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
    ],
  ),
  'clutter_timeline_set_duration': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
      Param(
        type = 'guint',
        name = 'msecs',
      ),
    ],
  ),
  'clutter_timeline_get_direction': Spec(
    return_type = 'ClutterTimelineDirection',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
    ],
  ),
  'clutter_timeline_set_direction': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
      Param(
        type = 'ClutterTimelineDirection',
        name = 'direction',
      ),
    ],
  ),
  'clutter_timeline_start': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
    ],
  ),
  'clutter_timeline_pause': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
    ],
  ),
  'clutter_timeline_stop': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
    ],
  ),
  'clutter_timeline_set_auto_reverse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
      Param(
        type = 'gboolean',
        name = 'reverse',
      ),
    ],
  ),
  'clutter_timeline_get_auto_reverse': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
    ],
  ),
  'clutter_timeline_set_repeat_count': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
      Param(
        type = 'gint',
        name = 'count',
      ),
    ],
  ),
  'clutter_timeline_get_repeat_count': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
    ],
  ),
  'clutter_timeline_rewind': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
    ],
  ),
  'clutter_timeline_skip': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
      Param(
        type = 'guint',
        name = 'msecs',
      ),
    ],
  ),
  'clutter_timeline_advance': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
      Param(
        type = 'guint',
        name = 'msecs',
      ),
    ],
  ),
  'clutter_timeline_get_elapsed_time': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
    ],
  ),
  'clutter_timeline_get_progress': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
    ],
  ),
  'clutter_timeline_is_playing': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
    ],
  ),
  'clutter_timeline_set_delay': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
      Param(
        type = 'guint',
        name = 'msecs',
      ),
    ],
  ),
  'clutter_timeline_get_delay': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
    ],
  ),
  'clutter_timeline_get_delta': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
    ],
  ),
  'clutter_timeline_add_marker_at_time': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
      Param(
        type = 'const gchar *',
        name = 'marker_name',
      ),
      Param(
        type = 'guint',
        name = 'msecs',
      ),
    ],
  ),
  'clutter_timeline_remove_marker': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
      Param(
        type = 'const gchar *',
        name = 'marker_name',
      ),
    ],
  ),
  'clutter_timeline_list_markers': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
      Param(
        type = 'gint',
        name = 'msecs',
      ),
      Param(
        type = 'gsize *',
        name = 'n_markers',
      ),
    ],
  ),
  'clutter_timeline_has_marker': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
      Param(
        type = 'const gchar *',
        name = 'marker_name',
      ),
    ],
  ),
  'clutter_timeline_advance_to_marker': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
      Param(
        type = 'const gchar *',
        name = 'marker_name',
      ),
    ],
  ),
  'clutter_timeline_set_progress_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
      Param(
        type = 'ClutterTimelineProgressFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'clutter_timeline_set_progress_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
      Param(
        type = 'ClutterAnimationMode',
        name = 'mode',
      ),
    ],
  ),
  'clutter_timeline_get_progress_mode': Spec(
    return_type = 'ClutterAnimationMode',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
    ],
  ),
  'clutter_timeline_set_step_progress': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
      Param(
        type = 'gint',
        name = 'n_steps',
      ),
      Param(
        type = 'ClutterStepMode',
        name = 'step_mode',
      ),
    ],
  ),
  'clutter_timeline_get_step_progress': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
      Param(
        type = 'gint *',
        name = 'n_steps',
      ),
      Param(
        type = 'ClutterStepMode *',
        name = 'step_mode',
      ),
    ],
  ),
  'clutter_timeline_set_cubic_bezier_progress': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
      Param(
        type = 'const ClutterPoint *',
        name = 'c_1',
      ),
      Param(
        type = 'const ClutterPoint *',
        name = 'c_2',
      ),
    ],
  ),
  'clutter_timeline_get_cubic_bezier_progress': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
      Param(
        type = 'ClutterPoint *',
        name = 'c_1',
      ),
      Param(
        type = 'ClutterPoint *',
        name = 'c_2',
      ),
    ],
  ),
  'clutter_timeline_get_duration_hint': Spec(
    return_type = 'gint64',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
    ],
  ),
  'clutter_timeline_get_current_repeat': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
    ],
  ),
  'clutter_transition_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_transition_set_interval': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTransition *',
        name = 'transition',
      ),
      Param(
        type = 'ClutterInterval *',
        name = 'interval',
      ),
    ],
  ),
  'clutter_transition_get_interval': Spec(
    return_type = 'ClutterInterval *',
    parameters = [
      Param(
        type = 'ClutterTransition *',
        name = 'transition',
      ),
    ],
  ),
  'clutter_transition_set_from_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTransition *',
        name = 'transition',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_transition_set_to_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTransition *',
        name = 'transition',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_transition_set_from': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTransition *',
        name = 'transition',
      ),
      Param(
        type = 'GType',
        name = 'value_type',
      ),
    ],
  ),
  'clutter_transition_set_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTransition *',
        name = 'transition',
      ),
      Param(
        type = 'GType',
        name = 'value_type',
      ),
    ],
  ),
  'clutter_transition_set_animatable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTransition *',
        name = 'transition',
      ),
      Param(
        type = 'ClutterAnimatable *',
        name = 'animatable',
      ),
    ],
  ),
  'clutter_transition_get_animatable': Spec(
    return_type = 'ClutterAnimatable *',
    parameters = [
      Param(
        type = 'ClutterTransition *',
        name = 'transition',
      ),
    ],
  ),
  'clutter_transition_set_remove_on_complete': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTransition *',
        name = 'transition',
      ),
      Param(
        type = 'gboolean',
        name = 'remove_complete',
      ),
    ],
  ),
  'clutter_transition_get_remove_on_complete': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterTransition *',
        name = 'transition',
      ),
    ],
  ),
  'clutter_property_transition_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_property_transition_new': Spec(
    return_type = 'ClutterTransition *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'property_name',
      ),
    ],
  ),
  'clutter_property_transition_set_property_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPropertyTransition *',
        name = 'transition',
      ),
      Param(
        type = 'const char *',
        name = 'property_name',
      ),
    ],
  ),
  'clutter_property_transition_get_property_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'ClutterPropertyTransition *',
        name = 'transition',
      ),
    ],
  ),
  'clutter_keyframe_transition_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_keyframe_transition_new': Spec(
    return_type = 'ClutterTransition *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'property_name',
      ),
    ],
  ),
  'clutter_keyframe_transition_set_key_frames': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterKeyframeTransition *',
        name = 'transition',
      ),
      Param(
        type = 'guint',
        name = 'n_key_frames',
      ),
      Param(
        type = 'const double *',
        name = 'key_frames',
      ),
    ],
  ),
  'clutter_keyframe_transition_set_values': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterKeyframeTransition *',
        name = 'transition',
      ),
      Param(
        type = 'guint',
        name = 'n_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'values',
      ),
    ],
  ),
  'clutter_keyframe_transition_set_modes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterKeyframeTransition *',
        name = 'transition',
      ),
      Param(
        type = 'guint',
        name = 'n_modes',
      ),
      Param(
        type = 'const ClutterAnimationMode *',
        name = 'modes',
      ),
    ],
  ),
  'clutter_keyframe_transition_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterKeyframeTransition *',
        name = 'transition',
      ),
      Param(
        type = 'GType',
        name = 'gtype',
      ),
      Param(
        type = 'guint',
        name = 'n_key_frames',
      ),
    ],
  ),
  'clutter_keyframe_transition_set_key_frame': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterKeyframeTransition *',
        name = 'transition',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
      Param(
        type = 'double',
        name = 'key',
      ),
      Param(
        type = 'ClutterAnimationMode',
        name = 'mode',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_keyframe_transition_get_key_frame': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterKeyframeTransition *',
        name = 'transition',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
      Param(
        type = 'double *',
        name = 'key',
      ),
      Param(
        type = 'ClutterAnimationMode *',
        name = 'mode',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_keyframe_transition_get_n_key_frames': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterKeyframeTransition *',
        name = 'transition',
      ),
    ],
  ),
  'clutter_keyframe_transition_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterKeyframeTransition *',
        name = 'transition',
      ),
    ],
  ),
  'clutter_layout_meta_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_layout_meta_get_manager': Spec(
    return_type = 'ClutterLayoutManager *',
    parameters = [
      Param(
        type = 'ClutterLayoutMeta *',
        name = 'data',
      ),
    ],
  ),
  'clutter_model_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_model_set_types': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
      Param(
        type = 'guint',
        name = 'n_columns',
      ),
      Param(
        type = 'GType *',
        name = 'types',
      ),
    ],
  ),
  'clutter_model_set_names': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
      Param(
        type = 'guint',
        name = 'n_columns',
      ),
      Param(
        type = 'const gchar *const []',
        name = 'names',
      ),
    ],
  ),
  'clutter_model_append': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
    ],
  ),
  'clutter_model_appendv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
      Param(
        type = 'guint',
        name = 'n_columns',
      ),
      Param(
        type = 'guint *',
        name = 'columns',
      ),
      Param(
        type = 'GValue *',
        name = 'values',
      ),
    ],
  ),
  'clutter_model_prepend': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
    ],
  ),
  'clutter_model_prependv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
      Param(
        type = 'guint',
        name = 'n_columns',
      ),
      Param(
        type = 'guint *',
        name = 'columns',
      ),
      Param(
        type = 'GValue *',
        name = 'values',
      ),
    ],
  ),
  'clutter_model_insert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
      Param(
        type = 'guint',
        name = 'row',
      ),
    ],
  ),
  'clutter_model_insertv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
      Param(
        type = 'guint',
        name = 'row',
      ),
      Param(
        type = 'guint',
        name = 'n_columns',
      ),
      Param(
        type = 'guint *',
        name = 'columns',
      ),
      Param(
        type = 'GValue *',
        name = 'values',
      ),
    ],
  ),
  'clutter_model_insert_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
      Param(
        type = 'guint',
        name = 'row',
      ),
      Param(
        type = 'guint',
        name = 'column',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_model_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
      Param(
        type = 'guint',
        name = 'row',
      ),
    ],
  ),
  'clutter_model_get_n_rows': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
    ],
  ),
  'clutter_model_get_n_columns': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
    ],
  ),
  'clutter_model_get_column_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
      Param(
        type = 'guint',
        name = 'column',
      ),
    ],
  ),
  'clutter_model_get_column_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
      Param(
        type = 'guint',
        name = 'column',
      ),
    ],
  ),
  'clutter_model_get_first_iter': Spec(
    return_type = 'ClutterModelIter *',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
    ],
  ),
  'clutter_model_get_last_iter': Spec(
    return_type = 'ClutterModelIter *',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
    ],
  ),
  'clutter_model_get_iter_at_row': Spec(
    return_type = 'ClutterModelIter *',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
      Param(
        type = 'guint',
        name = 'row',
      ),
    ],
  ),
  'clutter_model_set_sorting_column': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'clutter_model_get_sorting_column': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
    ],
  ),
  'clutter_model_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
      Param(
        type = 'ClutterModelForeachFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'clutter_model_set_sort': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
      Param(
        type = 'ClutterModelSortFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'clutter_model_set_filter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
      Param(
        type = 'ClutterModelFilterFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'clutter_model_get_filter_set': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
    ],
  ),
  'clutter_model_resort': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
    ],
  ),
  'clutter_model_filter_row': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
      Param(
        type = 'guint',
        name = 'row',
      ),
    ],
  ),
  'clutter_model_filter_iter': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterModel *',
        name = 'model',
      ),
      Param(
        type = 'ClutterModelIter *',
        name = 'iter',
      ),
    ],
  ),
  'clutter_model_iter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_model_iter_get': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterModelIter *',
        name = 'iter',
      ),
    ],
  ),
  'clutter_model_iter_get_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterModelIter *',
        name = 'iter',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'clutter_model_iter_get_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterModelIter *',
        name = 'iter',
      ),
      Param(
        type = 'guint',
        name = 'column',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_model_iter_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterModelIter *',
        name = 'iter',
      ),
    ],
  ),
  'clutter_model_iter_set_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterModelIter *',
        name = 'iter',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'clutter_model_iter_set_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterModelIter *',
        name = 'iter',
      ),
      Param(
        type = 'guint',
        name = 'column',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_model_iter_is_first': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterModelIter *',
        name = 'iter',
      ),
    ],
  ),
  'clutter_model_iter_is_last': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterModelIter *',
        name = 'iter',
      ),
    ],
  ),
  'clutter_model_iter_next': Spec(
    return_type = 'ClutterModelIter *',
    parameters = [
      Param(
        type = 'ClutterModelIter *',
        name = 'iter',
      ),
    ],
  ),
  'clutter_model_iter_prev': Spec(
    return_type = 'ClutterModelIter *',
    parameters = [
      Param(
        type = 'ClutterModelIter *',
        name = 'iter',
      ),
    ],
  ),
  'clutter_model_iter_get_model': Spec(
    return_type = 'ClutterModel *',
    parameters = [
      Param(
        type = 'ClutterModelIter *',
        name = 'iter',
      ),
    ],
  ),
  'clutter_model_iter_get_row': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterModelIter *',
        name = 'iter',
      ),
    ],
  ),
  'clutter_model_iter_copy': Spec(
    return_type = 'ClutterModelIter *',
    parameters = [
      Param(
        type = 'ClutterModelIter *',
        name = 'iter',
      ),
    ],
  ),
  'clutter_list_model_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_list_model_new': Spec(
    return_type = 'ClutterModel *',
    parameters = [
      Param(
        type = 'guint',
        name = 'n_columns',
      ),
    ],
  ),
  'clutter_list_model_newv': Spec(
    return_type = 'ClutterModel *',
    parameters = [
      Param(
        type = 'guint',
        name = 'n_columns',
      ),
      Param(
        type = 'GType *',
        name = 'types',
      ),
      Param(
        type = 'const gchar *const []',
        name = 'names',
      ),
    ],
  ),
  'clutter_init_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'clutter_base_init': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'clutter_init': Spec(
    return_type = 'ClutterInitError',
    parameters = [
      Param(
        type = 'int *',
        name = 'argc',
      ),
      Param(
        type = 'char ***',
        name = 'argv',
      ),
    ],
  ),
  'clutter_init_with_args': Spec(
    return_type = 'ClutterInitError',
    parameters = [
      Param(
        type = 'int *',
        name = 'argc',
      ),
      Param(
        type = 'char ***',
        name = 'argv',
      ),
      Param(
        type = 'const char *',
        name = 'parameter_string',
      ),
      Param(
        type = 'GOptionEntry *',
        name = 'entries',
      ),
      Param(
        type = 'const char *',
        name = 'translation_domain',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'clutter_get_option_group': Spec(
    return_type = 'GOptionGroup *',
    parameters = [
    ],
  ),
  'clutter_get_option_group_without_init': Spec(
    return_type = 'GOptionGroup *',
    parameters = [
    ],
  ),
  'clutter_main': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'clutter_main_quit': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'clutter_main_level': Spec(
    return_type = 'gint',
    parameters = [
    ],
  ),
  'clutter_do_event': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterEvent *',
        name = 'event',
      ),
    ],
  ),
  'clutter_get_accessibility_enabled': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'clutter_threads_set_lock_functions': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCallback',
        name = 'enter_fn',
      ),
      Param(
        type = 'GCallback',
        name = 'leave_fn',
      ),
    ],
  ),
  'clutter_threads_add_idle': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSourceFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'clutter_threads_add_idle_full': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gint',
        name = 'priority',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'clutter_threads_add_timeout': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'guint',
        name = 'interval',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'clutter_threads_add_timeout_full': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gint',
        name = 'priority',
      ),
      Param(
        type = 'guint',
        name = 'interval',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'clutter_threads_add_repaint_func': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSourceFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'clutter_threads_add_repaint_func_full': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterRepaintFlags',
        name = 'flags',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'clutter_threads_remove_repaint_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'handle_id',
      ),
    ],
  ),
  'clutter_grab_pointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_ungrab_pointer': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'clutter_get_pointer_grab': Spec(
    return_type = 'ClutterActor *',
    parameters = [
    ],
  ),
  'clutter_grab_keyboard': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_ungrab_keyboard': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'clutter_get_keyboard_grab': Spec(
    return_type = 'ClutterActor *',
    parameters = [
    ],
  ),
  'clutter_get_font_map': Spec(
    return_type = 'PangoFontMap *',
    parameters = [
    ],
  ),
  'clutter_get_default_text_direction': Spec(
    return_type = 'ClutterTextDirection',
    parameters = [
    ],
  ),
  'clutter_get_default_frame_rate': Spec(
    return_type = 'guint',
    parameters = [
    ],
  ),
  'clutter_page_turn_effect_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_page_turn_effect_new': Spec(
    return_type = 'ClutterEffect *',
    parameters = [
      Param(
        type = 'gdouble',
        name = 'period',
      ),
      Param(
        type = 'gdouble',
        name = 'angle',
      ),
      Param(
        type = 'gfloat',
        name = 'radius',
      ),
    ],
  ),
  'clutter_page_turn_effect_set_period': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPageTurnEffect *',
        name = 'effect',
      ),
      Param(
        type = 'gdouble',
        name = 'period',
      ),
    ],
  ),
  'clutter_page_turn_effect_get_period': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'ClutterPageTurnEffect *',
        name = 'effect',
      ),
    ],
  ),
  'clutter_page_turn_effect_set_angle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPageTurnEffect *',
        name = 'effect',
      ),
      Param(
        type = 'gdouble',
        name = 'angle',
      ),
    ],
  ),
  'clutter_page_turn_effect_get_angle': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'ClutterPageTurnEffect *',
        name = 'effect',
      ),
    ],
  ),
  'clutter_page_turn_effect_set_radius': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPageTurnEffect *',
        name = 'effect',
      ),
      Param(
        type = 'gfloat',
        name = 'radius',
      ),
    ],
  ),
  'clutter_page_turn_effect_get_radius': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'ClutterPageTurnEffect *',
        name = 'effect',
      ),
    ],
  ),
  'clutter_color_node_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_color_node_new': Spec(
    return_type = 'ClutterPaintNode *',
    parameters = [
      Param(
        type = 'const ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_texture_node_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_texture_node_new': Spec(
    return_type = 'ClutterPaintNode *',
    parameters = [
      Param(
        type = 'CoglTexture *',
        name = 'texture',
      ),
      Param(
        type = 'const ClutterColor *',
        name = 'color',
      ),
      Param(
        type = 'ClutterScalingFilter',
        name = 'min_filter',
      ),
      Param(
        type = 'ClutterScalingFilter',
        name = 'mag_filter',
      ),
    ],
  ),
  'clutter_clip_node_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_clip_node_new': Spec(
    return_type = 'ClutterPaintNode *',
    parameters = [
    ],
  ),
  'clutter_pipeline_node_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_text_node_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_text_node_new': Spec(
    return_type = 'ClutterPaintNode *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'const ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_paint_node_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_paint_node_ref': Spec(
    return_type = 'ClutterPaintNode *',
    parameters = [
      Param(
        type = 'ClutterPaintNode *',
        name = 'node',
      ),
    ],
  ),
  'clutter_paint_node_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPaintNode *',
        name = 'node',
      ),
    ],
  ),
  'clutter_paint_node_set_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPaintNode *',
        name = 'node',
      ),
      Param(
        type = 'const char *',
        name = 'name',
      ),
    ],
  ),
  'clutter_paint_node_add_child': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPaintNode *',
        name = 'node',
      ),
      Param(
        type = 'ClutterPaintNode *',
        name = 'child',
      ),
    ],
  ),
  'clutter_paint_node_add_rectangle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPaintNode *',
        name = 'node',
      ),
      Param(
        type = 'const ClutterActorBox *',
        name = 'rect',
      ),
    ],
  ),
  'clutter_paint_node_add_texture_rectangle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPaintNode *',
        name = 'node',
      ),
      Param(
        type = 'const ClutterActorBox *',
        name = 'rect',
      ),
      Param(
        type = 'float',
        name = 'x_1',
      ),
      Param(
        type = 'float',
        name = 'y_1',
      ),
      Param(
        type = 'float',
        name = 'x_2',
      ),
      Param(
        type = 'float',
        name = 'y_2',
      ),
    ],
  ),
  'clutter_value_set_paint_node': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gpointer',
        name = 'node',
      ),
    ],
  ),
  'clutter_value_take_paint_node': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gpointer',
        name = 'node',
      ),
    ],
  ),
  'clutter_value_get_paint_node': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_value_dup_paint_node': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_pan_action_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_pan_action_new': Spec(
    return_type = 'ClutterAction *',
    parameters = [
    ],
  ),
  'clutter_pan_action_set_pan_axis': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPanAction *',
        name = 'self',
      ),
      Param(
        type = 'ClutterPanAxis',
        name = 'axis',
      ),
    ],
  ),
  'clutter_pan_action_get_pan_axis': Spec(
    return_type = 'ClutterPanAxis',
    parameters = [
      Param(
        type = 'ClutterPanAction *',
        name = 'self',
      ),
    ],
  ),
  'clutter_pan_action_set_interpolate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPanAction *',
        name = 'self',
      ),
      Param(
        type = 'gboolean',
        name = 'should_interpolate',
      ),
    ],
  ),
  'clutter_pan_action_get_interpolate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterPanAction *',
        name = 'self',
      ),
    ],
  ),
  'clutter_pan_action_set_deceleration': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPanAction *',
        name = 'self',
      ),
      Param(
        type = 'gdouble',
        name = 'rate',
      ),
    ],
  ),
  'clutter_pan_action_get_deceleration': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'ClutterPanAction *',
        name = 'self',
      ),
    ],
  ),
  'clutter_pan_action_set_acceleration_factor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPanAction *',
        name = 'self',
      ),
      Param(
        type = 'gdouble',
        name = 'factor',
      ),
    ],
  ),
  'clutter_pan_action_get_acceleration_factor': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'ClutterPanAction *',
        name = 'self',
      ),
    ],
  ),
  'clutter_pan_action_get_interpolated_coords': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPanAction *',
        name = 'self',
      ),
      Param(
        type = 'gfloat *',
        name = 'interpolated_x',
      ),
      Param(
        type = 'gfloat *',
        name = 'interpolated_y',
      ),
    ],
  ),
  'clutter_pan_action_get_interpolated_delta': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPanAction *',
        name = 'self',
      ),
      Param(
        type = 'gfloat *',
        name = 'delta_x',
      ),
      Param(
        type = 'gfloat *',
        name = 'delta_y',
      ),
    ],
  ),
  'clutter_path_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_path_new': Spec(
    return_type = 'ClutterPath *',
    parameters = [
    ],
  ),
  'clutter_path_new_with_description': Spec(
    return_type = 'ClutterPath *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'desc',
      ),
    ],
  ),
  'clutter_path_add_move_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'clutter_path_add_rel_move_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'clutter_path_add_line_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'clutter_path_add_rel_line_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'clutter_path_add_curve_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'x_1',
      ),
      Param(
        type = 'gint',
        name = 'y_1',
      ),
      Param(
        type = 'gint',
        name = 'x_2',
      ),
      Param(
        type = 'gint',
        name = 'y_2',
      ),
      Param(
        type = 'gint',
        name = 'x_3',
      ),
      Param(
        type = 'gint',
        name = 'y_3',
      ),
    ],
  ),
  'clutter_path_add_rel_curve_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'x_1',
      ),
      Param(
        type = 'gint',
        name = 'y_1',
      ),
      Param(
        type = 'gint',
        name = 'x_2',
      ),
      Param(
        type = 'gint',
        name = 'y_2',
      ),
      Param(
        type = 'gint',
        name = 'x_3',
      ),
      Param(
        type = 'gint',
        name = 'y_3',
      ),
    ],
  ),
  'clutter_path_add_close': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
    ],
  ),
  'clutter_path_add_string': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
    ],
  ),
  'clutter_path_add_node': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
      Param(
        type = 'const ClutterPathNode *',
        name = 'node',
      ),
    ],
  ),
  'clutter_path_add_cairo_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
      Param(
        type = 'const cairo_path_t *',
        name = 'cpath',
      ),
    ],
  ),
  'clutter_path_get_n_nodes': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
    ],
  ),
  'clutter_path_get_node': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
      Param(
        type = 'ClutterPathNode *',
        name = 'node',
      ),
    ],
  ),
  'clutter_path_get_nodes': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
    ],
  ),
  'clutter_path_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
      Param(
        type = 'ClutterPathCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'clutter_path_insert_node': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'index_',
      ),
      Param(
        type = 'const ClutterPathNode *',
        name = 'node',
      ),
    ],
  ),
  'clutter_path_remove_node': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'clutter_path_replace_node': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
      Param(
        type = 'const ClutterPathNode *',
        name = 'node',
      ),
    ],
  ),
  'clutter_path_get_description': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
    ],
  ),
  'clutter_path_set_description': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
    ],
  ),
  'clutter_path_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
    ],
  ),
  'clutter_path_to_cairo_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'clutter_path_get_position': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
      Param(
        type = 'gdouble',
        name = 'progress',
      ),
      Param(
        type = 'ClutterKnot *',
        name = 'position',
      ),
    ],
  ),
  'clutter_path_get_length': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
    ],
  ),
  'clutter_path_constraint_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_path_constraint_new': Spec(
    return_type = 'ClutterConstraint *',
    parameters = [
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
      Param(
        type = 'gfloat',
        name = 'offset',
      ),
    ],
  ),
  'clutter_path_constraint_set_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPathConstraint *',
        name = 'constraint',
      ),
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
    ],
  ),
  'clutter_path_constraint_get_path': Spec(
    return_type = 'ClutterPath *',
    parameters = [
      Param(
        type = 'ClutterPathConstraint *',
        name = 'constraint',
      ),
    ],
  ),
  'clutter_path_constraint_set_offset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterPathConstraint *',
        name = 'constraint',
      ),
      Param(
        type = 'gfloat',
        name = 'offset',
      ),
    ],
  ),
  'clutter_path_constraint_get_offset': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'ClutterPathConstraint *',
        name = 'constraint',
      ),
    ],
  ),
  'clutter_rotate_action_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_rotate_action_new': Spec(
    return_type = 'ClutterAction *',
    parameters = [
    ],
  ),
  'json_node_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'json_node_new': Spec(
    return_type = 'JsonNode *',
    parameters = [
      Param(
        type = 'JsonNodeType',
        name = 'type',
      ),
    ],
  ),
  'json_node_copy': Spec(
    return_type = 'JsonNode *',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_node_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_node_get_node_type': Spec(
    return_type = 'JsonNodeType',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_node_get_value_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_node_set_parent': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
      Param(
        type = 'JsonNode *',
        name = 'parent',
      ),
    ],
  ),
  'json_node_get_parent': Spec(
    return_type = 'JsonNode *',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_node_type_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_node_set_object': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
    ],
  ),
  'json_node_take_object': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
    ],
  ),
  'json_node_get_object': Spec(
    return_type = 'JsonObject *',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_node_dup_object': Spec(
    return_type = 'JsonObject *',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_node_set_array': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
    ],
  ),
  'json_node_take_array': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
    ],
  ),
  'json_node_get_array': Spec(
    return_type = 'JsonArray *',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_node_dup_array': Spec(
    return_type = 'JsonArray *',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_node_set_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'json_node_get_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'json_node_set_string': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'json_node_get_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_node_dup_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_node_set_int': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
      Param(
        type = 'gint64',
        name = 'value',
      ),
    ],
  ),
  'json_node_get_int': Spec(
    return_type = 'gint64',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_node_set_double': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
      Param(
        type = 'gdouble',
        name = 'value',
      ),
    ],
  ),
  'json_node_get_double': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_node_set_boolean': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
      Param(
        type = 'gboolean',
        name = 'value',
      ),
    ],
  ),
  'json_node_get_boolean': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_node_is_null': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_object_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'json_object_new': Spec(
    return_type = 'JsonObject *',
    parameters = [
    ],
  ),
  'json_object_ref': Spec(
    return_type = 'JsonObject *',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
    ],
  ),
  'json_object_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
    ],
  ),
  'json_object_add_member': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'member_name',
      ),
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_object_set_member': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'member_name',
      ),
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_object_set_int_member': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'member_name',
      ),
      Param(
        type = 'gint64',
        name = 'value',
      ),
    ],
  ),
  'json_object_set_double_member': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'member_name',
      ),
      Param(
        type = 'gdouble',
        name = 'value',
      ),
    ],
  ),
  'json_object_set_boolean_member': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'member_name',
      ),
      Param(
        type = 'gboolean',
        name = 'value',
      ),
    ],
  ),
  'json_object_set_string_member': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'member_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'json_object_set_null_member': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'member_name',
      ),
    ],
  ),
  'json_object_set_array_member': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'member_name',
      ),
      Param(
        type = 'JsonArray *',
        name = 'value',
      ),
    ],
  ),
  'json_object_set_object_member': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'member_name',
      ),
      Param(
        type = 'JsonObject *',
        name = 'value',
      ),
    ],
  ),
  'json_object_get_members': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
    ],
  ),
  'json_object_get_member': Spec(
    return_type = 'JsonNode *',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'member_name',
      ),
    ],
  ),
  'json_object_dup_member': Spec(
    return_type = 'JsonNode *',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'member_name',
      ),
    ],
  ),
  'json_object_get_int_member': Spec(
    return_type = 'gint64',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'member_name',
      ),
    ],
  ),
  'json_object_get_double_member': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'member_name',
      ),
    ],
  ),
  'json_object_get_boolean_member': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'member_name',
      ),
    ],
  ),
  'json_object_get_string_member': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'member_name',
      ),
    ],
  ),
  'json_object_get_null_member': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'member_name',
      ),
    ],
  ),
  'json_object_get_array_member': Spec(
    return_type = 'JsonArray *',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'member_name',
      ),
    ],
  ),
  'json_object_get_object_member': Spec(
    return_type = 'JsonObject *',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'member_name',
      ),
    ],
  ),
  'json_object_has_member': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'member_name',
      ),
    ],
  ),
  'json_object_remove_member': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'member_name',
      ),
    ],
  ),
  'json_object_get_values': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
    ],
  ),
  'json_object_get_size': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
    ],
  ),
  'json_object_foreach_member': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonObject *',
        name = 'object',
      ),
      Param(
        type = 'JsonObjectForeach',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'json_array_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'json_array_new': Spec(
    return_type = 'JsonArray *',
    parameters = [
    ],
  ),
  'json_array_sized_new': Spec(
    return_type = 'JsonArray *',
    parameters = [
      Param(
        type = 'guint',
        name = 'n_elements',
      ),
    ],
  ),
  'json_array_ref': Spec(
    return_type = 'JsonArray *',
    parameters = [
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
    ],
  ),
  'json_array_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
    ],
  ),
  'json_array_add_element': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_array_add_int_element': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
      Param(
        type = 'gint64',
        name = 'value',
      ),
    ],
  ),
  'json_array_add_double_element': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
      Param(
        type = 'gdouble',
        name = 'value',
      ),
    ],
  ),
  'json_array_add_boolean_element': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
      Param(
        type = 'gboolean',
        name = 'value',
      ),
    ],
  ),
  'json_array_add_string_element': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'json_array_add_null_element': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
    ],
  ),
  'json_array_add_array_element': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
      Param(
        type = 'JsonArray *',
        name = 'value',
      ),
    ],
  ),
  'json_array_add_object_element': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
      Param(
        type = 'JsonObject *',
        name = 'value',
      ),
    ],
  ),
  'json_array_get_elements': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
    ],
  ),
  'json_array_get_element': Spec(
    return_type = 'JsonNode *',
    parameters = [
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'json_array_get_int_element': Spec(
    return_type = 'gint64',
    parameters = [
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'json_array_get_double_element': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'json_array_get_boolean_element': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'json_array_get_string_element': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'json_array_get_null_element': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'json_array_get_array_element': Spec(
    return_type = 'JsonArray *',
    parameters = [
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'json_array_get_object_element': Spec(
    return_type = 'JsonObject *',
    parameters = [
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'json_array_dup_element': Spec(
    return_type = 'JsonNode *',
    parameters = [
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'json_array_remove_element': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'json_array_get_length': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
    ],
  ),
  'json_array_foreach_element': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonArray *',
        name = 'array',
      ),
      Param(
        type = 'JsonArrayForeach',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'json_builder_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'json_builder_new': Spec(
    return_type = 'JsonBuilder *',
    parameters = [
    ],
  ),
  'json_builder_get_root': Spec(
    return_type = 'JsonNode *',
    parameters = [
      Param(
        type = 'JsonBuilder *',
        name = 'builder',
      ),
    ],
  ),
  'json_builder_reset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonBuilder *',
        name = 'builder',
      ),
    ],
  ),
  'json_builder_begin_array': Spec(
    return_type = 'JsonBuilder *',
    parameters = [
      Param(
        type = 'JsonBuilder *',
        name = 'builder',
      ),
    ],
  ),
  'json_builder_end_array': Spec(
    return_type = 'JsonBuilder *',
    parameters = [
      Param(
        type = 'JsonBuilder *',
        name = 'builder',
      ),
    ],
  ),
  'json_builder_begin_object': Spec(
    return_type = 'JsonBuilder *',
    parameters = [
      Param(
        type = 'JsonBuilder *',
        name = 'builder',
      ),
    ],
  ),
  'json_builder_end_object': Spec(
    return_type = 'JsonBuilder *',
    parameters = [
      Param(
        type = 'JsonBuilder *',
        name = 'builder',
      ),
    ],
  ),
  'json_builder_set_member_name': Spec(
    return_type = 'JsonBuilder *',
    parameters = [
      Param(
        type = 'JsonBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'const gchar *',
        name = 'member_name',
      ),
    ],
  ),
  'json_builder_add_value': Spec(
    return_type = 'JsonBuilder *',
    parameters = [
      Param(
        type = 'JsonBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_builder_add_int_value': Spec(
    return_type = 'JsonBuilder *',
    parameters = [
      Param(
        type = 'JsonBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'gint64',
        name = 'value',
      ),
    ],
  ),
  'json_builder_add_double_value': Spec(
    return_type = 'JsonBuilder *',
    parameters = [
      Param(
        type = 'JsonBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'gdouble',
        name = 'value',
      ),
    ],
  ),
  'json_builder_add_boolean_value': Spec(
    return_type = 'JsonBuilder *',
    parameters = [
      Param(
        type = 'JsonBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'gboolean',
        name = 'value',
      ),
    ],
  ),
  'json_builder_add_string_value': Spec(
    return_type = 'JsonBuilder *',
    parameters = [
      Param(
        type = 'JsonBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'json_builder_add_null_value': Spec(
    return_type = 'JsonBuilder *',
    parameters = [
      Param(
        type = 'JsonBuilder *',
        name = 'builder',
      ),
    ],
  ),
  'g_action_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_action_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GAction *',
        name = 'action',
      ),
    ],
  ),
  'g_action_get_parameter_type': Spec(
    return_type = 'const GVariantType *',
    parameters = [
      Param(
        type = 'GAction *',
        name = 'action',
      ),
    ],
  ),
  'g_action_get_state_type': Spec(
    return_type = 'const GVariantType *',
    parameters = [
      Param(
        type = 'GAction *',
        name = 'action',
      ),
    ],
  ),
  'g_action_get_state_hint': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GAction *',
        name = 'action',
      ),
    ],
  ),
  'g_action_get_enabled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAction *',
        name = 'action',
      ),
    ],
  ),
  'g_action_get_state': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GAction *',
        name = 'action',
      ),
    ],
  ),
  'g_action_change_state': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAction *',
        name = 'action',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_action_activate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAction *',
        name = 'action',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameter',
      ),
    ],
  ),
  'g_action_group_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_action_group_has_action': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_action_group_list_actions': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
    ],
  ),
  'g_action_group_get_action_parameter_type': Spec(
    return_type = 'const GVariantType *',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_action_group_get_action_state_type': Spec(
    return_type = 'const GVariantType *',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_action_group_get_action_state_hint': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_action_group_get_action_enabled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_action_group_get_action_state': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_action_group_change_action_state': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_action_group_activate_action': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameter',
      ),
    ],
  ),
  'g_action_group_action_added': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_action_group_action_removed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_action_group_action_enabled_changed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
      Param(
        type = 'gboolean',
        name = 'enabled',
      ),
    ],
  ),
  'g_action_group_action_state_changed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'state',
      ),
    ],
  ),
  'g_action_group_query_action': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
      Param(
        type = 'gboolean *',
        name = 'enabled',
      ),
      Param(
        type = 'const GVariantType **',
        name = 'parameter_type',
      ),
      Param(
        type = 'const GVariantType **',
        name = 'state_type',
      ),
      Param(
        type = 'GVariant **',
        name = 'state_hint',
      ),
      Param(
        type = 'GVariant **',
        name = 'state',
      ),
    ],
  ),
  'g_dbus_connection_export_action_group': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_unexport_action_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'guint',
        name = 'export_id',
      ),
    ],
  ),
  'g_action_map_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_action_map_lookup_action': Spec(
    return_type = 'GAction *',
    parameters = [
      Param(
        type = 'GActionMap *',
        name = 'action_map',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_action_map_add_action': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GActionMap *',
        name = 'action_map',
      ),
      Param(
        type = 'GAction *',
        name = 'action',
      ),
    ],
  ),
  'g_action_map_remove_action': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GActionMap *',
        name = 'action_map',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_action_map_add_action_entries': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GActionMap *',
        name = 'action_map',
      ),
      Param(
        type = 'const GActionEntry *',
        name = 'entries',
      ),
      Param(
        type = 'gint',
        name = 'n_entries',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_app_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_app_info_create_from_commandline': Spec(
    return_type = 'GAppInfo *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'commandline',
      ),
      Param(
        type = 'const char *',
        name = 'application_name',
      ),
      Param(
        type = 'GAppInfoCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_app_info_dup': Spec(
    return_type = 'GAppInfo *',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo1',
      ),
      Param(
        type = 'GAppInfo *',
        name = 'appinfo2',
      ),
    ],
  ),
  'g_app_info_get_id': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_get_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_get_display_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_get_description': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_get_executable': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_get_commandline': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_get_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_launch': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
      Param(
        type = 'GList *',
        name = 'files',
      ),
      Param(
        type = 'GAppLaunchContext *',
        name = 'launch_context',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_app_info_supports_uris': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_supports_files': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_launch_uris': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
      Param(
        type = 'GList *',
        name = 'uris',
      ),
      Param(
        type = 'GAppLaunchContext *',
        name = 'launch_context',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_app_info_should_show': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_set_as_default_for_type': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
      Param(
        type = 'const char *',
        name = 'content_type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_app_info_set_as_default_for_extension': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
      Param(
        type = 'const char *',
        name = 'extension',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_app_info_add_supports_type': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
      Param(
        type = 'const char *',
        name = 'content_type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_app_info_can_remove_supports_type': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_remove_supports_type': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
      Param(
        type = 'const char *',
        name = 'content_type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_app_info_get_supported_types': Spec(
    return_type = 'const char **',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_can_delete': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_delete': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_set_as_last_used_for_type': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
      Param(
        type = 'const char *',
        name = 'content_type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_app_info_get_all': Spec(
    return_type = 'GList *',
    parameters = [
    ],
  ),
  'g_app_info_get_all_for_type': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'content_type',
      ),
    ],
  ),
  'g_app_info_get_recommended_for_type': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'content_type',
      ),
    ],
  ),
  'g_app_info_get_fallback_for_type': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'content_type',
      ),
    ],
  ),
  'g_app_info_reset_type_associations': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'content_type',
      ),
    ],
  ),
  'g_app_info_get_default_for_type': Spec(
    return_type = 'GAppInfo *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'content_type',
      ),
      Param(
        type = 'gboolean',
        name = 'must_support_uris',
      ),
    ],
  ),
  'g_app_info_get_default_for_uri_scheme': Spec(
    return_type = 'GAppInfo *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'uri_scheme',
      ),
    ],
  ),
  'g_app_info_launch_default_for_uri': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char *',
        name = 'uri',
      ),
      Param(
        type = 'GAppLaunchContext *',
        name = 'launch_context',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_app_launch_context_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_app_launch_context_new': Spec(
    return_type = 'GAppLaunchContext *',
    parameters = [
    ],
  ),
  'g_app_launch_context_setenv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAppLaunchContext *',
        name = 'context',
      ),
      Param(
        type = 'const char *',
        name = 'variable',
      ),
      Param(
        type = 'const char *',
        name = 'value',
      ),
    ],
  ),
  'g_app_launch_context_unsetenv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAppLaunchContext *',
        name = 'context',
      ),
      Param(
        type = 'const char *',
        name = 'variable',
      ),
    ],
  ),
  'g_app_launch_context_get_environment': Spec(
    return_type = 'char **',
    parameters = [
      Param(
        type = 'GAppLaunchContext *',
        name = 'context',
      ),
    ],
  ),
  'g_app_launch_context_get_display': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GAppLaunchContext *',
        name = 'context',
      ),
      Param(
        type = 'GAppInfo *',
        name = 'info',
      ),
      Param(
        type = 'GList *',
        name = 'files',
      ),
    ],
  ),
  'g_app_launch_context_get_startup_notify_id': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GAppLaunchContext *',
        name = 'context',
      ),
      Param(
        type = 'GAppInfo *',
        name = 'info',
      ),
      Param(
        type = 'GList *',
        name = 'files',
      ),
    ],
  ),
  'g_app_launch_context_launch_failed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAppLaunchContext *',
        name = 'context',
      ),
      Param(
        type = 'const char *',
        name = 'startup_notify_id',
      ),
    ],
  ),
  'g_application_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_application_id_is_valid': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'application_id',
      ),
    ],
  ),
  'g_application_new': Spec(
    return_type = 'GApplication *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'application_id',
      ),
      Param(
        type = 'GApplicationFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_application_get_application_id': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_set_application_id': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
      Param(
        type = 'const gchar *',
        name = 'application_id',
      ),
    ],
  ),
  'g_application_get_dbus_connection': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_get_dbus_object_path': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_get_inactivity_timeout': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_set_inactivity_timeout': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
      Param(
        type = 'guint',
        name = 'inactivity_timeout',
      ),
    ],
  ),
  'g_application_get_flags': Spec(
    return_type = 'GApplicationFlags',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_set_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
      Param(
        type = 'GApplicationFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_application_set_action_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
    ],
  ),
  'g_application_get_is_registered': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_get_is_remote': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_register': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_application_hold': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_release': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_activate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_open': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
      Param(
        type = 'GFile **',
        name = 'files',
      ),
      Param(
        type = 'gint',
        name = 'n_files',
      ),
      Param(
        type = 'const gchar *',
        name = 'hint',
      ),
    ],
  ),
  'g_application_run': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
      Param(
        type = 'int',
        name = 'argc',
      ),
      Param(
        type = 'char **',
        name = 'argv',
      ),
    ],
  ),
  'g_application_quit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_get_default': Spec(
    return_type = 'GApplication *',
    parameters = [
    ],
  ),
  'g_application_set_default': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_command_line_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_application_command_line_get_arguments': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GApplicationCommandLine *',
        name = 'cmdline',
      ),
      Param(
        type = 'int *',
        name = 'argc',
      ),
    ],
  ),
  'g_application_command_line_get_environ': Spec(
    return_type = 'const gchar *const *',
    parameters = [
      Param(
        type = 'GApplicationCommandLine *',
        name = 'cmdline',
      ),
    ],
  ),
  'g_application_command_line_getenv': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GApplicationCommandLine *',
        name = 'cmdline',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_application_command_line_get_cwd': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GApplicationCommandLine *',
        name = 'cmdline',
      ),
    ],
  ),
  'g_application_command_line_get_is_remote': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GApplicationCommandLine *',
        name = 'cmdline',
      ),
    ],
  ),
  'g_application_command_line_print': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplicationCommandLine *',
        name = 'cmdline',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_application_command_line_printerr': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplicationCommandLine *',
        name = 'cmdline',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_application_command_line_get_exit_status': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GApplicationCommandLine *',
        name = 'cmdline',
      ),
    ],
  ),
  'g_application_command_line_set_exit_status': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplicationCommandLine *',
        name = 'cmdline',
      ),
      Param(
        type = 'int',
        name = 'exit_status',
      ),
    ],
  ),
  'g_application_command_line_get_platform_data': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GApplicationCommandLine *',
        name = 'cmdline',
      ),
    ],
  ),
  'g_initable_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_initable_init': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInitable *',
        name = 'initable',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_initable_new': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'object_type',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
    ],
  ),
  'g_initable_newv': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'object_type',
      ),
      Param(
        type = 'guint',
        name = 'n_parameters',
      ),
      Param(
        type = 'GParameter *',
        name = 'parameters',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_initable_new_valist': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'GType',
        name = 'object_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_async_initable_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_async_initable_init_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncInitable *',
        name = 'initable',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_async_initable_init_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAsyncInitable *',
        name = 'initable',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_async_initable_new_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'object_type',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
    ],
  ),
  'g_async_initable_newv_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'object_type',
      ),
      Param(
        type = 'guint',
        name = 'n_parameters',
      ),
      Param(
        type = 'GParameter *',
        name = 'parameters',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_async_initable_new_valist_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'object_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_async_initable_new_finish': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'GAsyncInitable *',
        name = 'initable',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_async_result_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_async_result_get_user_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
    ],
  ),
  'g_async_result_get_source_object': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
    ],
  ),
  'g_async_result_legacy_propagate_error': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_async_result_is_tagged': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'gpointer',
        name = 'source_tag',
      ),
    ],
  ),
  'g_input_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_input_stream_read': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_input_stream_read_all': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_read',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_input_stream_read_bytes': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_input_stream_skip': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_input_stream_close': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_input_stream_read_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_input_stream_read_finish': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_input_stream_read_bytes_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_input_stream_read_bytes_finish': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_input_stream_skip_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_input_stream_skip_finish': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_input_stream_close_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_input_stream_close_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_input_stream_is_closed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_input_stream_has_pending': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_input_stream_set_pending': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_input_stream_clear_pending': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_filter_input_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_filter_input_stream_get_base_stream': Spec(
    return_type = 'GInputStream *',
    parameters = [
      Param(
        type = 'GFilterInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_filter_input_stream_get_close_base_stream': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFilterInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_filter_input_stream_set_close_base_stream': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFilterInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gboolean',
        name = 'close_base',
      ),
    ],
  ),
  'g_buffered_input_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_buffered_input_stream_new': Spec(
    return_type = 'GInputStream *',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'base_stream',
      ),
    ],
  ),
  'g_buffered_input_stream_new_sized': Spec(
    return_type = 'GInputStream *',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'base_stream',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
    ],
  ),
  'g_buffered_input_stream_get_buffer_size': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GBufferedInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_buffered_input_stream_set_buffer_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBufferedInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
    ],
  ),
  'g_buffered_input_stream_get_available': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GBufferedInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_buffered_input_stream_peek': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GBufferedInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'offset',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
    ],
  ),
  'g_buffered_input_stream_peek_buffer': Spec(
    return_type = 'const void *',
    parameters = [
      Param(
        type = 'GBufferedInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gsize *',
        name = 'count',
      ),
    ],
  ),
  'g_buffered_input_stream_fill': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GBufferedInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gssize',
        name = 'count',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_buffered_input_stream_fill_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBufferedInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gssize',
        name = 'count',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_buffered_input_stream_fill_finish': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GBufferedInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_buffered_input_stream_read_byte': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GBufferedInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_output_stream_write': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_write_all': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_write_bytes': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_splice': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GInputStream *',
        name = 'source',
      ),
      Param(
        type = 'GOutputStreamSpliceFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_flush': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_close': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_write_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_output_stream_write_finish': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_write_bytes_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_output_stream_write_bytes_finish': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_splice_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GInputStream *',
        name = 'source',
      ),
      Param(
        type = 'GOutputStreamSpliceFlags',
        name = 'flags',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_output_stream_splice_finish': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_flush_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_output_stream_flush_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_close_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_output_stream_close_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_is_closed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_output_stream_is_closing': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_output_stream_has_pending': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_output_stream_set_pending': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_clear_pending': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_filter_output_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_filter_output_stream_get_base_stream': Spec(
    return_type = 'GOutputStream *',
    parameters = [
      Param(
        type = 'GFilterOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_filter_output_stream_get_close_base_stream': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFilterOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_filter_output_stream_set_close_base_stream': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFilterOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gboolean',
        name = 'close_base',
      ),
    ],
  ),
  'g_buffered_output_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_buffered_output_stream_new': Spec(
    return_type = 'GOutputStream *',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'base_stream',
      ),
    ],
  ),
  'g_buffered_output_stream_new_sized': Spec(
    return_type = 'GOutputStream *',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'base_stream',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
    ],
  ),
  'g_buffered_output_stream_get_buffer_size': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GBufferedOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_buffered_output_stream_set_buffer_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBufferedOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
    ],
  ),
  'g_buffered_output_stream_get_auto_grow': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBufferedOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_buffered_output_stream_set_auto_grow': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBufferedOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gboolean',
        name = 'auto_grow',
      ),
    ],
  ),
  'g_cancellable_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_cancellable_new': Spec(
    return_type = 'GCancellable *',
    parameters = [
    ],
  ),
  'g_cancellable_is_cancelled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_cancellable_set_error_if_cancelled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_cancellable_get_fd': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_cancellable_make_pollfd': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GPollFD *',
        name = 'pollfd',
      ),
    ],
  ),
  'g_cancellable_release_fd': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_cancellable_source_new': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_cancellable_get_current': Spec(
    return_type = 'GCancellable *',
    parameters = [
    ],
  ),
  'g_cancellable_push_current': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_cancellable_pop_current': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_cancellable_reset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_cancellable_connect': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'data_destroy_func',
      ),
    ],
  ),
  'g_cancellable_disconnect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'gulong',
        name = 'handler_id',
      ),
    ],
  ),
  'g_cancellable_cancel': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_converter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_converter_convert': Spec(
    return_type = 'GConverterResult',
    parameters = [
      Param(
        type = 'GConverter *',
        name = 'converter',
      ),
      Param(
        type = 'const void *',
        name = 'inbuf',
      ),
      Param(
        type = 'gsize',
        name = 'inbuf_size',
      ),
      Param(
        type = 'void *',
        name = 'outbuf',
      ),
      Param(
        type = 'gsize',
        name = 'outbuf_size',
      ),
      Param(
        type = 'GConverterFlags',
        name = 'flags',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_read',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_converter_reset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GConverter *',
        name = 'converter',
      ),
    ],
  ),
  'g_charset_converter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_charset_converter_new': Spec(
    return_type = 'GCharsetConverter *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'to_charset',
      ),
      Param(
        type = 'const gchar *',
        name = 'from_charset',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_charset_converter_set_use_fallback': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCharsetConverter *',
        name = 'converter',
      ),
      Param(
        type = 'gboolean',
        name = 'use_fallback',
      ),
    ],
  ),
  'g_charset_converter_get_use_fallback': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GCharsetConverter *',
        name = 'converter',
      ),
    ],
  ),
  'g_charset_converter_get_num_fallbacks': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GCharsetConverter *',
        name = 'converter',
      ),
    ],
  ),
  'g_content_type_equals': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'type1',
      ),
      Param(
        type = 'const gchar *',
        name = 'type2',
      ),
    ],
  ),
  'g_content_type_is_a': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'type',
      ),
      Param(
        type = 'const gchar *',
        name = 'supertype',
      ),
    ],
  ),
  'g_content_type_is_unknown': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'type',
      ),
    ],
  ),
  'g_content_type_get_description': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'type',
      ),
    ],
  ),
  'g_content_type_get_mime_type': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'type',
      ),
    ],
  ),
  'g_content_type_get_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'type',
      ),
    ],
  ),
  'g_content_type_get_symbolic_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'type',
      ),
    ],
  ),
  'g_content_type_get_generic_icon_name': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'type',
      ),
    ],
  ),
  'g_content_type_can_be_executable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'type',
      ),
    ],
  ),
  'g_content_type_from_mime_type': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'mime_type',
      ),
    ],
  ),
  'g_content_type_guess': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'const guchar *',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'data_size',
      ),
      Param(
        type = 'gboolean *',
        name = 'result_uncertain',
      ),
    ],
  ),
  'g_content_type_guess_for_tree': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'root',
      ),
    ],
  ),
  'g_content_types_get_registered': Spec(
    return_type = 'GList *',
    parameters = [
    ],
  ),
  'g_converter_input_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_converter_input_stream_new': Spec(
    return_type = 'GInputStream *',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'base_stream',
      ),
      Param(
        type = 'GConverter *',
        name = 'converter',
      ),
    ],
  ),
  'g_converter_input_stream_get_converter': Spec(
    return_type = 'GConverter *',
    parameters = [
      Param(
        type = 'GConverterInputStream *',
        name = 'converter_stream',
      ),
    ],
  ),
  'g_converter_output_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_converter_output_stream_new': Spec(
    return_type = 'GOutputStream *',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'base_stream',
      ),
      Param(
        type = 'GConverter *',
        name = 'converter',
      ),
    ],
  ),
  'g_converter_output_stream_get_converter': Spec(
    return_type = 'GConverter *',
    parameters = [
      Param(
        type = 'GConverterOutputStream *',
        name = 'converter_stream',
      ),
    ],
  ),
  'access': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__name',
      ),
      Param(
        type = 'int',
        name = '__type',
      ),
    ],
  ),
  'faccessat': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'const char *',
        name = '__file',
      ),
      Param(
        type = 'int',
        name = '__type',
      ),
      Param(
        type = 'int',
        name = '__flag',
      ),
    ],
  ),
  'lseek': Spec(
    return_type = '__off_t',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = '__off_t',
        name = '__offset',
      ),
      Param(
        type = 'int',
        name = '__whence',
      ),
    ],
  ),
  'close': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
    ],
  ),
  'read': Spec(
    return_type = 'ssize_t',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'void *',
        name = '__buf',
      ),
      Param(
        type = 'size_t',
        name = '__nbytes',
      ),
    ],
  ),
  'write': Spec(
    return_type = 'ssize_t',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'const void *',
        name = '__buf',
      ),
      Param(
        type = 'size_t',
        name = '__n',
      ),
    ],
  ),
  'pread': Spec(
    return_type = 'ssize_t',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'void *',
        name = '__buf',
      ),
      Param(
        type = 'size_t',
        name = '__nbytes',
      ),
      Param(
        type = '__off_t',
        name = '__offset',
      ),
    ],
  ),
  'pwrite': Spec(
    return_type = 'ssize_t',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'const void *',
        name = '__buf',
      ),
      Param(
        type = 'size_t',
        name = '__n',
      ),
      Param(
        type = '__off_t',
        name = '__offset',
      ),
    ],
  ),
  'pipe': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int [2]',
        name = '__pipedes',
      ),
    ],
  ),
  'alarm': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'unsigned int',
        name = '__seconds',
      ),
    ],
  ),
  'sleep': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'unsigned int',
        name = '__seconds',
      ),
    ],
  ),
  'ualarm': Spec(
    return_type = '__useconds_t',
    parameters = [
      Param(
        type = '__useconds_t',
        name = '__value',
      ),
      Param(
        type = '__useconds_t',
        name = '__interval',
      ),
    ],
  ),
  'usleep': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__useconds_t',
        name = '__useconds',
      ),
    ],
  ),
  'pause': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'chown': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__file',
      ),
      Param(
        type = '__uid_t',
        name = '__owner',
      ),
      Param(
        type = '__gid_t',
        name = '__group',
      ),
    ],
  ),
  'fchown': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = '__uid_t',
        name = '__owner',
      ),
      Param(
        type = '__gid_t',
        name = '__group',
      ),
    ],
  ),
  'lchown': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__file',
      ),
      Param(
        type = '__uid_t',
        name = '__owner',
      ),
      Param(
        type = '__gid_t',
        name = '__group',
      ),
    ],
  ),
  'fchownat': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'const char *',
        name = '__file',
      ),
      Param(
        type = '__uid_t',
        name = '__owner',
      ),
      Param(
        type = '__gid_t',
        name = '__group',
      ),
      Param(
        type = 'int',
        name = '__flag',
      ),
    ],
  ),
  'chdir': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__path',
      ),
    ],
  ),
  'fchdir': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
    ],
  ),
  'getcwd': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'char *',
        name = '__buf',
      ),
      Param(
        type = 'size_t',
        name = '__size',
      ),
    ],
  ),
  'getwd': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'char *',
        name = '__buf',
      ),
    ],
  ),
  'dup': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
    ],
  ),
  'dup2': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'int',
        name = '__fd2',
      ),
    ],
  ),
  'execve': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__path',
      ),
      Param(
        type = 'char *const []',
        name = '__argv',
      ),
      Param(
        type = 'char *const []',
        name = '__envp',
      ),
    ],
  ),
  'fexecve': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'char *const []',
        name = '__argv',
      ),
      Param(
        type = 'char *const []',
        name = '__envp',
      ),
    ],
  ),
  'execv': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__path',
      ),
      Param(
        type = 'char *const []',
        name = '__argv',
      ),
    ],
  ),
  'execle': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__path',
      ),
      Param(
        type = 'const char *',
        name = '__arg',
      ),
    ],
  ),
  'execl': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__path',
      ),
      Param(
        type = 'const char *',
        name = '__arg',
      ),
    ],
  ),
  'execvp': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__file',
      ),
      Param(
        type = 'char *const []',
        name = '__argv',
      ),
    ],
  ),
  'execlp': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__file',
      ),
      Param(
        type = 'const char *',
        name = '__arg',
      ),
    ],
  ),
  'nice': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__inc',
      ),
    ],
  ),
  '_exit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'int',
        name = '__status',
      ),
    ],
  ),
  'pathconf': Spec(
    return_type = 'long',
    parameters = [
      Param(
        type = 'const char *',
        name = '__path',
      ),
      Param(
        type = 'int',
        name = '__name',
      ),
    ],
  ),
  'fpathconf': Spec(
    return_type = 'long',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'int',
        name = '__name',
      ),
    ],
  ),
  'sysconf': Spec(
    return_type = 'long',
    parameters = [
      Param(
        type = 'int',
        name = '__name',
      ),
    ],
  ),
  'confstr': Spec(
    return_type = 'size_t',
    parameters = [
      Param(
        type = 'int',
        name = '__name',
      ),
      Param(
        type = 'char *',
        name = '__buf',
      ),
      Param(
        type = 'size_t',
        name = '__len',
      ),
    ],
  ),
  'getpid': Spec(
    return_type = '__pid_t',
    parameters = [
    ],
  ),
  'getppid': Spec(
    return_type = '__pid_t',
    parameters = [
    ],
  ),
  'getpgrp': Spec(
    return_type = '__pid_t',
    parameters = [
    ],
  ),
  '__getpgid': Spec(
    return_type = '__pid_t',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pid',
      ),
    ],
  ),
  'getpgid': Spec(
    return_type = '__pid_t',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pid',
      ),
    ],
  ),
  'setpgid': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pid',
      ),
      Param(
        type = '__pid_t',
        name = '__pgid',
      ),
    ],
  ),
  'setpgrp': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'setsid': Spec(
    return_type = '__pid_t',
    parameters = [
    ],
  ),
  'getsid': Spec(
    return_type = '__pid_t',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pid',
      ),
    ],
  ),
  'getuid': Spec(
    return_type = '__uid_t',
    parameters = [
    ],
  ),
  'geteuid': Spec(
    return_type = '__uid_t',
    parameters = [
    ],
  ),
  'getgid': Spec(
    return_type = '__gid_t',
    parameters = [
    ],
  ),
  'getegid': Spec(
    return_type = '__gid_t',
    parameters = [
    ],
  ),
  'getgroups': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__size',
      ),
      Param(
        type = '__gid_t []',
        name = '__list',
      ),
    ],
  ),
  'setuid': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__uid_t',
        name = '__uid',
      ),
    ],
  ),
  'setreuid': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__uid_t',
        name = '__ruid',
      ),
      Param(
        type = '__uid_t',
        name = '__euid',
      ),
    ],
  ),
  'seteuid': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__uid_t',
        name = '__uid',
      ),
    ],
  ),
  'setgid': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__gid_t',
        name = '__gid',
      ),
    ],
  ),
  'setregid': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__gid_t',
        name = '__rgid',
      ),
      Param(
        type = '__gid_t',
        name = '__egid',
      ),
    ],
  ),
  'setegid': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__gid_t',
        name = '__gid',
      ),
    ],
  ),
  'fork': Spec(
    return_type = '__pid_t',
    parameters = [
    ],
  ),
  'vfork': Spec(
    return_type = '__pid_t',
    parameters = [
    ],
  ),
  'ttyname': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
    ],
  ),
  'ttyname_r': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'char *',
        name = '__buf',
      ),
      Param(
        type = 'size_t',
        name = '__buflen',
      ),
    ],
  ),
  'isatty': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
    ],
  ),
  'ttyslot': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'link': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__from',
      ),
      Param(
        type = 'const char *',
        name = '__to',
      ),
    ],
  ),
  'linkat': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fromfd',
      ),
      Param(
        type = 'const char *',
        name = '__from',
      ),
      Param(
        type = 'int',
        name = '__tofd',
      ),
      Param(
        type = 'const char *',
        name = '__to',
      ),
      Param(
        type = 'int',
        name = '__flags',
      ),
    ],
  ),
  'symlink': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__from',
      ),
      Param(
        type = 'const char *',
        name = '__to',
      ),
    ],
  ),
  'readlink': Spec(
    return_type = 'ssize_t',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__path',
      ),
      Param(
        type = 'char *restrict',
        name = '__buf',
      ),
      Param(
        type = 'size_t',
        name = '__len',
      ),
    ],
  ),
  'symlinkat': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__from',
      ),
      Param(
        type = 'int',
        name = '__tofd',
      ),
      Param(
        type = 'const char *',
        name = '__to',
      ),
    ],
  ),
  'readlinkat': Spec(
    return_type = 'ssize_t',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'const char *restrict',
        name = '__path',
      ),
      Param(
        type = 'char *restrict',
        name = '__buf',
      ),
      Param(
        type = 'size_t',
        name = '__len',
      ),
    ],
  ),
  'unlink': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__name',
      ),
    ],
  ),
  'unlinkat': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'const char *',
        name = '__name',
      ),
      Param(
        type = 'int',
        name = '__flag',
      ),
    ],
  ),
  'rmdir': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__path',
      ),
    ],
  ),
  'tcgetpgrp': Spec(
    return_type = '__pid_t',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
    ],
  ),
  'tcsetpgrp': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = '__pid_t',
        name = '__pgrp_id',
      ),
    ],
  ),
  'getlogin': Spec(
    return_type = 'char *',
    parameters = [
    ],
  ),
  'getlogin_r': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'char *',
        name = '__name',
      ),
      Param(
        type = 'size_t',
        name = '__name_len',
      ),
    ],
  ),
  'setlogin': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__name',
      ),
    ],
  ),
  'getopt': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '___argc',
      ),
      Param(
        type = 'char *const *',
        name = '___argv',
      ),
      Param(
        type = 'const char *',
        name = '__shortopts',
      ),
    ],
  ),
  'gethostname': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'char *',
        name = '__name',
      ),
      Param(
        type = 'size_t',
        name = '__len',
      ),
    ],
  ),
  'sethostname': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__name',
      ),
      Param(
        type = 'size_t',
        name = '__len',
      ),
    ],
  ),
  'sethostid': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'long',
        name = '__id',
      ),
    ],
  ),
  'getdomainname': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'char *',
        name = '__name',
      ),
      Param(
        type = 'size_t',
        name = '__len',
      ),
    ],
  ),
  'setdomainname': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__name',
      ),
      Param(
        type = 'size_t',
        name = '__len',
      ),
    ],
  ),
  'vhangup': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'revoke': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__file',
      ),
    ],
  ),
  'profil': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'unsigned short *',
        name = '__sample_buffer',
      ),
      Param(
        type = 'size_t',
        name = '__size',
      ),
      Param(
        type = 'size_t',
        name = '__offset',
      ),
      Param(
        type = 'unsigned int',
        name = '__scale',
      ),
    ],
  ),
  'acct': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__name',
      ),
    ],
  ),
  'getusershell': Spec(
    return_type = 'char *',
    parameters = [
    ],
  ),
  'endusershell': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'setusershell': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'daemon': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__nochdir',
      ),
      Param(
        type = 'int',
        name = '__noclose',
      ),
    ],
  ),
  'chroot': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__path',
      ),
    ],
  ),
  'getpass': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const char *',
        name = '__prompt',
      ),
    ],
  ),
  'fsync': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
    ],
  ),
  'gethostid': Spec(
    return_type = 'long',
    parameters = [
    ],
  ),
  'sync': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'getpagesize': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'getdtablesize': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'truncate': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__file',
      ),
      Param(
        type = '__off_t',
        name = '__length',
      ),
    ],
  ),
  'ftruncate': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = '__off_t',
        name = '__length',
      ),
    ],
  ),
  'brk': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'void *',
        name = '__addr',
      ),
    ],
  ),
  'sbrk': Spec(
    return_type = 'void *',
    parameters = [
      Param(
        type = 'intptr_t',
        name = '__delta',
      ),
    ],
  ),
  'syscall': Spec(
    return_type = 'long',
    parameters = [
      Param(
        type = 'long',
        name = '__sysno',
      ),
    ],
  ),
  'lockf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'int',
        name = '__cmd',
      ),
      Param(
        type = '__off_t',
        name = '__len',
      ),
    ],
  ),
  'fdatasync': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fildes',
      ),
    ],
  ),
  'select': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__nfds',
      ),
      Param(
        type = 'fd_set *restrict',
        name = '__readfds',
      ),
      Param(
        type = 'fd_set *restrict',
        name = '__writefds',
      ),
      Param(
        type = 'fd_set *restrict',
        name = '__exceptfds',
      ),
      Param(
        type = 'struct timeval *restrict',
        name = '__timeout',
      ),
    ],
  ),
  'pselect': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__nfds',
      ),
      Param(
        type = 'fd_set *restrict',
        name = '__readfds',
      ),
      Param(
        type = 'fd_set *restrict',
        name = '__writefds',
      ),
      Param(
        type = 'fd_set *restrict',
        name = '__exceptfds',
      ),
      Param(
        type = 'const struct timespec *restrict',
        name = '__timeout',
      ),
      Param(
        type = 'const __sigset_t *restrict',
        name = '__sigmask',
      ),
    ],
  ),
  'gnu_dev_major': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'unsigned long long',
        name = '__dev',
      ),
    ],
  ),
  'gnu_dev_minor': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'unsigned long long',
        name = '__dev',
      ),
    ],
  ),
  'gnu_dev_makedev': Spec(
    return_type = 'unsigned long long',
    parameters = [
      Param(
        type = 'unsigned int',
        name = '__major',
      ),
      Param(
        type = 'unsigned int',
        name = '__minor',
      ),
    ],
  ),
  'g_credentials_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_credentials_new': Spec(
    return_type = 'GCredentials *',
    parameters = [
    ],
  ),
  'g_credentials_to_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GCredentials *',
        name = 'credentials',
      ),
    ],
  ),
  'g_credentials_get_native': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GCredentials *',
        name = 'credentials',
      ),
      Param(
        type = 'GCredentialsType',
        name = 'native_type',
      ),
    ],
  ),
  'g_credentials_set_native': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCredentials *',
        name = 'credentials',
      ),
      Param(
        type = 'GCredentialsType',
        name = 'native_type',
      ),
      Param(
        type = 'gpointer',
        name = 'native',
      ),
    ],
  ),
  'g_credentials_is_same_user': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GCredentials *',
        name = 'credentials',
      ),
      Param(
        type = 'GCredentials *',
        name = 'other_credentials',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_credentials_get_unix_user': Spec(
    return_type = 'uid_t',
    parameters = [
      Param(
        type = 'GCredentials *',
        name = 'credentials',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_credentials_set_unix_user': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GCredentials *',
        name = 'credentials',
      ),
      Param(
        type = 'uid_t',
        name = 'uid',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_data_input_stream_new': Spec(
    return_type = 'GDataInputStream *',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'base_stream',
      ),
    ],
  ),
  'g_data_input_stream_set_byte_order': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GDataStreamByteOrder',
        name = 'order',
      ),
    ],
  ),
  'g_data_input_stream_get_byte_order': Spec(
    return_type = 'GDataStreamByteOrder',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_data_input_stream_set_newline_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GDataStreamNewlineType',
        name = 'type',
      ),
    ],
  ),
  'g_data_input_stream_get_newline_type': Spec(
    return_type = 'GDataStreamNewlineType',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_data_input_stream_read_byte': Spec(
    return_type = 'guchar',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_int16': Spec(
    return_type = 'gint16',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_uint16': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_int32': Spec(
    return_type = 'gint32',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_uint32': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_int64': Spec(
    return_type = 'gint64',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_uint64': Spec(
    return_type = 'guint64',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_line': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_line_utf8': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_line_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gint',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_data_input_stream_read_line_finish': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_line_finish_utf8': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_until': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const gchar *',
        name = 'stop_chars',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_until_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const gchar *',
        name = 'stop_chars',
      ),
      Param(
        type = 'gint',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_data_input_stream_read_until_finish': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_upto': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const gchar *',
        name = 'stop_chars',
      ),
      Param(
        type = 'gssize',
        name = 'stop_chars_len',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_upto_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const gchar *',
        name = 'stop_chars',
      ),
      Param(
        type = 'gssize',
        name = 'stop_chars_len',
      ),
      Param(
        type = 'gint',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_data_input_stream_read_upto_finish': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_output_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_data_output_stream_new': Spec(
    return_type = 'GDataOutputStream *',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'base_stream',
      ),
    ],
  ),
  'g_data_output_stream_set_byte_order': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDataOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GDataStreamByteOrder',
        name = 'order',
      ),
    ],
  ),
  'g_data_output_stream_get_byte_order': Spec(
    return_type = 'GDataStreamByteOrder',
    parameters = [
      Param(
        type = 'GDataOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_data_output_stream_put_byte': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDataOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'guchar',
        name = 'data',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_output_stream_put_int16': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDataOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gint16',
        name = 'data',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_output_stream_put_uint16': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDataOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'guint16',
        name = 'data',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_output_stream_put_int32': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDataOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gint32',
        name = 'data',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_output_stream_put_uint32': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDataOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'guint32',
        name = 'data',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_output_stream_put_int64': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDataOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gint64',
        name = 'data',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_output_stream_put_uint64': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDataOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'guint64',
        name = 'data',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_output_stream_put_string': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDataOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const char *',
        name = 'str',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_is_address': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_dbus_is_supported_address': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_address_get_stream': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'address',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_address_get_stream_finish': Spec(
    return_type = 'GIOStream *',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'gchar **',
        name = 'out_guid',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_address_get_stream_sync': Spec(
    return_type = 'GIOStream *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'address',
      ),
      Param(
        type = 'gchar **',
        name = 'out_guid',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_address_get_for_bus_sync': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GBusType',
        name = 'bus_type',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_auth_observer_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_auth_observer_new': Spec(
    return_type = 'GDBusAuthObserver *',
    parameters = [
    ],
  ),
  'g_dbus_auth_observer_authorize_authenticated_peer': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusAuthObserver *',
        name = 'observer',
      ),
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCredentials *',
        name = 'credentials',
      ),
    ],
  ),
  'g_dbus_auth_observer_allow_mechanism': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusAuthObserver *',
        name = 'observer',
      ),
      Param(
        type = 'const gchar *',
        name = 'mechanism',
      ),
    ],
  ),
  'g_dbus_connection_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_bus_get': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBusType',
        name = 'bus_type',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_bus_get_finish': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bus_get_sync': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GBusType',
        name = 'bus_type',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_new': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
      Param(
        type = 'const gchar *',
        name = 'guid',
      ),
      Param(
        type = 'GDBusConnectionFlags',
        name = 'flags',
      ),
      Param(
        type = 'GDBusAuthObserver *',
        name = 'observer',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_connection_new_finish': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_new_sync': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
      Param(
        type = 'const gchar *',
        name = 'guid',
      ),
      Param(
        type = 'GDBusConnectionFlags',
        name = 'flags',
      ),
      Param(
        type = 'GDBusAuthObserver *',
        name = 'observer',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_new_for_address': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'address',
      ),
      Param(
        type = 'GDBusConnectionFlags',
        name = 'flags',
      ),
      Param(
        type = 'GDBusAuthObserver *',
        name = 'observer',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_connection_new_for_address_finish': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_new_for_address_sync': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'address',
      ),
      Param(
        type = 'GDBusConnectionFlags',
        name = 'flags',
      ),
      Param(
        type = 'GDBusAuthObserver *',
        name = 'observer',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_start_message_processing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_connection_is_closed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_connection_get_stream': Spec(
    return_type = 'GIOStream *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_connection_get_guid': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_connection_get_unique_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_connection_get_peer_credentials': Spec(
    return_type = 'GCredentials *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_connection_get_last_serial': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_connection_get_exit_on_close': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_connection_set_exit_on_close': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'gboolean',
        name = 'exit_on_close',
      ),
    ],
  ),
  'g_dbus_connection_get_capabilities': Spec(
    return_type = 'GDBusCapabilityFlags',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_connection_close': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_connection_close_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_close_sync': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_flush': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_connection_flush_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_flush_sync': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_send_message': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GDBusSendMessageFlags',
        name = 'flags',
      ),
      Param(
        type = 'volatile guint32 *',
        name = 'out_serial',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_send_message_with_reply': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GDBusSendMessageFlags',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'timeout_msec',
      ),
      Param(
        type = 'volatile guint32 *',
        name = 'out_serial',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_connection_send_message_with_reply_finish': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_send_message_with_reply_sync': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GDBusSendMessageFlags',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'timeout_msec',
      ),
      Param(
        type = 'volatile guint32 *',
        name = 'out_serial',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_emit_signal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'destination_bus_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'signal_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameters',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_call': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'bus_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'method_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameters',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'reply_type',
      ),
      Param(
        type = 'GDBusCallFlags',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'timeout_msec',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_connection_call_finish': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_call_sync': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'bus_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'method_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameters',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'reply_type',
      ),
      Param(
        type = 'GDBusCallFlags',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'timeout_msec',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_call_with_unix_fd_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'bus_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'method_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameters',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'reply_type',
      ),
      Param(
        type = 'GDBusCallFlags',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'timeout_msec',
      ),
      Param(
        type = 'GUnixFDList *',
        name = 'fd_list',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_connection_call_with_unix_fd_list_finish': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GUnixFDList **',
        name = 'out_fd_list',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_call_with_unix_fd_list_sync': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'bus_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'method_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameters',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'reply_type',
      ),
      Param(
        type = 'GDBusCallFlags',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'timeout_msec',
      ),
      Param(
        type = 'GUnixFDList *',
        name = 'fd_list',
      ),
      Param(
        type = 'GUnixFDList **',
        name = 'out_fd_list',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_register_object': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'interface_info',
      ),
      Param(
        type = 'const GDBusInterfaceVTable *',
        name = 'vtable',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'user_data_free_func',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_unregister_object': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'guint',
        name = 'registration_id',
      ),
    ],
  ),
  'g_dbus_connection_register_subtree': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const GDBusSubtreeVTable *',
        name = 'vtable',
      ),
      Param(
        type = 'GDBusSubtreeFlags',
        name = 'flags',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'user_data_free_func',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_unregister_subtree': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'guint',
        name = 'registration_id',
      ),
    ],
  ),
  'g_dbus_connection_signal_subscribe': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'sender',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'member',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const gchar *',
        name = 'arg0',
      ),
      Param(
        type = 'GDBusSignalFlags',
        name = 'flags',
      ),
      Param(
        type = 'GDBusSignalCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'user_data_free_func',
      ),
    ],
  ),
  'g_dbus_connection_signal_unsubscribe': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'guint',
        name = 'subscription_id',
      ),
    ],
  ),
  'g_dbus_connection_add_filter': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GDBusMessageFilterFunction',
        name = 'filter_function',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'user_data_free_func',
      ),
    ],
  ),
  'g_dbus_connection_remove_filter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'guint',
        name = 'filter_id',
      ),
    ],
  ),
  'g_dbus_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_dbus_error_is_remote_error': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GError *',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_error_get_remote_error': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GError *',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_error_strip_remote_error': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GError *',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_error_register_error': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GQuark',
        name = 'error_domain',
      ),
      Param(
        type = 'gint',
        name = 'error_code',
      ),
      Param(
        type = 'const gchar *',
        name = 'dbus_error_name',
      ),
    ],
  ),
  'g_dbus_error_unregister_error': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GQuark',
        name = 'error_domain',
      ),
      Param(
        type = 'gint',
        name = 'error_code',
      ),
      Param(
        type = 'const gchar *',
        name = 'dbus_error_name',
      ),
    ],
  ),
  'g_dbus_error_register_error_domain': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'error_domain_quark_name',
      ),
      Param(
        type = 'volatile gsize *',
        name = 'quark_volatile',
      ),
      Param(
        type = 'const GDBusErrorEntry *',
        name = 'entries',
      ),
      Param(
        type = 'guint',
        name = 'num_entries',
      ),
    ],
  ),
  'g_dbus_error_new_for_dbus_error': Spec(
    return_type = 'GError *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'dbus_error_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'dbus_error_message',
      ),
    ],
  ),
  'g_dbus_error_set_dbus_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GError **',
        name = 'error',
      ),
      Param(
        type = 'const gchar *',
        name = 'dbus_error_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'dbus_error_message',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_dbus_error_set_dbus_error_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GError **',
        name = 'error',
      ),
      Param(
        type = 'const gchar *',
        name = 'dbus_error_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'dbus_error_message',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'g_dbus_error_encode_gerror': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GError *',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_annotation_info_lookup': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusAnnotationInfo **',
        name = 'annotations',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_dbus_interface_info_lookup_method': Spec(
    return_type = 'GDBusMethodInfo *',
    parameters = [
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_dbus_interface_info_lookup_signal': Spec(
    return_type = 'GDBusSignalInfo *',
    parameters = [
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_dbus_interface_info_lookup_property': Spec(
    return_type = 'GDBusPropertyInfo *',
    parameters = [
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_dbus_interface_info_cache_build': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_interface_info_cache_release': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_interface_info_generate_xml': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
      Param(
        type = 'guint',
        name = 'indent',
      ),
      Param(
        type = 'GString *',
        name = 'string_builder',
      ),
    ],
  ),
  'g_dbus_node_info_new_for_xml': Spec(
    return_type = 'GDBusNodeInfo *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'xml_data',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_node_info_lookup_interface': Spec(
    return_type = 'GDBusInterfaceInfo *',
    parameters = [
      Param(
        type = 'GDBusNodeInfo *',
        name = 'info',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_dbus_node_info_generate_xml': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusNodeInfo *',
        name = 'info',
      ),
      Param(
        type = 'guint',
        name = 'indent',
      ),
      Param(
        type = 'GString *',
        name = 'string_builder',
      ),
    ],
  ),
  'g_dbus_node_info_ref': Spec(
    return_type = 'GDBusNodeInfo *',
    parameters = [
      Param(
        type = 'GDBusNodeInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_interface_info_ref': Spec(
    return_type = 'GDBusInterfaceInfo *',
    parameters = [
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_method_info_ref': Spec(
    return_type = 'GDBusMethodInfo *',
    parameters = [
      Param(
        type = 'GDBusMethodInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_signal_info_ref': Spec(
    return_type = 'GDBusSignalInfo *',
    parameters = [
      Param(
        type = 'GDBusSignalInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_property_info_ref': Spec(
    return_type = 'GDBusPropertyInfo *',
    parameters = [
      Param(
        type = 'GDBusPropertyInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_arg_info_ref': Spec(
    return_type = 'GDBusArgInfo *',
    parameters = [
      Param(
        type = 'GDBusArgInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_annotation_info_ref': Spec(
    return_type = 'GDBusAnnotationInfo *',
    parameters = [
      Param(
        type = 'GDBusAnnotationInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_node_info_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusNodeInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_interface_info_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_method_info_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMethodInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_signal_info_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusSignalInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_property_info_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusPropertyInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_arg_info_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusArgInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_annotation_info_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusAnnotationInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_node_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_interface_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_method_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_signal_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_property_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_arg_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_annotation_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_message_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_message_new': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
    ],
  ),
  'g_dbus_message_new_signal': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_',
      ),
      Param(
        type = 'const gchar *',
        name = 'signal',
      ),
    ],
  ),
  'g_dbus_message_new_method_call': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_',
      ),
      Param(
        type = 'const gchar *',
        name = 'method',
      ),
    ],
  ),
  'g_dbus_message_new_method_reply': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'method_call_message',
      ),
    ],
  ),
  'g_dbus_message_new_method_error': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'method_call_message',
      ),
      Param(
        type = 'const gchar *',
        name = 'error_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'error_message_format',
      ),
    ],
  ),
  'g_dbus_message_new_method_error_valist': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'method_call_message',
      ),
      Param(
        type = 'const gchar *',
        name = 'error_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'error_message_format',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'g_dbus_message_new_method_error_literal': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'method_call_message',
      ),
      Param(
        type = 'const gchar *',
        name = 'error_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'error_message',
      ),
    ],
  ),
  'g_dbus_message_print': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'guint',
        name = 'indent',
      ),
    ],
  ),
  'g_dbus_message_get_locked': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_lock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_copy': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_message_get_byte_order': Spec(
    return_type = 'GDBusMessageByteOrder',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_byte_order': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GDBusMessageByteOrder',
        name = 'byte_order',
      ),
    ],
  ),
  'g_dbus_message_get_message_type': Spec(
    return_type = 'GDBusMessageType',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_message_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GDBusMessageType',
        name = 'type',
      ),
    ],
  ),
  'g_dbus_message_get_flags': Spec(
    return_type = 'GDBusMessageFlags',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GDBusMessageFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_dbus_message_get_serial': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_serial': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'guint32',
        name = 'serial',
      ),
    ],
  ),
  'g_dbus_message_get_header': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GDBusMessageHeaderField',
        name = 'header_field',
      ),
    ],
  ),
  'g_dbus_message_set_header': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GDBusMessageHeaderField',
        name = 'header_field',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_dbus_message_get_header_fields': Spec(
    return_type = 'guchar *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_get_body': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_body': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GVariant *',
        name = 'body',
      ),
    ],
  ),
  'g_dbus_message_get_unix_fd_list': Spec(
    return_type = 'GUnixFDList *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_unix_fd_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GUnixFDList *',
        name = 'fd_list',
      ),
    ],
  ),
  'g_dbus_message_get_reply_serial': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_reply_serial': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'guint32',
        name = 'value',
      ),
    ],
  ),
  'g_dbus_message_get_interface': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_interface': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'g_dbus_message_get_member': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_member': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'g_dbus_message_get_path': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'g_dbus_message_get_sender': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_sender': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'g_dbus_message_get_destination': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_destination': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'g_dbus_message_get_error_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_error_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'g_dbus_message_get_signature': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_signature': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'g_dbus_message_get_num_unix_fds': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_num_unix_fds': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'guint32',
        name = 'value',
      ),
    ],
  ),
  'g_dbus_message_get_arg0': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_new_from_blob': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
      Param(
        type = 'guchar *',
        name = 'blob',
      ),
      Param(
        type = 'gsize',
        name = 'blob_len',
      ),
      Param(
        type = 'GDBusCapabilityFlags',
        name = 'capabilities',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_message_bytes_needed': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'guchar *',
        name = 'blob',
      ),
      Param(
        type = 'gsize',
        name = 'blob_len',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_message_to_blob': Spec(
    return_type = 'guchar *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'gsize *',
        name = 'out_size',
      ),
      Param(
        type = 'GDBusCapabilityFlags',
        name = 'capabilities',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_message_to_gerror': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_method_invocation_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_method_invocation_get_sender': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
    ],
  ),
  'g_dbus_method_invocation_get_object_path': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
    ],
  ),
  'g_dbus_method_invocation_get_interface_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
    ],
  ),
  'g_dbus_method_invocation_get_method_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
    ],
  ),
  'g_dbus_method_invocation_get_method_info': Spec(
    return_type = 'const GDBusMethodInfo *',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
    ],
  ),
  'g_dbus_method_invocation_get_connection': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
    ],
  ),
  'g_dbus_method_invocation_get_message': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
    ],
  ),
  'g_dbus_method_invocation_get_parameters': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
    ],
  ),
  'g_dbus_method_invocation_get_user_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
    ],
  ),
  'g_dbus_method_invocation_return_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameters',
      ),
    ],
  ),
  'g_dbus_method_invocation_return_value_with_unix_fd_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameters',
      ),
      Param(
        type = 'GUnixFDList *',
        name = 'fd_list',
      ),
    ],
  ),
  'g_dbus_method_invocation_return_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_dbus_method_invocation_return_error_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'g_dbus_method_invocation_return_error_literal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const gchar *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_method_invocation_return_gerror': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
      Param(
        type = 'const GError *',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_method_invocation_take_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
      Param(
        type = 'GError *',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_method_invocation_return_dbus_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
      Param(
        type = 'const gchar *',
        name = 'error_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'error_message',
      ),
    ],
  ),
  'g_bus_own_name': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GBusType',
        name = 'bus_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GBusNameOwnerFlags',
        name = 'flags',
      ),
      Param(
        type = 'GBusAcquiredCallback',
        name = 'bus_acquired_handler',
      ),
      Param(
        type = 'GBusNameAcquiredCallback',
        name = 'name_acquired_handler',
      ),
      Param(
        type = 'GBusNameLostCallback',
        name = 'name_lost_handler',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'user_data_free_func',
      ),
    ],
  ),
  'g_bus_own_name_on_connection': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GBusNameOwnerFlags',
        name = 'flags',
      ),
      Param(
        type = 'GBusNameAcquiredCallback',
        name = 'name_acquired_handler',
      ),
      Param(
        type = 'GBusNameLostCallback',
        name = 'name_lost_handler',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'user_data_free_func',
      ),
    ],
  ),
  'g_bus_own_name_with_closures': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GBusType',
        name = 'bus_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GBusNameOwnerFlags',
        name = 'flags',
      ),
      Param(
        type = 'GClosure *',
        name = 'bus_acquired_closure',
      ),
      Param(
        type = 'GClosure *',
        name = 'name_acquired_closure',
      ),
      Param(
        type = 'GClosure *',
        name = 'name_lost_closure',
      ),
    ],
  ),
  'g_bus_own_name_on_connection_with_closures': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GBusNameOwnerFlags',
        name = 'flags',
      ),
      Param(
        type = 'GClosure *',
        name = 'name_acquired_closure',
      ),
      Param(
        type = 'GClosure *',
        name = 'name_lost_closure',
      ),
    ],
  ),
  'g_bus_unown_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'owner_id',
      ),
    ],
  ),
  'g_bus_watch_name': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GBusType',
        name = 'bus_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GBusNameWatcherFlags',
        name = 'flags',
      ),
      Param(
        type = 'GBusNameAppearedCallback',
        name = 'name_appeared_handler',
      ),
      Param(
        type = 'GBusNameVanishedCallback',
        name = 'name_vanished_handler',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'user_data_free_func',
      ),
    ],
  ),
  'g_bus_watch_name_on_connection': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GBusNameWatcherFlags',
        name = 'flags',
      ),
      Param(
        type = 'GBusNameAppearedCallback',
        name = 'name_appeared_handler',
      ),
      Param(
        type = 'GBusNameVanishedCallback',
        name = 'name_vanished_handler',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'user_data_free_func',
      ),
    ],
  ),
  'g_bus_watch_name_with_closures': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GBusType',
        name = 'bus_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GBusNameWatcherFlags',
        name = 'flags',
      ),
      Param(
        type = 'GClosure *',
        name = 'name_appeared_closure',
      ),
      Param(
        type = 'GClosure *',
        name = 'name_vanished_closure',
      ),
    ],
  ),
  'g_bus_watch_name_on_connection_with_closures': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GBusNameWatcherFlags',
        name = 'flags',
      ),
      Param(
        type = 'GClosure *',
        name = 'name_appeared_closure',
      ),
      Param(
        type = 'GClosure *',
        name = 'name_vanished_closure',
      ),
    ],
  ),
  'g_bus_unwatch_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'watcher_id',
      ),
    ],
  ),
  'g_dbus_proxy_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_proxy_new': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GDBusProxyFlags',
        name = 'flags',
      ),
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_proxy_new_finish': Spec(
    return_type = 'GDBusProxy *',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_proxy_new_sync': Spec(
    return_type = 'GDBusProxy *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GDBusProxyFlags',
        name = 'flags',
      ),
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_proxy_new_for_bus': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBusType',
        name = 'bus_type',
      ),
      Param(
        type = 'GDBusProxyFlags',
        name = 'flags',
      ),
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_proxy_new_for_bus_finish': Spec(
    return_type = 'GDBusProxy *',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_proxy_new_for_bus_sync': Spec(
    return_type = 'GDBusProxy *',
    parameters = [
      Param(
        type = 'GBusType',
        name = 'bus_type',
      ),
      Param(
        type = 'GDBusProxyFlags',
        name = 'flags',
      ),
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_proxy_get_connection': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
    ],
  ),
  'g_dbus_proxy_get_flags': Spec(
    return_type = 'GDBusProxyFlags',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
    ],
  ),
  'g_dbus_proxy_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
    ],
  ),
  'g_dbus_proxy_get_name_owner': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
    ],
  ),
  'g_dbus_proxy_get_object_path': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
    ],
  ),
  'g_dbus_proxy_get_interface_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
    ],
  ),
  'g_dbus_proxy_get_default_timeout': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
    ],
  ),
  'g_dbus_proxy_set_default_timeout': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'gint',
        name = 'timeout_msec',
      ),
    ],
  ),
  'g_dbus_proxy_get_interface_info': Spec(
    return_type = 'GDBusInterfaceInfo *',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
    ],
  ),
  'g_dbus_proxy_set_interface_info': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_proxy_get_cached_property': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
    ],
  ),
  'g_dbus_proxy_set_cached_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_dbus_proxy_get_cached_property_names': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
    ],
  ),
  'g_dbus_proxy_call': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'const gchar *',
        name = 'method_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameters',
      ),
      Param(
        type = 'GDBusCallFlags',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'timeout_msec',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_proxy_call_finish': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_proxy_call_sync': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'const gchar *',
        name = 'method_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameters',
      ),
      Param(
        type = 'GDBusCallFlags',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'timeout_msec',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_proxy_call_with_unix_fd_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'const gchar *',
        name = 'method_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameters',
      ),
      Param(
        type = 'GDBusCallFlags',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'timeout_msec',
      ),
      Param(
        type = 'GUnixFDList *',
        name = 'fd_list',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_proxy_call_with_unix_fd_list_finish': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'GUnixFDList **',
        name = 'out_fd_list',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_proxy_call_with_unix_fd_list_sync': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'const gchar *',
        name = 'method_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameters',
      ),
      Param(
        type = 'GDBusCallFlags',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'timeout_msec',
      ),
      Param(
        type = 'GUnixFDList *',
        name = 'fd_list',
      ),
      Param(
        type = 'GUnixFDList **',
        name = 'out_fd_list',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_server_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_server_new_sync': Spec(
    return_type = 'GDBusServer *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'address',
      ),
      Param(
        type = 'GDBusServerFlags',
        name = 'flags',
      ),
      Param(
        type = 'const gchar *',
        name = 'guid',
      ),
      Param(
        type = 'GDBusAuthObserver *',
        name = 'observer',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_server_get_client_address': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusServer *',
        name = 'server',
      ),
    ],
  ),
  'g_dbus_server_get_guid': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusServer *',
        name = 'server',
      ),
    ],
  ),
  'g_dbus_server_get_flags': Spec(
    return_type = 'GDBusServerFlags',
    parameters = [
      Param(
        type = 'GDBusServer *',
        name = 'server',
      ),
    ],
  ),
  'g_dbus_server_start': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusServer *',
        name = 'server',
      ),
    ],
  ),
  'g_dbus_server_stop': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusServer *',
        name = 'server',
      ),
    ],
  ),
  'g_dbus_server_is_active': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusServer *',
        name = 'server',
      ),
    ],
  ),
  'g_dbus_is_guid': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_dbus_generate_guid': Spec(
    return_type = 'gchar *',
    parameters = [
    ],
  ),
  'g_dbus_is_name': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_dbus_is_unique_name': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_dbus_is_member_name': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_dbus_is_interface_name': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_dbus_gvariant_to_gvalue': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'GValue *',
        name = 'out_gvalue',
      ),
    ],
  ),
  'g_dbus_gvalue_to_gvariant': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'gvalue',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_drive_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_drive_get_name': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_get_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_get_symbolic_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_has_volumes': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_get_volumes': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_is_media_removable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_has_media': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_is_media_check_automatic': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_can_poll_for_media': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_can_eject': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_eject': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_drive_eject_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_drive_poll_for_media': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_drive_poll_for_media_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_drive_get_identifier': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
      Param(
        type = 'const char *',
        name = 'kind',
      ),
    ],
  ),
  'g_drive_enumerate_identifiers': Spec(
    return_type = 'char **',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_get_start_stop_type': Spec(
    return_type = 'GDriveStartStopType',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_can_start': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_can_start_degraded': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_start': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
      Param(
        type = 'GDriveStartFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_drive_start_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_drive_can_stop': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_stop': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_drive_stop_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_drive_eject_with_operation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_drive_eject_with_operation_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_drive_get_sort_key': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_icon_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_icon_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'icon',
      ),
    ],
  ),
  'g_icon_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GIcon *',
        name = 'icon1',
      ),
      Param(
        type = 'GIcon *',
        name = 'icon2',
      ),
    ],
  ),
  'g_icon_to_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
    ],
  ),
  'g_icon_new_for_string': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_emblem_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_emblem_new': Spec(
    return_type = 'GEmblem *',
    parameters = [
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
    ],
  ),
  'g_emblem_new_with_origin': Spec(
    return_type = 'GEmblem *',
    parameters = [
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
      Param(
        type = 'GEmblemOrigin',
        name = 'origin',
      ),
    ],
  ),
  'g_emblem_get_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GEmblem *',
        name = 'emblem',
      ),
    ],
  ),
  'g_emblem_get_origin': Spec(
    return_type = 'GEmblemOrigin',
    parameters = [
      Param(
        type = 'GEmblem *',
        name = 'emblem',
      ),
    ],
  ),
  'g_emblemed_icon_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_emblemed_icon_new': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
      Param(
        type = 'GEmblem *',
        name = 'emblem',
      ),
    ],
  ),
  'g_emblemed_icon_get_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GEmblemedIcon *',
        name = 'emblemed',
      ),
    ],
  ),
  'g_emblemed_icon_get_emblems': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GEmblemedIcon *',
        name = 'emblemed',
      ),
    ],
  ),
  'g_emblemed_icon_add_emblem': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GEmblemedIcon *',
        name = 'emblemed',
      ),
      Param(
        type = 'GEmblem *',
        name = 'emblem',
      ),
    ],
  ),
  'g_emblemed_icon_clear_emblems': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GEmblemedIcon *',
        name = 'emblemed',
      ),
    ],
  ),
  'g_file_attribute_info_list_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_attribute_info_list_new': Spec(
    return_type = 'GFileAttributeInfoList *',
    parameters = [
    ],
  ),
  'g_file_attribute_info_list_ref': Spec(
    return_type = 'GFileAttributeInfoList *',
    parameters = [
      Param(
        type = 'GFileAttributeInfoList *',
        name = 'list',
      ),
    ],
  ),
  'g_file_attribute_info_list_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileAttributeInfoList *',
        name = 'list',
      ),
    ],
  ),
  'g_file_attribute_info_list_dup': Spec(
    return_type = 'GFileAttributeInfoList *',
    parameters = [
      Param(
        type = 'GFileAttributeInfoList *',
        name = 'list',
      ),
    ],
  ),
  'g_file_attribute_info_list_lookup': Spec(
    return_type = 'const GFileAttributeInfo *',
    parameters = [
      Param(
        type = 'GFileAttributeInfoList *',
        name = 'list',
      ),
      Param(
        type = 'const char *',
        name = 'name',
      ),
    ],
  ),
  'g_file_attribute_info_list_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileAttributeInfoList *',
        name = 'list',
      ),
      Param(
        type = 'const char *',
        name = 'name',
      ),
      Param(
        type = 'GFileAttributeType',
        name = 'type',
      ),
      Param(
        type = 'GFileAttributeInfoFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_file_enumerator_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_enumerator_next_file': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFileEnumerator *',
        name = 'enumerator',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_enumerator_close': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileEnumerator *',
        name = 'enumerator',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_enumerator_next_files_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileEnumerator *',
        name = 'enumerator',
      ),
      Param(
        type = 'int',
        name = 'num_files',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_enumerator_next_files_finish': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GFileEnumerator *',
        name = 'enumerator',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_enumerator_close_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileEnumerator *',
        name = 'enumerator',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_enumerator_close_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileEnumerator *',
        name = 'enumerator',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_enumerator_is_closed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileEnumerator *',
        name = 'enumerator',
      ),
    ],
  ),
  'g_file_enumerator_has_pending': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileEnumerator *',
        name = 'enumerator',
      ),
    ],
  ),
  'g_file_enumerator_set_pending': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileEnumerator *',
        name = 'enumerator',
      ),
      Param(
        type = 'gboolean',
        name = 'pending',
      ),
    ],
  ),
  'g_file_enumerator_get_container': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GFileEnumerator *',
        name = 'enumerator',
      ),
    ],
  ),
  'g_file_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_new_for_path': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'path',
      ),
    ],
  ),
  'g_file_new_for_uri': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'uri',
      ),
    ],
  ),
  'g_file_new_for_commandline_arg': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'arg',
      ),
    ],
  ),
  'g_file_new_tmp': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'tmpl',
      ),
      Param(
        type = 'GFileIOStream **',
        name = 'iostream',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_parse_name': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'parse_name',
      ),
    ],
  ),
  'g_file_dup': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
    ],
  ),
  'g_file_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'file',
      ),
    ],
  ),
  'g_file_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file1',
      ),
      Param(
        type = 'GFile *',
        name = 'file2',
      ),
    ],
  ),
  'g_file_get_basename': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
    ],
  ),
  'g_file_get_path': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
    ],
  ),
  'g_file_get_uri': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
    ],
  ),
  'g_file_get_parse_name': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
    ],
  ),
  'g_file_get_parent': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
    ],
  ),
  'g_file_has_parent': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFile *',
        name = 'parent',
      ),
    ],
  ),
  'g_file_get_child': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'name',
      ),
    ],
  ),
  'g_file_get_child_for_display_name': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'display_name',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_has_prefix': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFile *',
        name = 'prefix',
      ),
    ],
  ),
  'g_file_get_relative_path': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'parent',
      ),
      Param(
        type = 'GFile *',
        name = 'descendant',
      ),
    ],
  ),
  'g_file_resolve_relative_path': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'relative_path',
      ),
    ],
  ),
  'g_file_is_native': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
    ],
  ),
  'g_file_has_uri_scheme': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'uri_scheme',
      ),
    ],
  ),
  'g_file_get_uri_scheme': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
    ],
  ),
  'g_file_read': Spec(
    return_type = 'GFileInputStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_read_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_read_finish': Spec(
    return_type = 'GFileInputStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_append_to': Spec(
    return_type = 'GFileOutputStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_create': Spec(
    return_type = 'GFileOutputStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_replace': Spec(
    return_type = 'GFileOutputStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'etag',
      ),
      Param(
        type = 'gboolean',
        name = 'make_backup',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_append_to_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_append_to_finish': Spec(
    return_type = 'GFileOutputStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_create_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_create_finish': Spec(
    return_type = 'GFileOutputStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_replace_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'etag',
      ),
      Param(
        type = 'gboolean',
        name = 'make_backup',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_replace_finish': Spec(
    return_type = 'GFileOutputStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_open_readwrite': Spec(
    return_type = 'GFileIOStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_open_readwrite_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_open_readwrite_finish': Spec(
    return_type = 'GFileIOStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_create_readwrite': Spec(
    return_type = 'GFileIOStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_create_readwrite_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_create_readwrite_finish': Spec(
    return_type = 'GFileIOStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_replace_readwrite': Spec(
    return_type = 'GFileIOStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'etag',
      ),
      Param(
        type = 'gboolean',
        name = 'make_backup',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_replace_readwrite_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'etag',
      ),
      Param(
        type = 'gboolean',
        name = 'make_backup',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_replace_readwrite_finish': Spec(
    return_type = 'GFileIOStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_query_exists': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_file_query_file_type': Spec(
    return_type = 'GFileType',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_file_query_info': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_query_info_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_query_info_finish': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_query_filesystem_info': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_query_filesystem_info_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_query_filesystem_info_finish': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_find_enclosing_mount': Spec(
    return_type = 'GMount *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_find_enclosing_mount_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_find_enclosing_mount_finish': Spec(
    return_type = 'GMount *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_enumerate_children': Spec(
    return_type = 'GFileEnumerator *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_enumerate_children_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_enumerate_children_finish': Spec(
    return_type = 'GFileEnumerator *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_display_name': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'display_name',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_display_name_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'display_name',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_set_display_name_finish': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_delete': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_delete_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_delete_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_trash': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_copy': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'source',
      ),
      Param(
        type = 'GFile *',
        name = 'destination',
      ),
      Param(
        type = 'GFileCopyFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GFileProgressCallback',
        name = 'progress_callback',
      ),
      Param(
        type = 'gpointer',
        name = 'progress_callback_data',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_copy_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'source',
      ),
      Param(
        type = 'GFile *',
        name = 'destination',
      ),
      Param(
        type = 'GFileCopyFlags',
        name = 'flags',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GFileProgressCallback',
        name = 'progress_callback',
      ),
      Param(
        type = 'gpointer',
        name = 'progress_callback_data',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_copy_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_move': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'source',
      ),
      Param(
        type = 'GFile *',
        name = 'destination',
      ),
      Param(
        type = 'GFileCopyFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GFileProgressCallback',
        name = 'progress_callback',
      ),
      Param(
        type = 'gpointer',
        name = 'progress_callback_data',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_make_directory': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_make_directory_with_parents': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_make_symbolic_link': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'symlink_value',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_query_settable_attributes': Spec(
    return_type = 'GFileAttributeInfoList *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_query_writable_namespaces': Spec(
    return_type = 'GFileAttributeInfoList *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_attribute': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'GFileAttributeType',
        name = 'type',
      ),
      Param(
        type = 'gpointer',
        name = 'value_p',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_attributes_from_info': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_attributes_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_set_attributes_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GFileInfo **',
        name = 'info',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_attribute_string': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'const char *',
        name = 'value',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_attribute_byte_string': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'const char *',
        name = 'value',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_attribute_uint32': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'guint32',
        name = 'value',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_attribute_int32': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'gint32',
        name = 'value',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_attribute_uint64': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'guint64',
        name = 'value',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_attribute_int64': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'gint64',
        name = 'value',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_mount_enclosing_volume': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'location',
      ),
      Param(
        type = 'GMountMountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_mount_enclosing_volume_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'location',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_mount_mountable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GMountMountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_mount_mountable_finish': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_unmount_mountable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_unmount_mountable_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_unmount_mountable_with_operation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_unmount_mountable_with_operation_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_eject_mountable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_eject_mountable_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_eject_mountable_with_operation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_eject_mountable_with_operation_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_copy_attributes': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'source',
      ),
      Param(
        type = 'GFile *',
        name = 'destination',
      ),
      Param(
        type = 'GFileCopyFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_monitor_directory': Spec(
    return_type = 'GFileMonitor *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileMonitorFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_monitor_file': Spec(
    return_type = 'GFileMonitor *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileMonitorFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_monitor': Spec(
    return_type = 'GFileMonitor *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileMonitorFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_start_mountable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GDriveStartFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'start_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_start_mountable_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_stop_mountable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_stop_mountable_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_poll_mountable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_poll_mountable_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_query_default_handler': Spec(
    return_type = 'GAppInfo *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_load_contents': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'char **',
        name = 'contents',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'char **',
        name = 'etag_out',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_load_contents_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_load_contents_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'char **',
        name = 'contents',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'char **',
        name = 'etag_out',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_load_partial_contents_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GFileReadMoreCallback',
        name = 'read_more_callback',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_load_partial_contents_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'char **',
        name = 'contents',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'char **',
        name = 'etag_out',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_replace_contents': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'contents',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
      Param(
        type = 'const char *',
        name = 'etag',
      ),
      Param(
        type = 'gboolean',
        name = 'make_backup',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'char **',
        name = 'new_etag',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_replace_contents_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'contents',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
      Param(
        type = 'const char *',
        name = 'etag',
      ),
      Param(
        type = 'gboolean',
        name = 'make_backup',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_replace_contents_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'char **',
        name = 'new_etag',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_supports_thread_contexts': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
    ],
  ),
  'g_file_icon_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_icon_new': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
    ],
  ),
  'g_file_icon_get_file': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GFileIcon *',
        name = 'icon',
      ),
    ],
  ),
  'g_file_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_info_new': Spec(
    return_type = 'GFileInfo *',
    parameters = [
    ],
  ),
  'g_file_info_dup': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'other',
      ),
    ],
  ),
  'g_file_info_copy_into': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'src_info',
      ),
      Param(
        type = 'GFileInfo *',
        name = 'dest_info',
      ),
    ],
  ),
  'g_file_info_has_attribute': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_has_namespace': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'name_space',
      ),
    ],
  ),
  'g_file_info_list_attributes': Spec(
    return_type = 'char **',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'name_space',
      ),
    ],
  ),
  'g_file_info_get_attribute_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'GFileAttributeType *',
        name = 'type',
      ),
      Param(
        type = 'gpointer *',
        name = 'value_pp',
      ),
      Param(
        type = 'GFileAttributeStatus *',
        name = 'status',
      ),
    ],
  ),
  'g_file_info_get_attribute_type': Spec(
    return_type = 'GFileAttributeType',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_remove_attribute': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_get_attribute_status': Spec(
    return_type = 'GFileAttributeStatus',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_set_attribute_status': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'GFileAttributeStatus',
        name = 'status',
      ),
    ],
  ),
  'g_file_info_get_attribute_as_string': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_get_attribute_string': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_get_attribute_byte_string': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_get_attribute_boolean': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_get_attribute_uint32': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_get_attribute_int32': Spec(
    return_type = 'gint32',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_get_attribute_uint64': Spec(
    return_type = 'guint64',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_get_attribute_int64': Spec(
    return_type = 'gint64',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_get_attribute_object': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_get_attribute_stringv': Spec(
    return_type = 'char **',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_set_attribute': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'GFileAttributeType',
        name = 'type',
      ),
      Param(
        type = 'gpointer',
        name = 'value_p',
      ),
    ],
  ),
  'g_file_info_set_attribute_string': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'const char *',
        name = 'attr_value',
      ),
    ],
  ),
  'g_file_info_set_attribute_byte_string': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'const char *',
        name = 'attr_value',
      ),
    ],
  ),
  'g_file_info_set_attribute_boolean': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'gboolean',
        name = 'attr_value',
      ),
    ],
  ),
  'g_file_info_set_attribute_uint32': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'guint32',
        name = 'attr_value',
      ),
    ],
  ),
  'g_file_info_set_attribute_int32': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'gint32',
        name = 'attr_value',
      ),
    ],
  ),
  'g_file_info_set_attribute_uint64': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'guint64',
        name = 'attr_value',
      ),
    ],
  ),
  'g_file_info_set_attribute_int64': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'gint64',
        name = 'attr_value',
      ),
    ],
  ),
  'g_file_info_set_attribute_object': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'GObject *',
        name = 'attr_value',
      ),
    ],
  ),
  'g_file_info_set_attribute_stringv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'char **',
        name = 'attr_value',
      ),
    ],
  ),
  'g_file_info_clear_status': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_file_type': Spec(
    return_type = 'GFileType',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_is_hidden': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_is_backup': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_is_symlink': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_display_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_edit_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_symbolic_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_content_type': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_size': Spec(
    return_type = 'goffset',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_modification_time': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'GTimeVal *',
        name = 'result',
      ),
    ],
  ),
  'g_file_info_get_symlink_target': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_etag': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_sort_order': Spec(
    return_type = 'gint32',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_set_attribute_mask': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'GFileAttributeMatcher *',
        name = 'mask',
      ),
    ],
  ),
  'g_file_info_unset_attribute_mask': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_set_file_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'GFileType',
        name = 'type',
      ),
    ],
  ),
  'g_file_info_set_is_hidden': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'gboolean',
        name = 'is_hidden',
      ),
    ],
  ),
  'g_file_info_set_is_symlink': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'gboolean',
        name = 'is_symlink',
      ),
    ],
  ),
  'g_file_info_set_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'name',
      ),
    ],
  ),
  'g_file_info_set_display_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'display_name',
      ),
    ],
  ),
  'g_file_info_set_edit_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'edit_name',
      ),
    ],
  ),
  'g_file_info_set_icon': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
    ],
  ),
  'g_file_info_set_symbolic_icon': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
    ],
  ),
  'g_file_info_set_content_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'content_type',
      ),
    ],
  ),
  'g_file_info_set_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'goffset',
        name = 'size',
      ),
    ],
  ),
  'g_file_info_set_modification_time': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'GTimeVal *',
        name = 'mtime',
      ),
    ],
  ),
  'g_file_info_set_symlink_target': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'symlink_target',
      ),
    ],
  ),
  'g_file_info_set_sort_order': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'gint32',
        name = 'sort_order',
      ),
    ],
  ),
  'g_file_attribute_matcher_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_attribute_matcher_new': Spec(
    return_type = 'GFileAttributeMatcher *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
    ],
  ),
  'g_file_attribute_matcher_ref': Spec(
    return_type = 'GFileAttributeMatcher *',
    parameters = [
      Param(
        type = 'GFileAttributeMatcher *',
        name = 'matcher',
      ),
    ],
  ),
  'g_file_attribute_matcher_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileAttributeMatcher *',
        name = 'matcher',
      ),
    ],
  ),
  'g_file_attribute_matcher_subtract': Spec(
    return_type = 'GFileAttributeMatcher *',
    parameters = [
      Param(
        type = 'GFileAttributeMatcher *',
        name = 'matcher',
      ),
      Param(
        type = 'GFileAttributeMatcher *',
        name = 'subtract',
      ),
    ],
  ),
  'g_file_attribute_matcher_matches': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileAttributeMatcher *',
        name = 'matcher',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_attribute_matcher_matches_only': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileAttributeMatcher *',
        name = 'matcher',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_attribute_matcher_enumerate_namespace': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileAttributeMatcher *',
        name = 'matcher',
      ),
      Param(
        type = 'const char *',
        name = 'ns',
      ),
    ],
  ),
  'g_file_attribute_matcher_enumerate_next': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GFileAttributeMatcher *',
        name = 'matcher',
      ),
    ],
  ),
  'g_file_attribute_matcher_to_string': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GFileAttributeMatcher *',
        name = 'matcher',
      ),
    ],
  ),
  'g_file_input_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_input_stream_query_info': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFileInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_input_stream_query_info_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_input_stream_query_info_finish': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFileInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_io_error_from_errno': Spec(
    return_type = 'GIOErrorEnum',
    parameters = [
      Param(
        type = 'gint',
        name = 'err_no',
      ),
    ],
  ),
  'g_io_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_io_stream_get_input_stream': Spec(
    return_type = 'GInputStream *',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_io_stream_get_output_stream': Spec(
    return_type = 'GOutputStream *',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_io_stream_splice_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream1',
      ),
      Param(
        type = 'GIOStream *',
        name = 'stream2',
      ),
      Param(
        type = 'GIOStreamSpliceFlags',
        name = 'flags',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_io_stream_splice_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_stream_close': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_stream_close_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_io_stream_close_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_stream_is_closed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_io_stream_has_pending': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_io_stream_set_pending': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_stream_clear_pending': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_file_io_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_io_stream_query_info': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFileIOStream *',
        name = 'stream',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_io_stream_query_info_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileIOStream *',
        name = 'stream',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_io_stream_query_info_finish': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFileIOStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_io_stream_get_etag': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GFileIOStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_file_monitor_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_monitor_cancel': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileMonitor *',
        name = 'monitor',
      ),
    ],
  ),
  'g_file_monitor_is_cancelled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileMonitor *',
        name = 'monitor',
      ),
    ],
  ),
  'g_file_monitor_set_rate_limit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileMonitor *',
        name = 'monitor',
      ),
      Param(
        type = 'gint',
        name = 'limit_msecs',
      ),
    ],
  ),
  'g_file_monitor_emit_event': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileMonitor *',
        name = 'monitor',
      ),
      Param(
        type = 'GFile *',
        name = 'child',
      ),
      Param(
        type = 'GFile *',
        name = 'other_file',
      ),
      Param(
        type = 'GFileMonitorEvent',
        name = 'event_type',
      ),
    ],
  ),
  'g_filename_completer_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_filename_completer_new': Spec(
    return_type = 'GFilenameCompleter *',
    parameters = [
    ],
  ),
  'g_filename_completer_get_completion_suffix': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GFilenameCompleter *',
        name = 'completer',
      ),
      Param(
        type = 'const char *',
        name = 'initial_text',
      ),
    ],
  ),
  'g_filename_completer_get_completions': Spec(
    return_type = 'char **',
    parameters = [
      Param(
        type = 'GFilenameCompleter *',
        name = 'completer',
      ),
      Param(
        type = 'const char *',
        name = 'initial_text',
      ),
    ],
  ),
  'g_filename_completer_set_dirs_only': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFilenameCompleter *',
        name = 'completer',
      ),
      Param(
        type = 'gboolean',
        name = 'dirs_only',
      ),
    ],
  ),
  'g_file_output_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_output_stream_query_info': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFileOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_output_stream_query_info_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_output_stream_query_info_finish': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFileOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_output_stream_get_etag': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GFileOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_inet_address_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_inet_address_new_from_string': Spec(
    return_type = 'GInetAddress *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_inet_address_new_from_bytes': Spec(
    return_type = 'GInetAddress *',
    parameters = [
      Param(
        type = 'const guint8 *',
        name = 'bytes',
      ),
      Param(
        type = 'GSocketFamily',
        name = 'family',
      ),
    ],
  ),
  'g_inet_address_new_loopback': Spec(
    return_type = 'GInetAddress *',
    parameters = [
      Param(
        type = 'GSocketFamily',
        name = 'family',
      ),
    ],
  ),
  'g_inet_address_new_any': Spec(
    return_type = 'GInetAddress *',
    parameters = [
      Param(
        type = 'GSocketFamily',
        name = 'family',
      ),
    ],
  ),
  'g_inet_address_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
      Param(
        type = 'GInetAddress *',
        name = 'other_address',
      ),
    ],
  ),
  'g_inet_address_to_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_to_bytes': Spec(
    return_type = 'const guint8 *',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_native_size': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_family': Spec(
    return_type = 'GSocketFamily',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_is_any': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_is_loopback': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_is_link_local': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_is_site_local': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_is_multicast': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_is_mc_global': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_is_mc_link_local': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_is_mc_node_local': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_is_mc_org_local': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_is_mc_site_local': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_mask_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_inet_address_mask_new': Spec(
    return_type = 'GInetAddressMask *',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'addr',
      ),
      Param(
        type = 'guint',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_inet_address_mask_new_from_string': Spec(
    return_type = 'GInetAddressMask *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'mask_string',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_inet_address_mask_to_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GInetAddressMask *',
        name = 'mask',
      ),
    ],
  ),
  'g_inet_address_mask_get_family': Spec(
    return_type = 'GSocketFamily',
    parameters = [
      Param(
        type = 'GInetAddressMask *',
        name = 'mask',
      ),
    ],
  ),
  'g_inet_address_mask_get_address': Spec(
    return_type = 'GInetAddress *',
    parameters = [
      Param(
        type = 'GInetAddressMask *',
        name = 'mask',
      ),
    ],
  ),
  'g_inet_address_mask_get_length': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GInetAddressMask *',
        name = 'mask',
      ),
    ],
  ),
  'g_inet_address_mask_matches': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddressMask *',
        name = 'mask',
      ),
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_mask_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddressMask *',
        name = 'mask',
      ),
      Param(
        type = 'GInetAddressMask *',
        name = 'mask2',
      ),
    ],
  ),
  'g_socket_address_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_address_get_family': Spec(
    return_type = 'GSocketFamily',
    parameters = [
      Param(
        type = 'GSocketAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_socket_address_new_from_native': Spec(
    return_type = 'GSocketAddress *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'native',
      ),
      Param(
        type = 'gsize',
        name = 'len',
      ),
    ],
  ),
  'g_socket_address_to_native': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocketAddress *',
        name = 'address',
      ),
      Param(
        type = 'gpointer',
        name = 'dest',
      ),
      Param(
        type = 'gsize',
        name = 'destlen',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_address_get_native_size': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GSocketAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_socket_address_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_inet_socket_address_new': Spec(
    return_type = 'GSocketAddress *',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
      Param(
        type = 'guint16',
        name = 'port',
      ),
    ],
  ),
  'g_inet_socket_address_get_address': Spec(
    return_type = 'GInetAddress *',
    parameters = [
      Param(
        type = 'GInetSocketAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_socket_address_get_port': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GInetSocketAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_socket_address_get_flowinfo': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GInetSocketAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_socket_address_get_scope_id': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GInetSocketAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_app_info_create_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_converter_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_converter_result_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_data_stream_byte_order_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_data_stream_newline_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_attribute_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_attribute_info_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_attribute_status_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_query_info_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_create_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_mount_mount_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_mount_unmount_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_drive_start_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_drive_start_stop_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_copy_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_monitor_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_filesystem_preview_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_monitor_event_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_io_error_enum_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_ask_password_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_password_save_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_mount_operation_result_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_output_stream_splice_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_io_stream_splice_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_emblem_origin_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_resolver_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_resolver_record_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_resource_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_resource_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_resource_lookup_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_family_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_msg_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_protocol_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_zlib_compressor_format_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_unix_socket_address_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_bus_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_bus_name_owner_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_bus_name_watcher_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_proxy_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_connection_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_capability_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_call_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_message_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_message_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_message_header_field_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_property_info_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_subtree_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_server_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_signal_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_send_message_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_credentials_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_message_byte_order_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_application_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_certificate_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_authentication_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_rehandshake_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_password_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_interaction_result_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_interface_skeleton_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_object_manager_client_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_database_verify_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_database_lookup_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_io_module_scope_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_client_event_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_test_dbus_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_settings_bind_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_module_supported': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'g_module_open': Spec(
    return_type = 'GModule *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'file_name',
      ),
      Param(
        type = 'GModuleFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_module_close': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GModule *',
        name = 'module',
      ),
    ],
  ),
  'g_module_make_resident': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GModule *',
        name = 'module',
      ),
    ],
  ),
  'g_module_error': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'g_module_symbol': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GModule *',
        name = 'module',
      ),
      Param(
        type = 'const gchar *',
        name = 'symbol_name',
      ),
      Param(
        type = 'gpointer *',
        name = 'symbol',
      ),
    ],
  ),
  'g_module_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GModule *',
        name = 'module',
      ),
    ],
  ),
  'g_module_build_path': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'directory',
      ),
      Param(
        type = 'const gchar *',
        name = 'module_name',
      ),
    ],
  ),
  'g_io_module_scope_new': Spec(
    return_type = 'GIOModuleScope *',
    parameters = [
      Param(
        type = 'GIOModuleScopeFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_io_module_scope_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOModuleScope *',
        name = 'scope',
      ),
    ],
  ),
  'g_io_module_scope_block': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOModuleScope *',
        name = 'scope',
      ),
      Param(
        type = 'const gchar *',
        name = 'basename',
      ),
    ],
  ),
  'g_io_module_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_io_module_new': Spec(
    return_type = 'GIOModule *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
    ],
  ),
  'g_io_modules_scan_all_in_directory': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'dirname',
      ),
    ],
  ),
  'g_io_modules_load_all_in_directory': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'dirname',
      ),
    ],
  ),
  'g_io_modules_scan_all_in_directory_with_scope': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'dirname',
      ),
      Param(
        type = 'GIOModuleScope *',
        name = 'scope',
      ),
    ],
  ),
  'g_io_modules_load_all_in_directory_with_scope': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'dirname',
      ),
      Param(
        type = 'GIOModuleScope *',
        name = 'scope',
      ),
    ],
  ),
  'g_io_extension_point_register': Spec(
    return_type = 'GIOExtensionPoint *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'name',
      ),
    ],
  ),
  'g_io_extension_point_lookup': Spec(
    return_type = 'GIOExtensionPoint *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'name',
      ),
    ],
  ),
  'g_io_extension_point_set_required_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOExtensionPoint *',
        name = 'extension_point',
      ),
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_io_extension_point_get_required_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GIOExtensionPoint *',
        name = 'extension_point',
      ),
    ],
  ),
  'g_io_extension_point_get_extensions': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GIOExtensionPoint *',
        name = 'extension_point',
      ),
    ],
  ),
  'g_io_extension_point_get_extension_by_name': Spec(
    return_type = 'GIOExtension *',
    parameters = [
      Param(
        type = 'GIOExtensionPoint *',
        name = 'extension_point',
      ),
      Param(
        type = 'const char *',
        name = 'name',
      ),
    ],
  ),
  'g_io_extension_point_implement': Spec(
    return_type = 'GIOExtension *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'extension_point_name',
      ),
      Param(
        type = 'GType',
        name = 'type',
      ),
      Param(
        type = 'const char *',
        name = 'extension_name',
      ),
      Param(
        type = 'gint',
        name = 'priority',
      ),
    ],
  ),
  'g_io_extension_get_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GIOExtension *',
        name = 'extension',
      ),
    ],
  ),
  'g_io_extension_get_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GIOExtension *',
        name = 'extension',
      ),
    ],
  ),
  'g_io_extension_get_priority': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GIOExtension *',
        name = 'extension',
      ),
    ],
  ),
  'g_io_extension_ref_class': Spec(
    return_type = 'GTypeClass *',
    parameters = [
      Param(
        type = 'GIOExtension *',
        name = 'extension',
      ),
    ],
  ),
  'g_io_module_load': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOModule *',
        name = 'module',
      ),
    ],
  ),
  'g_io_module_unload': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOModule *',
        name = 'module',
      ),
    ],
  ),
  'g_io_module_query': Spec(
    return_type = 'char **',
    parameters = [
    ],
  ),
  'g_io_scheduler_push_job': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOSchedulerJobFunc',
        name = 'job_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
      Param(
        type = 'gint',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_io_scheduler_cancel_all_jobs': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_io_scheduler_job_send_to_mainloop': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GIOSchedulerJob *',
        name = 'job',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_io_scheduler_job_send_to_mainloop_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOSchedulerJob *',
        name = 'job',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_loadable_icon_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_loadable_icon_load': Spec(
    return_type = 'GInputStream *',
    parameters = [
      Param(
        type = 'GLoadableIcon *',
        name = 'icon',
      ),
      Param(
        type = 'int',
        name = 'size',
      ),
      Param(
        type = 'char **',
        name = 'type',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_loadable_icon_load_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLoadableIcon *',
        name = 'icon',
      ),
      Param(
        type = 'int',
        name = 'size',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_loadable_icon_load_finish': Spec(
    return_type = 'GInputStream *',
    parameters = [
      Param(
        type = 'GLoadableIcon *',
        name = 'icon',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'char **',
        name = 'type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_memory_input_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_memory_input_stream_new': Spec(
    return_type = 'GInputStream *',
    parameters = [
    ],
  ),
  'g_memory_input_stream_new_from_data': Spec(
    return_type = 'GInputStream *',
    parameters = [
      Param(
        type = 'const void *',
        name = 'data',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'g_memory_input_stream_new_from_bytes': Spec(
    return_type = 'GInputStream *',
    parameters = [
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
    ],
  ),
  'g_memory_input_stream_add_data': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMemoryInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const void *',
        name = 'data',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'g_memory_input_stream_add_bytes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMemoryInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
    ],
  ),
  'g_memory_output_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_memory_output_stream_new': Spec(
    return_type = 'GOutputStream *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
      Param(
        type = 'GReallocFunc',
        name = 'realloc_function',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy_function',
      ),
    ],
  ),
  'g_memory_output_stream_get_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GMemoryOutputStream *',
        name = 'ostream',
      ),
    ],
  ),
  'g_memory_output_stream_get_size': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GMemoryOutputStream *',
        name = 'ostream',
      ),
    ],
  ),
  'g_memory_output_stream_get_data_size': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GMemoryOutputStream *',
        name = 'ostream',
      ),
    ],
  ),
  'g_memory_output_stream_steal_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GMemoryOutputStream *',
        name = 'ostream',
      ),
    ],
  ),
  'g_memory_output_stream_steal_as_bytes': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'GMemoryOutputStream *',
        name = 'ostream',
      ),
    ],
  ),
  'g_mount_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_mount_get_root': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_get_default_location': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_get_name': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_get_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_get_symbolic_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_get_uuid': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_get_volume': Spec(
    return_type = 'GVolume *',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_get_drive': Spec(
    return_type = 'GDrive *',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_can_unmount': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_can_eject': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_unmount': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_mount_unmount_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_mount_eject': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_mount_eject_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_mount_remount': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'GMountMountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_mount_remount_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_mount_guess_content_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'gboolean',
        name = 'force_rescan',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_mount_guess_content_type_finish': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_mount_guess_content_type_sync': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'gboolean',
        name = 'force_rescan',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_mount_is_shadowed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_shadow': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_unshadow': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_unmount_with_operation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_mount_unmount_with_operation_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_mount_eject_with_operation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_mount_eject_with_operation_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_mount_get_sort_key': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_operation_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_mount_operation_new': Spec(
    return_type = 'GMountOperation *',
    parameters = [
    ],
  ),
  'g_mount_operation_get_username': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
    ],
  ),
  'g_mount_operation_set_username': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
      Param(
        type = 'const char *',
        name = 'username',
      ),
    ],
  ),
  'g_mount_operation_get_password': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
    ],
  ),
  'g_mount_operation_set_password': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
      Param(
        type = 'const char *',
        name = 'password',
      ),
    ],
  ),
  'g_mount_operation_get_anonymous': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
    ],
  ),
  'g_mount_operation_set_anonymous': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
      Param(
        type = 'gboolean',
        name = 'anonymous',
      ),
    ],
  ),
  'g_mount_operation_get_domain': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
    ],
  ),
  'g_mount_operation_set_domain': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
      Param(
        type = 'const char *',
        name = 'domain',
      ),
    ],
  ),
  'g_mount_operation_get_password_save': Spec(
    return_type = 'GPasswordSave',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
    ],
  ),
  'g_mount_operation_set_password_save': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
      Param(
        type = 'GPasswordSave',
        name = 'save',
      ),
    ],
  ),
  'g_mount_operation_get_choice': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
    ],
  ),
  'g_mount_operation_set_choice': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
      Param(
        type = 'int',
        name = 'choice',
      ),
    ],
  ),
  'g_mount_operation_reply': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
      Param(
        type = 'GMountOperationResult',
        name = 'result',
      ),
    ],
  ),
  'g_volume_monitor_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_volume_monitor_get': Spec(
    return_type = 'GVolumeMonitor *',
    parameters = [
    ],
  ),
  'g_volume_monitor_get_connected_drives': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GVolumeMonitor *',
        name = 'volume_monitor',
      ),
    ],
  ),
  'g_volume_monitor_get_volumes': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GVolumeMonitor *',
        name = 'volume_monitor',
      ),
    ],
  ),
  'g_volume_monitor_get_mounts': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GVolumeMonitor *',
        name = 'volume_monitor',
      ),
    ],
  ),
  'g_volume_monitor_get_volume_for_uuid': Spec(
    return_type = 'GVolume *',
    parameters = [
      Param(
        type = 'GVolumeMonitor *',
        name = 'volume_monitor',
      ),
      Param(
        type = 'const char *',
        name = 'uuid',
      ),
    ],
  ),
  'g_volume_monitor_get_mount_for_uuid': Spec(
    return_type = 'GMount *',
    parameters = [
      Param(
        type = 'GVolumeMonitor *',
        name = 'volume_monitor',
      ),
      Param(
        type = 'const char *',
        name = 'uuid',
      ),
    ],
  ),
  'g_volume_monitor_adopt_orphan_mount': Spec(
    return_type = 'GVolume *',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_native_volume_monitor_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_network_address_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_network_address_new': Spec(
    return_type = 'GSocketConnectable *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'hostname',
      ),
      Param(
        type = 'guint16',
        name = 'port',
      ),
    ],
  ),
  'g_network_address_parse': Spec(
    return_type = 'GSocketConnectable *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'host_and_port',
      ),
      Param(
        type = 'guint16',
        name = 'default_port',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_network_address_parse_uri': Spec(
    return_type = 'GSocketConnectable *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'guint16',
        name = 'default_port',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_network_address_get_hostname': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GNetworkAddress *',
        name = 'addr',
      ),
    ],
  ),
  'g_network_address_get_port': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GNetworkAddress *',
        name = 'addr',
      ),
    ],
  ),
  'g_network_address_get_scheme': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GNetworkAddress *',
        name = 'addr',
      ),
    ],
  ),
  'g_network_monitor_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_network_monitor_get_default': Spec(
    return_type = 'GNetworkMonitor *',
    parameters = [
    ],
  ),
  'g_network_monitor_get_network_available': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GNetworkMonitor *',
        name = 'monitor',
      ),
    ],
  ),
  'g_network_monitor_can_reach': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GNetworkMonitor *',
        name = 'monitor',
      ),
      Param(
        type = 'GSocketConnectable *',
        name = 'connectable',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_network_monitor_can_reach_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GNetworkMonitor *',
        name = 'monitor',
      ),
      Param(
        type = 'GSocketConnectable *',
        name = 'connectable',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_network_monitor_can_reach_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GNetworkMonitor *',
        name = 'monitor',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_network_service_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_network_service_new': Spec(
    return_type = 'GSocketConnectable *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'service',
      ),
      Param(
        type = 'const gchar *',
        name = 'protocol',
      ),
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
    ],
  ),
  'g_network_service_get_service': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GNetworkService *',
        name = 'srv',
      ),
    ],
  ),
  'g_network_service_get_protocol': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GNetworkService *',
        name = 'srv',
      ),
    ],
  ),
  'g_network_service_get_domain': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GNetworkService *',
        name = 'srv',
      ),
    ],
  ),
  'g_network_service_get_scheme': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GNetworkService *',
        name = 'srv',
      ),
    ],
  ),
  'g_network_service_set_scheme': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GNetworkService *',
        name = 'srv',
      ),
      Param(
        type = 'const gchar *',
        name = 'scheme',
      ),
    ],
  ),
  'g_permission_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_permission_acquire': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPermission *',
        name = 'permission',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_permission_acquire_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPermission *',
        name = 'permission',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_permission_acquire_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPermission *',
        name = 'permission',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_permission_release': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPermission *',
        name = 'permission',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_permission_release_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPermission *',
        name = 'permission',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_permission_release_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPermission *',
        name = 'permission',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_permission_get_allowed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPermission *',
        name = 'permission',
      ),
    ],
  ),
  'g_permission_get_can_acquire': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPermission *',
        name = 'permission',
      ),
    ],
  ),
  'g_permission_get_can_release': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPermission *',
        name = 'permission',
      ),
    ],
  ),
  'g_permission_impl_update': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPermission *',
        name = 'permission',
      ),
      Param(
        type = 'gboolean',
        name = 'allowed',
      ),
      Param(
        type = 'gboolean',
        name = 'can_acquire',
      ),
      Param(
        type = 'gboolean',
        name = 'can_release',
      ),
    ],
  ),
  'g_pollable_input_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_pollable_input_stream_can_poll': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPollableInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_pollable_input_stream_is_readable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPollableInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_pollable_input_stream_create_source': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GPollableInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_pollable_input_stream_read_nonblocking': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GPollableInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_pollable_output_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_pollable_output_stream_can_poll': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPollableOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_pollable_output_stream_is_writable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPollableOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_pollable_output_stream_create_source': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GPollableOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_pollable_output_stream_write_nonblocking': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GPollableOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_pollable_source_new': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'pollable_stream',
      ),
    ],
  ),
  'g_pollable_source_new_full': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'pollable_stream',
      ),
      Param(
        type = 'GSource *',
        name = 'child_source',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_pollable_stream_read': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'gboolean',
        name = 'blocking',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_pollable_stream_write': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'gboolean',
        name = 'blocking',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_pollable_stream_write_all': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'gboolean',
        name = 'blocking',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_proxy_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_proxy_get_default_for_protocol': Spec(
    return_type = 'GProxy *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'protocol',
      ),
    ],
  ),
  'g_proxy_connect': Spec(
    return_type = 'GIOStream *',
    parameters = [
      Param(
        type = 'GProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'GIOStream *',
        name = 'connection',
      ),
      Param(
        type = 'GProxyAddress *',
        name = 'proxy_address',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_proxy_connect_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'GIOStream *',
        name = 'connection',
      ),
      Param(
        type = 'GProxyAddress *',
        name = 'proxy_address',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_proxy_connect_finish': Spec(
    return_type = 'GIOStream *',
    parameters = [
      Param(
        type = 'GProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_proxy_supports_hostname': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GProxy *',
        name = 'proxy',
      ),
    ],
  ),
  'g_proxy_address_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_proxy_address_new': Spec(
    return_type = 'GSocketAddress *',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'inetaddr',
      ),
      Param(
        type = 'guint16',
        name = 'port',
      ),
      Param(
        type = 'const gchar *',
        name = 'protocol',
      ),
      Param(
        type = 'const gchar *',
        name = 'dest_hostname',
      ),
      Param(
        type = 'guint16',
        name = 'dest_port',
      ),
      Param(
        type = 'const gchar *',
        name = 'username',
      ),
      Param(
        type = 'const gchar *',
        name = 'password',
      ),
    ],
  ),
  'g_proxy_address_get_protocol': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GProxyAddress *',
        name = 'proxy',
      ),
    ],
  ),
  'g_proxy_address_get_destination_protocol': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GProxyAddress *',
        name = 'proxy',
      ),
    ],
  ),
  'g_proxy_address_get_destination_hostname': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GProxyAddress *',
        name = 'proxy',
      ),
    ],
  ),
  'g_proxy_address_get_destination_port': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GProxyAddress *',
        name = 'proxy',
      ),
    ],
  ),
  'g_proxy_address_get_username': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GProxyAddress *',
        name = 'proxy',
      ),
    ],
  ),
  'g_proxy_address_get_password': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GProxyAddress *',
        name = 'proxy',
      ),
    ],
  ),
  'g_proxy_address_get_uri': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GProxyAddress *',
        name = 'proxy',
      ),
    ],
  ),
  'g_socket_address_enumerator_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_address_enumerator_next': Spec(
    return_type = 'GSocketAddress *',
    parameters = [
      Param(
        type = 'GSocketAddressEnumerator *',
        name = 'enumerator',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_address_enumerator_next_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketAddressEnumerator *',
        name = 'enumerator',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_socket_address_enumerator_next_finish': Spec(
    return_type = 'GSocketAddress *',
    parameters = [
      Param(
        type = 'GSocketAddressEnumerator *',
        name = 'enumerator',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_proxy_address_enumerator_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_proxy_resolver_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_proxy_resolver_get_default': Spec(
    return_type = 'GProxyResolver *',
    parameters = [
    ],
  ),
  'g_proxy_resolver_is_supported': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GProxyResolver *',
        name = 'resolver',
      ),
    ],
  ),
  'g_proxy_resolver_lookup': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GProxyResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_proxy_resolver_lookup_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GProxyResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_proxy_resolver_lookup_finish': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GProxyResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resolver_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_resolver_get_default': Spec(
    return_type = 'GResolver *',
    parameters = [
    ],
  ),
  'g_resolver_set_default': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
    ],
  ),
  'g_resolver_lookup_by_name': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'const gchar *',
        name = 'hostname',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resolver_lookup_by_name_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'const gchar *',
        name = 'hostname',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_resolver_lookup_by_name_finish': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resolver_free_addresses': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GList *',
        name = 'addresses',
      ),
    ],
  ),
  'g_resolver_lookup_by_address': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resolver_lookup_by_address_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_resolver_lookup_by_address_finish': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resolver_lookup_service': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'const gchar *',
        name = 'service',
      ),
      Param(
        type = 'const gchar *',
        name = 'protocol',
      ),
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resolver_lookup_service_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'const gchar *',
        name = 'service',
      ),
      Param(
        type = 'const gchar *',
        name = 'protocol',
      ),
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_resolver_lookup_service_finish': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resolver_lookup_records': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'const gchar *',
        name = 'rrname',
      ),
      Param(
        type = 'GResolverRecordType',
        name = 'record_type',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resolver_lookup_records_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'const gchar *',
        name = 'rrname',
      ),
      Param(
        type = 'GResolverRecordType',
        name = 'record_type',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_resolver_lookup_records_finish': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resolver_free_targets': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GList *',
        name = 'targets',
      ),
    ],
  ),
  'g_resolver_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_resource_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_resource_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_resource_new_from_data': Spec(
    return_type = 'GResource *',
    parameters = [
      Param(
        type = 'GBytes *',
        name = 'data',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resource_ref': Spec(
    return_type = 'GResource *',
    parameters = [
      Param(
        type = 'GResource *',
        name = 'resource',
      ),
    ],
  ),
  'g_resource_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GResource *',
        name = 'resource',
      ),
    ],
  ),
  'g_resource_load': Spec(
    return_type = 'GResource *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resource_open_stream': Spec(
    return_type = 'GInputStream *',
    parameters = [
      Param(
        type = 'GResource *',
        name = 'resource',
      ),
      Param(
        type = 'const char *',
        name = 'path',
      ),
      Param(
        type = 'GResourceLookupFlags',
        name = 'lookup_flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resource_lookup_data': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'GResource *',
        name = 'resource',
      ),
      Param(
        type = 'const char *',
        name = 'path',
      ),
      Param(
        type = 'GResourceLookupFlags',
        name = 'lookup_flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resource_enumerate_children': Spec(
    return_type = 'char **',
    parameters = [
      Param(
        type = 'GResource *',
        name = 'resource',
      ),
      Param(
        type = 'const char *',
        name = 'path',
      ),
      Param(
        type = 'GResourceLookupFlags',
        name = 'lookup_flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resource_get_info': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GResource *',
        name = 'resource',
      ),
      Param(
        type = 'const char *',
        name = 'path',
      ),
      Param(
        type = 'GResourceLookupFlags',
        name = 'lookup_flags',
      ),
      Param(
        type = 'gsize *',
        name = 'size',
      ),
      Param(
        type = 'guint32 *',
        name = 'flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resources_register': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GResource *',
        name = 'resource',
      ),
    ],
  ),
  'g_resources_unregister': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GResource *',
        name = 'resource',
      ),
    ],
  ),
  'g_resources_open_stream': Spec(
    return_type = 'GInputStream *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'path',
      ),
      Param(
        type = 'GResourceLookupFlags',
        name = 'lookup_flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resources_lookup_data': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'path',
      ),
      Param(
        type = 'GResourceLookupFlags',
        name = 'lookup_flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resources_enumerate_children': Spec(
    return_type = 'char **',
    parameters = [
      Param(
        type = 'const char *',
        name = 'path',
      ),
      Param(
        type = 'GResourceLookupFlags',
        name = 'lookup_flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resources_get_info': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char *',
        name = 'path',
      ),
      Param(
        type = 'GResourceLookupFlags',
        name = 'lookup_flags',
      ),
      Param(
        type = 'gsize *',
        name = 'size',
      ),
      Param(
        type = 'guint32 *',
        name = 'flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_static_resource_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticResource *',
        name = 'static_resource',
      ),
    ],
  ),
  'g_static_resource_fini': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticResource *',
        name = 'static_resource',
      ),
    ],
  ),
  'g_static_resource_get_resource': Spec(
    return_type = 'GResource *',
    parameters = [
      Param(
        type = 'GStaticResource *',
        name = 'static_resource',
      ),
    ],
  ),
  'g_seekable_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_seekable_tell': Spec(
    return_type = 'goffset',
    parameters = [
      Param(
        type = 'GSeekable *',
        name = 'seekable',
      ),
    ],
  ),
  'g_seekable_can_seek': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSeekable *',
        name = 'seekable',
      ),
    ],
  ),
  'g_seekable_seek': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSeekable *',
        name = 'seekable',
      ),
      Param(
        type = 'goffset',
        name = 'offset',
      ),
      Param(
        type = 'GSeekType',
        name = 'type',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_seekable_can_truncate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSeekable *',
        name = 'seekable',
      ),
    ],
  ),
  'g_seekable_truncate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSeekable *',
        name = 'seekable',
      ),
      Param(
        type = 'goffset',
        name = 'offset',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_settings_schema_source_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_settings_schema_source_get_default': Spec(
    return_type = 'GSettingsSchemaSource *',
    parameters = [
    ],
  ),
  'g_settings_schema_source_ref': Spec(
    return_type = 'GSettingsSchemaSource *',
    parameters = [
      Param(
        type = 'GSettingsSchemaSource *',
        name = 'source',
      ),
    ],
  ),
  'g_settings_schema_source_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSettingsSchemaSource *',
        name = 'source',
      ),
    ],
  ),
  'g_settings_schema_source_new_from_directory': Spec(
    return_type = 'GSettingsSchemaSource *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'directory',
      ),
      Param(
        type = 'GSettingsSchemaSource *',
        name = 'parent',
      ),
      Param(
        type = 'gboolean',
        name = 'trusted',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_settings_schema_source_lookup': Spec(
    return_type = 'GSettingsSchema *',
    parameters = [
      Param(
        type = 'GSettingsSchemaSource *',
        name = 'source',
      ),
      Param(
        type = 'const gchar *',
        name = 'schema_id',
      ),
      Param(
        type = 'gboolean',
        name = 'recursive',
      ),
    ],
  ),
  'g_settings_schema_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_settings_schema_ref': Spec(
    return_type = 'GSettingsSchema *',
    parameters = [
      Param(
        type = 'GSettingsSchema *',
        name = 'schema',
      ),
    ],
  ),
  'g_settings_schema_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSettingsSchema *',
        name = 'schema',
      ),
    ],
  ),
  'g_settings_schema_get_id': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GSettingsSchema *',
        name = 'schema',
      ),
    ],
  ),
  'g_settings_schema_get_path': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GSettingsSchema *',
        name = 'schema',
      ),
    ],
  ),
  'g_settings_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_settings_list_schemas': Spec(
    return_type = 'const gchar *const *',
    parameters = [
    ],
  ),
  'g_settings_list_relocatable_schemas': Spec(
    return_type = 'const gchar *const *',
    parameters = [
    ],
  ),
  'g_settings_new': Spec(
    return_type = 'GSettings *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'schema_id',
      ),
    ],
  ),
  'g_settings_new_with_path': Spec(
    return_type = 'GSettings *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'schema_id',
      ),
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
    ],
  ),
  'g_settings_new_with_backend': Spec(
    return_type = 'GSettings *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'schema_id',
      ),
      Param(
        type = 'GSettingsBackend *',
        name = 'backend',
      ),
    ],
  ),
  'g_settings_new_with_backend_and_path': Spec(
    return_type = 'GSettings *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'schema_id',
      ),
      Param(
        type = 'GSettingsBackend *',
        name = 'backend',
      ),
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
    ],
  ),
  'g_settings_new_full': Spec(
    return_type = 'GSettings *',
    parameters = [
      Param(
        type = 'GSettingsSchema *',
        name = 'schema',
      ),
      Param(
        type = 'GSettingsBackend *',
        name = 'backend',
      ),
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
    ],
  ),
  'g_settings_list_children': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
    ],
  ),
  'g_settings_list_keys': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
    ],
  ),
  'g_settings_get_range': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_range_check': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_settings_set_value': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_settings_get_value': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_set': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_settings_get': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_settings_reset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_get_int': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_set_int': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gint',
        name = 'value',
      ),
    ],
  ),
  'g_settings_get_uint': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_set_uint': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'guint',
        name = 'value',
      ),
    ],
  ),
  'g_settings_get_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_set_string': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'g_settings_get_boolean': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_set_boolean': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gboolean',
        name = 'value',
      ),
    ],
  ),
  'g_settings_get_double': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_set_double': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gdouble',
        name = 'value',
      ),
    ],
  ),
  'g_settings_get_strv': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_set_strv': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *const *',
        name = 'value',
      ),
    ],
  ),
  'g_settings_get_enum': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_set_enum': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gint',
        name = 'value',
      ),
    ],
  ),
  'g_settings_get_flags': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_set_flags': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'guint',
        name = 'value',
      ),
    ],
  ),
  'g_settings_get_child': Spec(
    return_type = 'GSettings *',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_settings_is_writable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_settings_delay': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
    ],
  ),
  'g_settings_apply': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
    ],
  ),
  'g_settings_revert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
    ],
  ),
  'g_settings_get_has_unapplied': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
    ],
  ),
  'g_settings_sync': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_settings_bind': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property',
      ),
      Param(
        type = 'GSettingsBindFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_settings_bind_with_mapping': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property',
      ),
      Param(
        type = 'GSettingsBindFlags',
        name = 'flags',
      ),
      Param(
        type = 'GSettingsBindGetMapping',
        name = 'get_mapping',
      ),
      Param(
        type = 'GSettingsBindSetMapping',
        name = 'set_mapping',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'g_settings_bind_writable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property',
      ),
      Param(
        type = 'gboolean',
        name = 'inverted',
      ),
    ],
  ),
  'g_settings_unbind': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property',
      ),
    ],
  ),
  'g_settings_create_action': Spec(
    return_type = 'GAction *',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_get_mapped': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GSettingsGetMapping',
        name = 'mapping',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_simple_action_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_simple_action_new': Spec(
    return_type = 'GSimpleAction *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'parameter_type',
      ),
    ],
  ),
  'g_simple_action_new_stateful': Spec(
    return_type = 'GSimpleAction *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'parameter_type',
      ),
      Param(
        type = 'GVariant *',
        name = 'state',
      ),
    ],
  ),
  'g_simple_action_set_enabled': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAction *',
        name = 'simple',
      ),
      Param(
        type = 'gboolean',
        name = 'enabled',
      ),
    ],
  ),
  'g_simple_action_set_state': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAction *',
        name = 'simple',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_simple_action_group_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_simple_action_group_new': Spec(
    return_type = 'GSimpleActionGroup *',
    parameters = [
    ],
  ),
  'g_simple_action_group_lookup': Spec(
    return_type = 'GAction *',
    parameters = [
      Param(
        type = 'GSimpleActionGroup *',
        name = 'simple',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_simple_action_group_insert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleActionGroup *',
        name = 'simple',
      ),
      Param(
        type = 'GAction *',
        name = 'action',
      ),
    ],
  ),
  'g_simple_action_group_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleActionGroup *',
        name = 'simple',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_simple_action_group_add_entries': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleActionGroup *',
        name = 'simple',
      ),
      Param(
        type = 'const GActionEntry *',
        name = 'entries',
      ),
      Param(
        type = 'gint',
        name = 'n_entries',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_simple_async_result_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_simple_async_result_new': Spec(
    return_type = 'GSimpleAsyncResult *',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'source_object',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'gpointer',
        name = 'source_tag',
      ),
    ],
  ),
  'g_simple_async_result_new_error': Spec(
    return_type = 'GSimpleAsyncResult *',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'source_object',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const char *',
        name = 'format',
      ),
    ],
  ),
  'g_simple_async_result_new_from_error': Spec(
    return_type = 'GSimpleAsyncResult *',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'source_object',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'const GError *',
        name = 'error',
      ),
    ],
  ),
  'g_simple_async_result_new_take_error': Spec(
    return_type = 'GSimpleAsyncResult *',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'source_object',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GError *',
        name = 'error',
      ),
    ],
  ),
  'g_simple_async_result_set_op_res_gpointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
      Param(
        type = 'gpointer',
        name = 'op_res',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy_op_res',
      ),
    ],
  ),
  'g_simple_async_result_get_op_res_gpointer': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
    ],
  ),
  'g_simple_async_result_set_op_res_gssize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
      Param(
        type = 'gssize',
        name = 'op_res',
      ),
    ],
  ),
  'g_simple_async_result_get_op_res_gssize': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
    ],
  ),
  'g_simple_async_result_set_op_res_gboolean': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
      Param(
        type = 'gboolean',
        name = 'op_res',
      ),
    ],
  ),
  'g_simple_async_result_get_op_res_gboolean': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
    ],
  ),
  'g_simple_async_result_set_check_cancellable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
      Param(
        type = 'GCancellable *',
        name = 'check_cancellable',
      ),
    ],
  ),
  'g_simple_async_result_get_source_tag': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
    ],
  ),
  'g_simple_async_result_set_handle_cancellation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
      Param(
        type = 'gboolean',
        name = 'handle_cancellation',
      ),
    ],
  ),
  'g_simple_async_result_complete': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
    ],
  ),
  'g_simple_async_result_complete_in_idle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
    ],
  ),
  'g_simple_async_result_run_in_thread': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
      Param(
        type = 'GSimpleAsyncThreadFunc',
        name = 'func',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_simple_async_result_set_from_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
      Param(
        type = 'const GError *',
        name = 'error',
      ),
    ],
  ),
  'g_simple_async_result_take_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
      Param(
        type = 'GError *',
        name = 'error',
      ),
    ],
  ),
  'g_simple_async_result_propagate_error': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
      Param(
        type = 'GError **',
        name = 'dest',
      ),
    ],
  ),
  'g_simple_async_result_set_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const char *',
        name = 'format',
      ),
    ],
  ),
  'g_simple_async_result_set_error_va': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const char *',
        name = 'format',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'g_simple_async_result_is_valid': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GObject *',
        name = 'source',
      ),
      Param(
        type = 'gpointer',
        name = 'source_tag',
      ),
    ],
  ),
  'g_simple_async_report_error_in_idle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const char *',
        name = 'format',
      ),
    ],
  ),
  'g_simple_async_report_gerror_in_idle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'const GError *',
        name = 'error',
      ),
    ],
  ),
  'g_simple_async_report_take_gerror_in_idle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GError *',
        name = 'error',
      ),
    ],
  ),
  'g_simple_permission_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_simple_permission_new': Spec(
    return_type = 'GPermission *',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'allowed',
      ),
    ],
  ),
  'g_socket_client_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_client_new': Spec(
    return_type = 'GSocketClient *',
    parameters = [
    ],
  ),
  'g_socket_client_get_family': Spec(
    return_type = 'GSocketFamily',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
    ],
  ),
  'g_socket_client_set_family': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'GSocketFamily',
        name = 'family',
      ),
    ],
  ),
  'g_socket_client_get_socket_type': Spec(
    return_type = 'GSocketType',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
    ],
  ),
  'g_socket_client_set_socket_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'GSocketType',
        name = 'type',
      ),
    ],
  ),
  'g_socket_client_get_protocol': Spec(
    return_type = 'GSocketProtocol',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
    ],
  ),
  'g_socket_client_set_protocol': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'GSocketProtocol',
        name = 'protocol',
      ),
    ],
  ),
  'g_socket_client_get_local_address': Spec(
    return_type = 'GSocketAddress *',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
    ],
  ),
  'g_socket_client_set_local_address': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'GSocketAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_socket_client_get_timeout': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
    ],
  ),
  'g_socket_client_set_timeout': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'guint',
        name = 'timeout',
      ),
    ],
  ),
  'g_socket_client_get_enable_proxy': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
    ],
  ),
  'g_socket_client_set_enable_proxy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'gboolean',
        name = 'enable',
      ),
    ],
  ),
  'g_socket_client_get_tls': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
    ],
  ),
  'g_socket_client_set_tls': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'gboolean',
        name = 'tls',
      ),
    ],
  ),
  'g_socket_client_get_tls_validation_flags': Spec(
    return_type = 'GTlsCertificateFlags',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
    ],
  ),
  'g_socket_client_set_tls_validation_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'GTlsCertificateFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_socket_client_connect': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'GSocketConnectable *',
        name = 'connectable',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_client_connect_to_host': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'const gchar *',
        name = 'host_and_port',
      ),
      Param(
        type = 'guint16',
        name = 'default_port',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_client_connect_to_service': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
      Param(
        type = 'const gchar *',
        name = 'service',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_client_connect_to_uri': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'guint16',
        name = 'default_port',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_client_connect_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'GSocketConnectable *',
        name = 'connectable',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_socket_client_connect_finish': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_client_connect_to_host_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'const gchar *',
        name = 'host_and_port',
      ),
      Param(
        type = 'guint16',
        name = 'default_port',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_socket_client_connect_to_host_finish': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_client_connect_to_service_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
      Param(
        type = 'const gchar *',
        name = 'service',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_socket_client_connect_to_service_finish': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_client_connect_to_uri_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'guint16',
        name = 'default_port',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_socket_client_connect_to_uri_finish': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_client_add_application_proxy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'const gchar *',
        name = 'protocol',
      ),
    ],
  ),
  'g_socket_connectable_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_connectable_enumerate': Spec(
    return_type = 'GSocketAddressEnumerator *',
    parameters = [
      Param(
        type = 'GSocketConnectable *',
        name = 'connectable',
      ),
    ],
  ),
  'g_socket_connectable_proxy_enumerate': Spec(
    return_type = 'GSocketAddressEnumerator *',
    parameters = [
      Param(
        type = 'GSocketConnectable *',
        name = 'connectable',
      ),
    ],
  ),
  'g_socket_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_new': Spec(
    return_type = 'GSocket *',
    parameters = [
      Param(
        type = 'GSocketFamily',
        name = 'family',
      ),
      Param(
        type = 'GSocketType',
        name = 'type',
      ),
      Param(
        type = 'GSocketProtocol',
        name = 'protocol',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_new_from_fd': Spec(
    return_type = 'GSocket *',
    parameters = [
      Param(
        type = 'gint',
        name = 'fd',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_get_fd': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_get_family': Spec(
    return_type = 'GSocketFamily',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_get_socket_type': Spec(
    return_type = 'GSocketType',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_get_protocol': Spec(
    return_type = 'GSocketProtocol',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_get_local_address': Spec(
    return_type = 'GSocketAddress *',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_get_remote_address': Spec(
    return_type = 'GSocketAddress *',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_set_blocking': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'gboolean',
        name = 'blocking',
      ),
    ],
  ),
  'g_socket_get_blocking': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_set_keepalive': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'gboolean',
        name = 'keepalive',
      ),
    ],
  ),
  'g_socket_get_keepalive': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_get_listen_backlog': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_set_listen_backlog': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'gint',
        name = 'backlog',
      ),
    ],
  ),
  'g_socket_get_timeout': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_set_timeout': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'guint',
        name = 'timeout',
      ),
    ],
  ),
  'g_socket_get_ttl': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_set_ttl': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'guint',
        name = 'ttl',
      ),
    ],
  ),
  'g_socket_get_broadcast': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_set_broadcast': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'gboolean',
        name = 'broadcast',
      ),
    ],
  ),
  'g_socket_get_multicast_loopback': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_set_multicast_loopback': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'gboolean',
        name = 'loopback',
      ),
    ],
  ),
  'g_socket_get_multicast_ttl': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_set_multicast_ttl': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'guint',
        name = 'ttl',
      ),
    ],
  ),
  'g_socket_is_connected': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_bind': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GSocketAddress *',
        name = 'address',
      ),
      Param(
        type = 'gboolean',
        name = 'allow_reuse',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_join_multicast_group': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GInetAddress *',
        name = 'group',
      ),
      Param(
        type = 'gboolean',
        name = 'source_specific',
      ),
      Param(
        type = 'const gchar *',
        name = 'iface',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_leave_multicast_group': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GInetAddress *',
        name = 'group',
      ),
      Param(
        type = 'gboolean',
        name = 'source_specific',
      ),
      Param(
        type = 'const gchar *',
        name = 'iface',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_connect': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GSocketAddress *',
        name = 'address',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_check_connect_result': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_get_available_bytes': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_condition_check': Spec(
    return_type = 'GIOCondition',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GIOCondition',
        name = 'condition',
      ),
    ],
  ),
  'g_socket_condition_wait': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GIOCondition',
        name = 'condition',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_condition_timed_wait': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GIOCondition',
        name = 'condition',
      ),
      Param(
        type = 'gint64',
        name = 'timeout',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_accept': Spec(
    return_type = 'GSocket *',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_listen': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_receive': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'gchar *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_receive_from': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GSocketAddress **',
        name = 'address',
      ),
      Param(
        type = 'gchar *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_send': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'const gchar *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_send_to': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GSocketAddress *',
        name = 'address',
      ),
      Param(
        type = 'const gchar *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_receive_message': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GSocketAddress **',
        name = 'address',
      ),
      Param(
        type = 'GInputVector *',
        name = 'vectors',
      ),
      Param(
        type = 'gint',
        name = 'num_vectors',
      ),
      Param(
        type = 'GSocketControlMessage ***',
        name = 'messages',
      ),
      Param(
        type = 'gint *',
        name = 'num_messages',
      ),
      Param(
        type = 'gint *',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_send_message': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GSocketAddress *',
        name = 'address',
      ),
      Param(
        type = 'GOutputVector *',
        name = 'vectors',
      ),
      Param(
        type = 'gint',
        name = 'num_vectors',
      ),
      Param(
        type = 'GSocketControlMessage **',
        name = 'messages',
      ),
      Param(
        type = 'gint',
        name = 'num_messages',
      ),
      Param(
        type = 'gint',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_close': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_shutdown': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'gboolean',
        name = 'shutdown_read',
      ),
      Param(
        type = 'gboolean',
        name = 'shutdown_write',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_is_closed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_create_source': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GIOCondition',
        name = 'condition',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_socket_speaks_ipv4': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_get_credentials': Spec(
    return_type = 'GCredentials *',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_receive_with_blocking': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'gchar *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
      Param(
        type = 'gboolean',
        name = 'blocking',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_send_with_blocking': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'const gchar *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
      Param(
        type = 'gboolean',
        name = 'blocking',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_connection_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_connection_is_connected': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocketConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_socket_connection_connect': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocketConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GSocketAddress *',
        name = 'address',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_connection_connect_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GSocketAddress *',
        name = 'address',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_socket_connection_connect_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocketConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_connection_get_socket': Spec(
    return_type = 'GSocket *',
    parameters = [
      Param(
        type = 'GSocketConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_socket_connection_get_local_address': Spec(
    return_type = 'GSocketAddress *',
    parameters = [
      Param(
        type = 'GSocketConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_connection_get_remote_address': Spec(
    return_type = 'GSocketAddress *',
    parameters = [
      Param(
        type = 'GSocketConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_connection_factory_register_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'g_type',
      ),
      Param(
        type = 'GSocketFamily',
        name = 'family',
      ),
      Param(
        type = 'GSocketType',
        name = 'type',
      ),
      Param(
        type = 'gint',
        name = 'protocol',
      ),
    ],
  ),
  'g_socket_connection_factory_lookup_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GSocketFamily',
        name = 'family',
      ),
      Param(
        type = 'GSocketType',
        name = 'type',
      ),
      Param(
        type = 'gint',
        name = 'protocol_id',
      ),
    ],
  ),
  'g_socket_connection_factory_create_connection': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_control_message_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_control_message_get_size': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GSocketControlMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_socket_control_message_get_level': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GSocketControlMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_socket_control_message_get_msg_type': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GSocketControlMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_socket_control_message_serialize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketControlMessage *',
        name = 'message',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_socket_control_message_deserialize': Spec(
    return_type = 'GSocketControlMessage *',
    parameters = [
      Param(
        type = 'int',
        name = 'level',
      ),
      Param(
        type = 'int',
        name = 'type',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_socket_listener_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_listener_new': Spec(
    return_type = 'GSocketListener *',
    parameters = [
    ],
  ),
  'g_socket_listener_set_backlog': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
      Param(
        type = 'int',
        name = 'listen_backlog',
      ),
    ],
  ),
  'g_socket_listener_add_socket': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GObject *',
        name = 'source_object',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_listener_add_address': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
      Param(
        type = 'GSocketAddress *',
        name = 'address',
      ),
      Param(
        type = 'GSocketType',
        name = 'type',
      ),
      Param(
        type = 'GSocketProtocol',
        name = 'protocol',
      ),
      Param(
        type = 'GObject *',
        name = 'source_object',
      ),
      Param(
        type = 'GSocketAddress **',
        name = 'effective_address',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_listener_add_inet_port': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
      Param(
        type = 'guint16',
        name = 'port',
      ),
      Param(
        type = 'GObject *',
        name = 'source_object',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_listener_add_any_inet_port': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
      Param(
        type = 'GObject *',
        name = 'source_object',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_listener_accept_socket': Spec(
    return_type = 'GSocket *',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
      Param(
        type = 'GObject **',
        name = 'source_object',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_listener_accept_socket_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_socket_listener_accept_socket_finish': Spec(
    return_type = 'GSocket *',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GObject **',
        name = 'source_object',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_listener_accept': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
      Param(
        type = 'GObject **',
        name = 'source_object',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_listener_accept_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_socket_listener_accept_finish': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GObject **',
        name = 'source_object',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_listener_close': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
    ],
  ),
  'g_socket_service_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_service_new': Spec(
    return_type = 'GSocketService *',
    parameters = [
    ],
  ),
  'g_socket_service_start': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketService *',
        name = 'service',
      ),
    ],
  ),
  'g_socket_service_stop': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketService *',
        name = 'service',
      ),
    ],
  ),
  'g_socket_service_is_active': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocketService *',
        name = 'service',
      ),
    ],
  ),
  'g_srv_target_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_srv_target_new': Spec(
    return_type = 'GSrvTarget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'hostname',
      ),
      Param(
        type = 'guint16',
        name = 'port',
      ),
      Param(
        type = 'guint16',
        name = 'priority',
      ),
      Param(
        type = 'guint16',
        name = 'weight',
      ),
    ],
  ),
  'g_srv_target_copy': Spec(
    return_type = 'GSrvTarget *',
    parameters = [
      Param(
        type = 'GSrvTarget *',
        name = 'target',
      ),
    ],
  ),
  'g_srv_target_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSrvTarget *',
        name = 'target',
      ),
    ],
  ),
  'g_srv_target_get_hostname': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GSrvTarget *',
        name = 'target',
      ),
    ],
  ),
  'g_srv_target_get_port': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GSrvTarget *',
        name = 'target',
      ),
    ],
  ),
  'g_srv_target_get_priority': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GSrvTarget *',
        name = 'target',
      ),
    ],
  ),
  'g_srv_target_get_weight': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GSrvTarget *',
        name = 'target',
      ),
    ],
  ),
  'g_srv_target_list_sort': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'targets',
      ),
    ],
  ),
  'g_task_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_task_new': Spec(
    return_type = 'GTask *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'source_object',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'callback_data',
      ),
    ],
  ),
  'g_task_report_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'source_object',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'callback_data',
      ),
      Param(
        type = 'gpointer',
        name = 'source_tag',
      ),
      Param(
        type = 'GError *',
        name = 'error',
      ),
    ],
  ),
  'g_task_report_new_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'source_object',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'callback_data',
      ),
      Param(
        type = 'gpointer',
        name = 'source_tag',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const char *',
        name = 'format',
      ),
    ],
  ),
  'g_task_set_task_data': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'gpointer',
        name = 'task_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'task_data_destroy',
      ),
    ],
  ),
  'g_task_set_priority': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'gint',
        name = 'priority',
      ),
    ],
  ),
  'g_task_set_check_cancellable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'gboolean',
        name = 'check_cancellable',
      ),
    ],
  ),
  'g_task_set_source_tag': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'gpointer',
        name = 'source_tag',
      ),
    ],
  ),
  'g_task_get_source_object': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
    ],
  ),
  'g_task_get_task_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
    ],
  ),
  'g_task_get_priority': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
    ],
  ),
  'g_task_get_context': Spec(
    return_type = 'GMainContext *',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
    ],
  ),
  'g_task_get_cancellable': Spec(
    return_type = 'GCancellable *',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
    ],
  ),
  'g_task_get_check_cancellable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
    ],
  ),
  'g_task_get_source_tag': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
    ],
  ),
  'g_task_is_valid': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'result',
      ),
      Param(
        type = 'gpointer',
        name = 'source_object',
      ),
    ],
  ),
  'g_task_run_in_thread': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'GTaskThreadFunc',
        name = 'task_func',
      ),
    ],
  ),
  'g_task_run_in_thread_sync': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'GTaskThreadFunc',
        name = 'task_func',
      ),
    ],
  ),
  'g_task_set_return_on_cancel': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'gboolean',
        name = 'return_on_cancel',
      ),
    ],
  ),
  'g_task_get_return_on_cancel': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
    ],
  ),
  'g_task_attach_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'callback',
      ),
    ],
  ),
  'g_task_return_pointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'gpointer',
        name = 'result',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'result_destroy',
      ),
    ],
  ),
  'g_task_return_boolean': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'gboolean',
        name = 'result',
      ),
    ],
  ),
  'g_task_return_int': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'gssize',
        name = 'result',
      ),
    ],
  ),
  'g_task_return_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'GError *',
        name = 'error',
      ),
    ],
  ),
  'g_task_return_new_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const char *',
        name = 'format',
      ),
    ],
  ),
  'g_task_return_error_if_cancelled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
    ],
  ),
  'g_task_propagate_pointer': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_task_propagate_boolean': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_task_propagate_int': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_task_had_error': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
    ],
  ),
  'g_tcp_connection_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tcp_connection_set_graceful_disconnect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTcpConnection *',
        name = 'connection',
      ),
      Param(
        type = 'gboolean',
        name = 'graceful_disconnect',
      ),
    ],
  ),
  'g_tcp_connection_get_graceful_disconnect': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTcpConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_tcp_wrapper_connection_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tcp_wrapper_connection_new': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'base_io_stream',
      ),
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_tcp_wrapper_connection_get_base_io_stream': Spec(
    return_type = 'GIOStream *',
    parameters = [
      Param(
        type = 'GTcpWrapperConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_test_dbus_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_test_dbus_new': Spec(
    return_type = 'GTestDBus *',
    parameters = [
      Param(
        type = 'GTestDBusFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_test_dbus_get_flags': Spec(
    return_type = 'GTestDBusFlags',
    parameters = [
      Param(
        type = 'GTestDBus *',
        name = 'self',
      ),
    ],
  ),
  'g_test_dbus_get_bus_address': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GTestDBus *',
        name = 'self',
      ),
    ],
  ),
  'g_test_dbus_add_service_dir': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTestDBus *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
    ],
  ),
  'g_test_dbus_up': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTestDBus *',
        name = 'self',
      ),
    ],
  ),
  'g_test_dbus_stop': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTestDBus *',
        name = 'self',
      ),
    ],
  ),
  'g_test_dbus_down': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTestDBus *',
        name = 'self',
      ),
    ],
  ),
  'g_test_dbus_unset': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_themed_icon_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_themed_icon_new': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'iconname',
      ),
    ],
  ),
  'g_themed_icon_new_with_default_fallbacks': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'iconname',
      ),
    ],
  ),
  'g_themed_icon_new_from_names': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'char **',
        name = 'iconnames',
      ),
      Param(
        type = 'int',
        name = 'len',
      ),
    ],
  ),
  'g_themed_icon_prepend_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GThemedIcon *',
        name = 'icon',
      ),
      Param(
        type = 'const char *',
        name = 'iconname',
      ),
    ],
  ),
  'g_themed_icon_append_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GThemedIcon *',
        name = 'icon',
      ),
      Param(
        type = 'const char *',
        name = 'iconname',
      ),
    ],
  ),
  'g_themed_icon_get_names': Spec(
    return_type = 'const gchar *const *',
    parameters = [
      Param(
        type = 'GThemedIcon *',
        name = 'icon',
      ),
    ],
  ),
  'g_threaded_socket_service_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_threaded_socket_service_new': Spec(
    return_type = 'GSocketService *',
    parameters = [
      Param(
        type = 'int',
        name = 'max_threads',
      ),
    ],
  ),
  'g_tls_backend_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_backend_get_default': Spec(
    return_type = 'GTlsBackend *',
    parameters = [
    ],
  ),
  'g_tls_backend_get_default_database': Spec(
    return_type = 'GTlsDatabase *',
    parameters = [
      Param(
        type = 'GTlsBackend *',
        name = 'backend',
      ),
    ],
  ),
  'g_tls_backend_supports_tls': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTlsBackend *',
        name = 'backend',
      ),
    ],
  ),
  'g_tls_backend_get_certificate_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GTlsBackend *',
        name = 'backend',
      ),
    ],
  ),
  'g_tls_backend_get_client_connection_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GTlsBackend *',
        name = 'backend',
      ),
    ],
  ),
  'g_tls_backend_get_server_connection_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GTlsBackend *',
        name = 'backend',
      ),
    ],
  ),
  'g_tls_backend_get_file_database_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GTlsBackend *',
        name = 'backend',
      ),
    ],
  ),
  'g_tls_certificate_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_certificate_new_from_pem': Spec(
    return_type = 'GTlsCertificate *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'data',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_certificate_new_from_file': Spec(
    return_type = 'GTlsCertificate *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'file',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_certificate_new_from_files': Spec(
    return_type = 'GTlsCertificate *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'cert_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'key_file',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_certificate_list_new_from_file': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'file',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_certificate_get_issuer': Spec(
    return_type = 'GTlsCertificate *',
    parameters = [
      Param(
        type = 'GTlsCertificate *',
        name = 'cert',
      ),
    ],
  ),
  'g_tls_certificate_verify': Spec(
    return_type = 'GTlsCertificateFlags',
    parameters = [
      Param(
        type = 'GTlsCertificate *',
        name = 'cert',
      ),
      Param(
        type = 'GSocketConnectable *',
        name = 'identity',
      ),
      Param(
        type = 'GTlsCertificate *',
        name = 'trusted_ca',
      ),
    ],
  ),
  'g_tls_certificate_is_same': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTlsCertificate *',
        name = 'cert_one',
      ),
      Param(
        type = 'GTlsCertificate *',
        name = 'cert_two',
      ),
    ],
  ),
  'g_tls_connection_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_connection_set_use_system_certdb': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
      Param(
        type = 'gboolean',
        name = 'use_system_certdb',
      ),
    ],
  ),
  'g_tls_connection_get_use_system_certdb': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_connection_set_database': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
      Param(
        type = 'GTlsDatabase *',
        name = 'database',
      ),
    ],
  ),
  'g_tls_connection_get_database': Spec(
    return_type = 'GTlsDatabase *',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_connection_set_certificate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
      Param(
        type = 'GTlsCertificate *',
        name = 'certificate',
      ),
    ],
  ),
  'g_tls_connection_get_certificate': Spec(
    return_type = 'GTlsCertificate *',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_connection_set_interaction': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
    ],
  ),
  'g_tls_connection_get_interaction': Spec(
    return_type = 'GTlsInteraction *',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_connection_get_peer_certificate': Spec(
    return_type = 'GTlsCertificate *',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_connection_get_peer_certificate_errors': Spec(
    return_type = 'GTlsCertificateFlags',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_connection_set_require_close_notify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
      Param(
        type = 'gboolean',
        name = 'require_close_notify',
      ),
    ],
  ),
  'g_tls_connection_get_require_close_notify': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_connection_set_rehandshake_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
      Param(
        type = 'GTlsRehandshakeMode',
        name = 'mode',
      ),
    ],
  ),
  'g_tls_connection_get_rehandshake_mode': Spec(
    return_type = 'GTlsRehandshakeMode',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_connection_handshake': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_connection_handshake_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_tls_connection_handshake_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_tls_connection_emit_accept_certificate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
      Param(
        type = 'GTlsCertificate *',
        name = 'peer_cert',
      ),
      Param(
        type = 'GTlsCertificateFlags',
        name = 'errors',
      ),
    ],
  ),
  'g_tls_client_connection_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_client_connection_new': Spec(
    return_type = 'GIOStream *',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'base_io_stream',
      ),
      Param(
        type = 'GSocketConnectable *',
        name = 'server_identity',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_client_connection_get_validation_flags': Spec(
    return_type = 'GTlsCertificateFlags',
    parameters = [
      Param(
        type = 'GTlsClientConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_client_connection_set_validation_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsClientConnection *',
        name = 'conn',
      ),
      Param(
        type = 'GTlsCertificateFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_tls_client_connection_get_server_identity': Spec(
    return_type = 'GSocketConnectable *',
    parameters = [
      Param(
        type = 'GTlsClientConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_client_connection_set_server_identity': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsClientConnection *',
        name = 'conn',
      ),
      Param(
        type = 'GSocketConnectable *',
        name = 'identity',
      ),
    ],
  ),
  'g_tls_client_connection_get_use_ssl3': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTlsClientConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_client_connection_set_use_ssl3': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsClientConnection *',
        name = 'conn',
      ),
      Param(
        type = 'gboolean',
        name = 'use_ssl3',
      ),
    ],
  ),
  'g_tls_client_connection_get_accepted_cas': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GTlsClientConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_database_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_database_verify_chain': Spec(
    return_type = 'GTlsCertificateFlags',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'GTlsCertificate *',
        name = 'chain',
      ),
      Param(
        type = 'const gchar *',
        name = 'purpose',
      ),
      Param(
        type = 'GSocketConnectable *',
        name = 'identity',
      ),
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GTlsDatabaseVerifyFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_database_verify_chain_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'GTlsCertificate *',
        name = 'chain',
      ),
      Param(
        type = 'const gchar *',
        name = 'purpose',
      ),
      Param(
        type = 'GSocketConnectable *',
        name = 'identity',
      ),
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GTlsDatabaseVerifyFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_tls_database_verify_chain_finish': Spec(
    return_type = 'GTlsCertificateFlags',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_database_create_certificate_handle': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'GTlsCertificate *',
        name = 'certificate',
      ),
    ],
  ),
  'g_tls_database_lookup_certificate_for_handle': Spec(
    return_type = 'GTlsCertificate *',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'handle',
      ),
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GTlsDatabaseLookupFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_database_lookup_certificate_for_handle_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'handle',
      ),
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GTlsDatabaseLookupFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_tls_database_lookup_certificate_for_handle_finish': Spec(
    return_type = 'GTlsCertificate *',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_database_lookup_certificate_issuer': Spec(
    return_type = 'GTlsCertificate *',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'GTlsCertificate *',
        name = 'certificate',
      ),
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GTlsDatabaseLookupFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_database_lookup_certificate_issuer_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'GTlsCertificate *',
        name = 'certificate',
      ),
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GTlsDatabaseLookupFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_tls_database_lookup_certificate_issuer_finish': Spec(
    return_type = 'GTlsCertificate *',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_database_lookup_certificates_issued_by': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'GByteArray *',
        name = 'issuer_raw_dn',
      ),
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GTlsDatabaseLookupFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_database_lookup_certificates_issued_by_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'GByteArray *',
        name = 'issuer_raw_dn',
      ),
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GTlsDatabaseLookupFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_tls_database_lookup_certificates_issued_by_finish': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_file_database_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_file_database_new': Spec(
    return_type = 'GTlsDatabase *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'anchors',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_interaction_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_interaction_invoke_ask_password': Spec(
    return_type = 'GTlsInteractionResult',
    parameters = [
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_interaction_ask_password': Spec(
    return_type = 'GTlsInteractionResult',
    parameters = [
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_interaction_ask_password_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_tls_interaction_ask_password_finish': Spec(
    return_type = 'GTlsInteractionResult',
    parameters = [
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_server_connection_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_server_connection_new': Spec(
    return_type = 'GIOStream *',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'base_io_stream',
      ),
      Param(
        type = 'GTlsCertificate *',
        name = 'certificate',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_password_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_password_new': Spec(
    return_type = 'GTlsPassword *',
    parameters = [
      Param(
        type = 'GTlsPasswordFlags',
        name = 'flags',
      ),
      Param(
        type = 'const gchar *',
        name = 'description',
      ),
    ],
  ),
  'g_tls_password_get_value': Spec(
    return_type = 'const guchar *',
    parameters = [
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_tls_password_set_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
      Param(
        type = 'const guchar *',
        name = 'value',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
    ],
  ),
  'g_tls_password_set_value_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
      Param(
        type = 'guchar *',
        name = 'value',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'g_tls_password_get_flags': Spec(
    return_type = 'GTlsPasswordFlags',
    parameters = [
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
    ],
  ),
  'g_tls_password_set_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
      Param(
        type = 'GTlsPasswordFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_tls_password_get_description': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
    ],
  ),
  'g_tls_password_set_description': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
      Param(
        type = 'const gchar *',
        name = 'description',
      ),
    ],
  ),
  'g_tls_password_get_warning': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
    ],
  ),
  'g_tls_password_set_warning': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
      Param(
        type = 'const gchar *',
        name = 'warning',
      ),
    ],
  ),
  'g_vfs_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_vfs_is_active': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVfs *',
        name = 'vfs',
      ),
    ],
  ),
  'g_vfs_get_file_for_path': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GVfs *',
        name = 'vfs',
      ),
      Param(
        type = 'const char *',
        name = 'path',
      ),
    ],
  ),
  'g_vfs_get_file_for_uri': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GVfs *',
        name = 'vfs',
      ),
      Param(
        type = 'const char *',
        name = 'uri',
      ),
    ],
  ),
  'g_vfs_get_supported_uri_schemes': Spec(
    return_type = 'const gchar *const *',
    parameters = [
      Param(
        type = 'GVfs *',
        name = 'vfs',
      ),
    ],
  ),
  'g_vfs_parse_name': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GVfs *',
        name = 'vfs',
      ),
      Param(
        type = 'const char *',
        name = 'parse_name',
      ),
    ],
  ),
  'g_vfs_get_default': Spec(
    return_type = 'GVfs *',
    parameters = [
    ],
  ),
  'g_vfs_get_local': Spec(
    return_type = 'GVfs *',
    parameters = [
    ],
  ),
  'g_volume_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_volume_get_name': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_volume_get_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_volume_get_symbolic_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_volume_get_uuid': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_volume_get_drive': Spec(
    return_type = 'GDrive *',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_volume_get_mount': Spec(
    return_type = 'GMount *',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_volume_can_mount': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_volume_can_eject': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_volume_should_automount': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_volume_mount': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
      Param(
        type = 'GMountMountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_volume_mount_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_volume_eject': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_volume_eject_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_volume_get_identifier': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
      Param(
        type = 'const char *',
        name = 'kind',
      ),
    ],
  ),
  'g_volume_enumerate_identifiers': Spec(
    return_type = 'char **',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_volume_get_activation_root': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_volume_eject_with_operation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_volume_eject_with_operation_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_volume_get_sort_key': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_zlib_compressor_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_zlib_compressor_new': Spec(
    return_type = 'GZlibCompressor *',
    parameters = [
      Param(
        type = 'GZlibCompressorFormat',
        name = 'format',
      ),
      Param(
        type = 'int',
        name = 'level',
      ),
    ],
  ),
  'g_zlib_compressor_get_file_info': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GZlibCompressor *',
        name = 'compressor',
      ),
    ],
  ),
  'g_zlib_compressor_set_file_info': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GZlibCompressor *',
        name = 'compressor',
      ),
      Param(
        type = 'GFileInfo *',
        name = 'file_info',
      ),
    ],
  ),
  'g_zlib_decompressor_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_zlib_decompressor_new': Spec(
    return_type = 'GZlibDecompressor *',
    parameters = [
      Param(
        type = 'GZlibCompressorFormat',
        name = 'format',
      ),
    ],
  ),
  'g_zlib_decompressor_get_file_info': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GZlibDecompressor *',
        name = 'decompressor',
      ),
    ],
  ),
  'g_dbus_interface_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_interface_get_info': Spec(
    return_type = 'GDBusInterfaceInfo *',
    parameters = [
      Param(
        type = 'GDBusInterface *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_interface_get_object': Spec(
    return_type = 'GDBusObject *',
    parameters = [
      Param(
        type = 'GDBusInterface *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_interface_set_object': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusInterface *',
        name = 'interface_',
      ),
      Param(
        type = 'GDBusObject *',
        name = 'object',
      ),
    ],
  ),
  'g_dbus_interface_dup_object': Spec(
    return_type = 'GDBusObject *',
    parameters = [
      Param(
        type = 'GDBusInterface *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_interface_skeleton_get_flags': Spec(
    return_type = 'GDBusInterfaceSkeletonFlags',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_set_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
      Param(
        type = 'GDBusInterfaceSkeletonFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_get_info': Spec(
    return_type = 'GDBusInterfaceInfo *',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_get_vtable': Spec(
    return_type = 'GDBusInterfaceVTable *',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_get_properties': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_flush': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_export': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_unexport': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_unexport_from_connection': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_get_connection': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_get_connections': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_has_connection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_get_object_path': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_object_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_object_get_object_path': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusObject *',
        name = 'object',
      ),
    ],
  ),
  'g_dbus_object_get_interfaces': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GDBusObject *',
        name = 'object',
      ),
    ],
  ),
  'g_dbus_object_get_interface': Spec(
    return_type = 'GDBusInterface *',
    parameters = [
      Param(
        type = 'GDBusObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
    ],
  ),
  'g_dbus_object_skeleton_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_object_skeleton_new': Spec(
    return_type = 'GDBusObjectSkeleton *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
    ],
  ),
  'g_dbus_object_skeleton_flush': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusObjectSkeleton *',
        name = 'object',
      ),
    ],
  ),
  'g_dbus_object_skeleton_add_interface': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusObjectSkeleton *',
        name = 'object',
      ),
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_object_skeleton_remove_interface': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusObjectSkeleton *',
        name = 'object',
      ),
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_object_skeleton_remove_interface_by_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusObjectSkeleton *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
    ],
  ),
  'g_dbus_object_skeleton_set_object_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusObjectSkeleton *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
    ],
  ),
  'g_dbus_object_proxy_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_object_proxy_new': Spec(
    return_type = 'GDBusObjectProxy *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
    ],
  ),
  'g_dbus_object_proxy_get_connection': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GDBusObjectProxy *',
        name = 'proxy',
      ),
    ],
  ),
  'g_dbus_object_manager_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_object_manager_get_object_path': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusObjectManager *',
        name = 'manager',
      ),
    ],
  ),
  'g_dbus_object_manager_get_objects': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GDBusObjectManager *',
        name = 'manager',
      ),
    ],
  ),
  'g_dbus_object_manager_get_object': Spec(
    return_type = 'GDBusObject *',
    parameters = [
      Param(
        type = 'GDBusObjectManager *',
        name = 'manager',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
    ],
  ),
  'g_dbus_object_manager_get_interface': Spec(
    return_type = 'GDBusInterface *',
    parameters = [
      Param(
        type = 'GDBusObjectManager *',
        name = 'manager',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
    ],
  ),
  'g_dbus_object_manager_client_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_object_manager_client_new': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GDBusObjectManagerClientFlags',
        name = 'flags',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'GDBusProxyTypeFunc',
        name = 'get_proxy_type_func',
      ),
      Param(
        type = 'gpointer',
        name = 'get_proxy_type_user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'get_proxy_type_destroy_notify',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_object_manager_client_new_finish': Spec(
    return_type = 'GDBusObjectManager *',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_object_manager_client_new_sync': Spec(
    return_type = 'GDBusObjectManager *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GDBusObjectManagerClientFlags',
        name = 'flags',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'GDBusProxyTypeFunc',
        name = 'get_proxy_type_func',
      ),
      Param(
        type = 'gpointer',
        name = 'get_proxy_type_user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'get_proxy_type_destroy_notify',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_object_manager_client_new_for_bus': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBusType',
        name = 'bus_type',
      ),
      Param(
        type = 'GDBusObjectManagerClientFlags',
        name = 'flags',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'GDBusProxyTypeFunc',
        name = 'get_proxy_type_func',
      ),
      Param(
        type = 'gpointer',
        name = 'get_proxy_type_user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'get_proxy_type_destroy_notify',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_object_manager_client_new_for_bus_finish': Spec(
    return_type = 'GDBusObjectManager *',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_object_manager_client_new_for_bus_sync': Spec(
    return_type = 'GDBusObjectManager *',
    parameters = [
      Param(
        type = 'GBusType',
        name = 'bus_type',
      ),
      Param(
        type = 'GDBusObjectManagerClientFlags',
        name = 'flags',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'GDBusProxyTypeFunc',
        name = 'get_proxy_type_func',
      ),
      Param(
        type = 'gpointer',
        name = 'get_proxy_type_user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'get_proxy_type_destroy_notify',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_object_manager_client_get_connection': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GDBusObjectManagerClient *',
        name = 'manager',
      ),
    ],
  ),
  'g_dbus_object_manager_client_get_flags': Spec(
    return_type = 'GDBusObjectManagerClientFlags',
    parameters = [
      Param(
        type = 'GDBusObjectManagerClient *',
        name = 'manager',
      ),
    ],
  ),
  'g_dbus_object_manager_client_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusObjectManagerClient *',
        name = 'manager',
      ),
    ],
  ),
  'g_dbus_object_manager_client_get_name_owner': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GDBusObjectManagerClient *',
        name = 'manager',
      ),
    ],
  ),
  'g_dbus_object_manager_server_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_object_manager_server_new': Spec(
    return_type = 'GDBusObjectManagerServer *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
    ],
  ),
  'g_dbus_object_manager_server_get_connection': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GDBusObjectManagerServer *',
        name = 'manager',
      ),
    ],
  ),
  'g_dbus_object_manager_server_set_connection': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusObjectManagerServer *',
        name = 'manager',
      ),
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_object_manager_server_export': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusObjectManagerServer *',
        name = 'manager',
      ),
      Param(
        type = 'GDBusObjectSkeleton *',
        name = 'object',
      ),
    ],
  ),
  'g_dbus_object_manager_server_export_uniquely': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusObjectManagerServer *',
        name = 'manager',
      ),
      Param(
        type = 'GDBusObjectSkeleton *',
        name = 'object',
      ),
    ],
  ),
  'g_dbus_object_manager_server_is_exported': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusObjectManagerServer *',
        name = 'manager',
      ),
      Param(
        type = 'GDBusObjectSkeleton *',
        name = 'object',
      ),
    ],
  ),
  'g_dbus_object_manager_server_unexport': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusObjectManagerServer *',
        name = 'manager',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
    ],
  ),
  'g_dbus_action_group_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_action_group_get': Spec(
    return_type = 'GDBusActionGroup *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'bus_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
    ],
  ),
  'g_remote_action_group_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_remote_action_group_activate_action_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRemoteActionGroup *',
        name = 'remote',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameter',
      ),
      Param(
        type = 'GVariant *',
        name = 'platform_data',
      ),
    ],
  ),
  'g_remote_action_group_change_action_state_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRemoteActionGroup *',
        name = 'remote',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'GVariant *',
        name = 'platform_data',
      ),
    ],
  ),
  'g_menu_model_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_menu_model_is_mutable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMenuModel *',
        name = 'model',
      ),
    ],
  ),
  'g_menu_model_get_n_items': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GMenuModel *',
        name = 'model',
      ),
    ],
  ),
  'g_menu_model_iterate_item_attributes': Spec(
    return_type = 'GMenuAttributeIter *',
    parameters = [
      Param(
        type = 'GMenuModel *',
        name = 'model',
      ),
      Param(
        type = 'gint',
        name = 'item_index',
      ),
    ],
  ),
  'g_menu_model_get_item_attribute_value': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GMenuModel *',
        name = 'model',
      ),
      Param(
        type = 'gint',
        name = 'item_index',
      ),
      Param(
        type = 'const gchar *',
        name = 'attribute',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'expected_type',
      ),
    ],
  ),
  'g_menu_model_get_item_attribute': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMenuModel *',
        name = 'model',
      ),
      Param(
        type = 'gint',
        name = 'item_index',
      ),
      Param(
        type = 'const gchar *',
        name = 'attribute',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
    ],
  ),
  'g_menu_model_iterate_item_links': Spec(
    return_type = 'GMenuLinkIter *',
    parameters = [
      Param(
        type = 'GMenuModel *',
        name = 'model',
      ),
      Param(
        type = 'gint',
        name = 'item_index',
      ),
    ],
  ),
  'g_menu_model_get_item_link': Spec(
    return_type = 'GMenuModel *',
    parameters = [
      Param(
        type = 'GMenuModel *',
        name = 'model',
      ),
      Param(
        type = 'gint',
        name = 'item_index',
      ),
      Param(
        type = 'const gchar *',
        name = 'link',
      ),
    ],
  ),
  'g_menu_model_items_changed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenuModel *',
        name = 'model',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
      Param(
        type = 'gint',
        name = 'removed',
      ),
      Param(
        type = 'gint',
        name = 'added',
      ),
    ],
  ),
  'g_menu_attribute_iter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_menu_attribute_iter_get_next': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMenuAttributeIter *',
        name = 'iter',
      ),
      Param(
        type = 'const gchar **',
        name = 'out_name',
      ),
      Param(
        type = 'GVariant **',
        name = 'value',
      ),
    ],
  ),
  'g_menu_attribute_iter_next': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMenuAttributeIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_menu_attribute_iter_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GMenuAttributeIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_menu_attribute_iter_get_value': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GMenuAttributeIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_menu_link_iter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_menu_link_iter_get_next': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMenuLinkIter *',
        name = 'iter',
      ),
      Param(
        type = 'const gchar **',
        name = 'out_link',
      ),
      Param(
        type = 'GMenuModel **',
        name = 'value',
      ),
    ],
  ),
  'g_menu_link_iter_next': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMenuLinkIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_menu_link_iter_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GMenuLinkIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_menu_link_iter_get_value': Spec(
    return_type = 'GMenuModel *',
    parameters = [
      Param(
        type = 'GMenuLinkIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_menu_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_menu_new': Spec(
    return_type = 'GMenu *',
    parameters = [
    ],
  ),
  'g_menu_freeze': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
    ],
  ),
  'g_menu_insert_item': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
      Param(
        type = 'GMenuItem *',
        name = 'item',
      ),
    ],
  ),
  'g_menu_prepend_item': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'GMenuItem *',
        name = 'item',
      ),
    ],
  ),
  'g_menu_append_item': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'GMenuItem *',
        name = 'item',
      ),
    ],
  ),
  'g_menu_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'g_menu_insert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'const gchar *',
        name = 'detailed_action',
      ),
    ],
  ),
  'g_menu_prepend': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'const gchar *',
        name = 'detailed_action',
      ),
    ],
  ),
  'g_menu_append': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'const gchar *',
        name = 'detailed_action',
      ),
    ],
  ),
  'g_menu_insert_section': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'section',
      ),
    ],
  ),
  'g_menu_prepend_section': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'section',
      ),
    ],
  ),
  'g_menu_append_section': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'section',
      ),
    ],
  ),
  'g_menu_insert_submenu': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'submenu',
      ),
    ],
  ),
  'g_menu_prepend_submenu': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'submenu',
      ),
    ],
  ),
  'g_menu_append_submenu': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'submenu',
      ),
    ],
  ),
  'g_menu_item_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_menu_item_new': Spec(
    return_type = 'GMenuItem *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'const gchar *',
        name = 'detailed_action',
      ),
    ],
  ),
  'g_menu_item_new_from_model': Spec(
    return_type = 'GMenuItem *',
    parameters = [
      Param(
        type = 'GMenuModel *',
        name = 'model',
      ),
      Param(
        type = 'gint',
        name = 'item_index',
      ),
    ],
  ),
  'g_menu_item_new_submenu': Spec(
    return_type = 'GMenuItem *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'submenu',
      ),
    ],
  ),
  'g_menu_item_new_section': Spec(
    return_type = 'GMenuItem *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'section',
      ),
    ],
  ),
  'g_menu_item_get_attribute_value': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'attribute',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'expected_type',
      ),
    ],
  ),
  'g_menu_item_get_attribute': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'attribute',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
    ],
  ),
  'g_menu_item_get_link': Spec(
    return_type = 'GMenuModel *',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'link',
      ),
    ],
  ),
  'g_menu_item_set_attribute_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'attribute',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_menu_item_set_attribute': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'attribute',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
    ],
  ),
  'g_menu_item_set_link': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'link',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'model',
      ),
    ],
  ),
  'g_menu_item_set_label': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'g_menu_item_set_submenu': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'submenu',
      ),
    ],
  ),
  'g_menu_item_set_section': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'section',
      ),
    ],
  ),
  'g_menu_item_set_action_and_target_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'action',
      ),
      Param(
        type = 'GVariant *',
        name = 'target_value',
      ),
    ],
  ),
  'g_menu_item_set_action_and_target': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'action',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
    ],
  ),
  'g_menu_item_set_detailed_action': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'detailed_action',
      ),
    ],
  ),
  'g_dbus_connection_export_menu_model': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'menu',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_unexport_menu_model': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'guint',
        name = 'export_id',
      ),
    ],
  ),
  'g_dbus_menu_model_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_menu_model_get': Spec(
    return_type = 'GDBusMenuModel *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'bus_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
    ],
  ),
  'json_generator_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'json_generator_new': Spec(
    return_type = 'JsonGenerator *',
    parameters = [
    ],
  ),
  'json_generator_set_pretty': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonGenerator *',
        name = 'generator',
      ),
      Param(
        type = 'gboolean',
        name = 'is_pretty',
      ),
    ],
  ),
  'json_generator_get_pretty': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonGenerator *',
        name = 'generator',
      ),
    ],
  ),
  'json_generator_set_indent': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonGenerator *',
        name = 'generator',
      ),
      Param(
        type = 'guint',
        name = 'indent_level',
      ),
    ],
  ),
  'json_generator_get_indent': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'JsonGenerator *',
        name = 'generator',
      ),
    ],
  ),
  'json_generator_set_indent_char': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonGenerator *',
        name = 'generator',
      ),
      Param(
        type = 'gunichar',
        name = 'indent_char',
      ),
    ],
  ),
  'json_generator_get_indent_char': Spec(
    return_type = 'gunichar',
    parameters = [
      Param(
        type = 'JsonGenerator *',
        name = 'generator',
      ),
    ],
  ),
  'json_generator_set_root': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonGenerator *',
        name = 'generator',
      ),
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_generator_get_root': Spec(
    return_type = 'JsonNode *',
    parameters = [
      Param(
        type = 'JsonGenerator *',
        name = 'generator',
      ),
    ],
  ),
  'json_generator_to_data': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'JsonGenerator *',
        name = 'generator',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'json_generator_to_file': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonGenerator *',
        name = 'generator',
      ),
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'json_generator_to_stream': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonGenerator *',
        name = 'generator',
      ),
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'json_parser_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'json_parser_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'json_parser_new': Spec(
    return_type = 'JsonParser *',
    parameters = [
    ],
  ),
  'json_parser_load_from_file': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonParser *',
        name = 'parser',
      ),
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'json_parser_load_from_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonParser *',
        name = 'parser',
      ),
      Param(
        type = 'const gchar *',
        name = 'data',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'json_parser_load_from_stream': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonParser *',
        name = 'parser',
      ),
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'json_parser_load_from_stream_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonParser *',
        name = 'parser',
      ),
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'json_parser_load_from_stream_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonParser *',
        name = 'parser',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'json_parser_get_root': Spec(
    return_type = 'JsonNode *',
    parameters = [
      Param(
        type = 'JsonParser *',
        name = 'parser',
      ),
    ],
  ),
  'json_parser_get_current_line': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'JsonParser *',
        name = 'parser',
      ),
    ],
  ),
  'json_parser_get_current_pos': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'JsonParser *',
        name = 'parser',
      ),
    ],
  ),
  'json_parser_has_assignment': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonParser *',
        name = 'parser',
      ),
      Param(
        type = 'gchar **',
        name = 'variable_name',
      ),
    ],
  ),
  'json_path_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'json_path_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'json_path_new': Spec(
    return_type = 'JsonPath *',
    parameters = [
    ],
  ),
  'json_path_compile': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonPath *',
        name = 'path',
      ),
      Param(
        type = 'const char *',
        name = 'expression',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'json_path_match': Spec(
    return_type = 'JsonNode *',
    parameters = [
      Param(
        type = 'JsonPath *',
        name = 'path',
      ),
      Param(
        type = 'JsonNode *',
        name = 'root',
      ),
    ],
  ),
  'json_path_query': Spec(
    return_type = 'JsonNode *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'expression',
      ),
      Param(
        type = 'JsonNode *',
        name = 'root',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'json_reader_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'json_reader_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'json_reader_new': Spec(
    return_type = 'JsonReader *',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_reader_set_root': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonReader *',
        name = 'reader',
      ),
      Param(
        type = 'JsonNode *',
        name = 'root',
      ),
    ],
  ),
  'json_reader_get_error': Spec(
    return_type = 'const GError *',
    parameters = [
      Param(
        type = 'JsonReader *',
        name = 'reader',
      ),
    ],
  ),
  'json_reader_is_array': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonReader *',
        name = 'reader',
      ),
    ],
  ),
  'json_reader_read_element': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonReader *',
        name = 'reader',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'json_reader_end_element': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonReader *',
        name = 'reader',
      ),
    ],
  ),
  'json_reader_count_elements': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'JsonReader *',
        name = 'reader',
      ),
    ],
  ),
  'json_reader_is_object': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonReader *',
        name = 'reader',
      ),
    ],
  ),
  'json_reader_read_member': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonReader *',
        name = 'reader',
      ),
      Param(
        type = 'const gchar *',
        name = 'member_name',
      ),
    ],
  ),
  'json_reader_end_member': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonReader *',
        name = 'reader',
      ),
    ],
  ),
  'json_reader_count_members': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'JsonReader *',
        name = 'reader',
      ),
    ],
  ),
  'json_reader_list_members': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'JsonReader *',
        name = 'reader',
      ),
    ],
  ),
  'json_reader_get_member_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'JsonReader *',
        name = 'reader',
      ),
    ],
  ),
  'json_reader_is_value': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonReader *',
        name = 'reader',
      ),
    ],
  ),
  'json_reader_get_value': Spec(
    return_type = 'JsonNode *',
    parameters = [
      Param(
        type = 'JsonReader *',
        name = 'reader',
      ),
    ],
  ),
  'json_reader_get_int_value': Spec(
    return_type = 'gint64',
    parameters = [
      Param(
        type = 'JsonReader *',
        name = 'reader',
      ),
    ],
  ),
  'json_reader_get_double_value': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'JsonReader *',
        name = 'reader',
      ),
    ],
  ),
  'json_reader_get_string_value': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'JsonReader *',
        name = 'reader',
      ),
    ],
  ),
  'json_reader_get_boolean_value': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonReader *',
        name = 'reader',
      ),
    ],
  ),
  'json_reader_get_null_value': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonReader *',
        name = 'reader',
      ),
    ],
  ),
  'json_parser_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'json_path_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'json_reader_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'json_node_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'json_serializable_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'json_serializable_serialize_property': Spec(
    return_type = 'JsonNode *',
    parameters = [
      Param(
        type = 'JsonSerializable *',
        name = 'serializable',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'json_serializable_deserialize_property': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonSerializable *',
        name = 'serializable',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'JsonNode *',
        name = 'property_node',
      ),
    ],
  ),
  'json_serializable_find_property': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'JsonSerializable *',
        name = 'serializable',
      ),
      Param(
        type = 'const char *',
        name = 'name',
      ),
    ],
  ),
  'json_serializable_list_properties': Spec(
    return_type = 'GParamSpec **',
    parameters = [
      Param(
        type = 'JsonSerializable *',
        name = 'serializable',
      ),
      Param(
        type = 'guint *',
        name = 'n_pspecs',
      ),
    ],
  ),
  'json_serializable_set_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonSerializable *',
        name = 'serializable',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'json_serializable_get_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'JsonSerializable *',
        name = 'serializable',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'json_serializable_default_serialize_property': Spec(
    return_type = 'JsonNode *',
    parameters = [
      Param(
        type = 'JsonSerializable *',
        name = 'serializable',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'json_serializable_default_deserialize_property': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'JsonSerializable *',
        name = 'serializable',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'JsonNode *',
        name = 'property_node',
      ),
    ],
  ),
  'json_boxed_register_serialize_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'gboxed_type',
      ),
      Param(
        type = 'JsonNodeType',
        name = 'node_type',
      ),
      Param(
        type = 'JsonBoxedSerializeFunc',
        name = 'serialize_func',
      ),
    ],
  ),
  'json_boxed_register_deserialize_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'gboxed_type',
      ),
      Param(
        type = 'JsonNodeType',
        name = 'node_type',
      ),
      Param(
        type = 'JsonBoxedDeserializeFunc',
        name = 'deserialize_func',
      ),
    ],
  ),
  'json_boxed_can_serialize': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GType',
        name = 'gboxed_type',
      ),
      Param(
        type = 'JsonNodeType *',
        name = 'node_type',
      ),
    ],
  ),
  'json_boxed_can_deserialize': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GType',
        name = 'gboxed_type',
      ),
      Param(
        type = 'JsonNodeType',
        name = 'node_type',
      ),
    ],
  ),
  'json_boxed_serialize': Spec(
    return_type = 'JsonNode *',
    parameters = [
      Param(
        type = 'GType',
        name = 'gboxed_type',
      ),
      Param(
        type = 'gconstpointer',
        name = 'boxed',
      ),
    ],
  ),
  'json_boxed_deserialize': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'gboxed_type',
      ),
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_gobject_serialize': Spec(
    return_type = 'JsonNode *',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'gobject',
      ),
    ],
  ),
  'json_gobject_deserialize': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'GType',
        name = 'gtype',
      ),
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'json_gobject_from_data': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'GType',
        name = 'gtype',
      ),
      Param(
        type = 'const gchar *',
        name = 'data',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'json_gobject_to_data': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'gobject',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'json_construct_gobject': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'GType',
        name = 'gtype',
      ),
      Param(
        type = 'const gchar *',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'json_serialize_gobject': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'gobject',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'json_gvariant_serialize': Spec(
    return_type = 'JsonNode *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'variant',
      ),
    ],
  ),
  'json_gvariant_serialize_data': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'variant',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'json_gvariant_deserialize': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'JsonNode *',
        name = 'json_node',
      ),
      Param(
        type = 'const gchar *',
        name = 'signature',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'json_gvariant_deserialize_data': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'json',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
      Param(
        type = 'const gchar *',
        name = 'signature',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'clutter_script_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'clutter_script_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_script_new': Spec(
    return_type = 'ClutterScript *',
    parameters = [
    ],
  ),
  'clutter_script_load_from_file': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterScript *',
        name = 'script',
      ),
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'clutter_script_load_from_data': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterScript *',
        name = 'script',
      ),
      Param(
        type = 'const gchar *',
        name = 'data',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'clutter_script_load_from_resource': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterScript *',
        name = 'script',
      ),
      Param(
        type = 'const gchar *',
        name = 'resource_path',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'clutter_script_get_object': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'ClutterScript *',
        name = 'script',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'clutter_script_get_objects': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'ClutterScript *',
        name = 'script',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_name',
      ),
    ],
  ),
  'clutter_script_list_objects': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'ClutterScript *',
        name = 'script',
      ),
    ],
  ),
  'clutter_script_unmerge_objects': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterScript *',
        name = 'script',
      ),
      Param(
        type = 'guint',
        name = 'merge_id',
      ),
    ],
  ),
  'clutter_script_ensure_objects': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterScript *',
        name = 'script',
      ),
    ],
  ),
  'clutter_script_add_states': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterScript *',
        name = 'script',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'ClutterState *',
        name = 'state',
      ),
    ],
  ),
  'clutter_script_get_states': Spec(
    return_type = 'ClutterState *',
    parameters = [
      Param(
        type = 'ClutterScript *',
        name = 'script',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'clutter_script_connect_signals': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterScript *',
        name = 'script',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'clutter_script_connect_signals_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterScript *',
        name = 'script',
      ),
      Param(
        type = 'ClutterScriptConnectFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'clutter_script_add_search_paths': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterScript *',
        name = 'script',
      ),
      Param(
        type = 'const gchar *const []',
        name = 'paths',
      ),
      Param(
        type = 'gsize',
        name = 'n_paths',
      ),
    ],
  ),
  'clutter_script_lookup_filename': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'ClutterScript *',
        name = 'script',
      ),
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
    ],
  ),
  'clutter_script_get_type_from_name': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'ClutterScript *',
        name = 'script',
      ),
      Param(
        type = 'const gchar *',
        name = 'type_name',
      ),
    ],
  ),
  'clutter_script_set_translation_domain': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterScript *',
        name = 'script',
      ),
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
    ],
  ),
  'clutter_script_get_translation_domain': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'ClutterScript *',
        name = 'script',
      ),
    ],
  ),
  'clutter_get_script_id': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'gobject',
      ),
    ],
  ),
  'clutter_scriptable_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_scriptable_set_id': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterScriptable *',
        name = 'scriptable',
      ),
      Param(
        type = 'const gchar *',
        name = 'id_',
      ),
    ],
  ),
  'clutter_scriptable_get_id': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'ClutterScriptable *',
        name = 'scriptable',
      ),
    ],
  ),
  'clutter_scriptable_parse_custom_node': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterScriptable *',
        name = 'scriptable',
      ),
      Param(
        type = 'ClutterScript *',
        name = 'script',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'JsonNode *',
        name = 'node',
      ),
    ],
  ),
  'clutter_scriptable_set_custom_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterScriptable *',
        name = 'scriptable',
      ),
      Param(
        type = 'ClutterScript *',
        name = 'script',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_scroll_actor_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_scroll_actor_new': Spec(
    return_type = 'ClutterActor *',
    parameters = [
    ],
  ),
  'clutter_scroll_actor_set_scroll_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterScrollActor *',
        name = 'actor',
      ),
      Param(
        type = 'ClutterScrollMode',
        name = 'mode',
      ),
    ],
  ),
  'clutter_scroll_actor_get_scroll_mode': Spec(
    return_type = 'ClutterScrollMode',
    parameters = [
      Param(
        type = 'ClutterScrollActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_scroll_actor_scroll_to_point': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterScrollActor *',
        name = 'actor',
      ),
      Param(
        type = 'const ClutterPoint *',
        name = 'point',
      ),
    ],
  ),
  'clutter_scroll_actor_scroll_to_rect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterScrollActor *',
        name = 'actor',
      ),
      Param(
        type = 'const ClutterRect *',
        name = 'rect',
      ),
    ],
  ),
  'clutter_settings_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_settings_get_default': Spec(
    return_type = 'ClutterSettings *',
    parameters = [
    ],
  ),
  'clutter_shader_effect_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_shader_effect_new': Spec(
    return_type = 'ClutterEffect *',
    parameters = [
      Param(
        type = 'ClutterShaderType',
        name = 'shader_type',
      ),
    ],
  ),
  'clutter_shader_effect_set_shader_source': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterShaderEffect *',
        name = 'effect',
      ),
      Param(
        type = 'const gchar *',
        name = 'source',
      ),
    ],
  ),
  'clutter_shader_effect_set_uniform': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterShaderEffect *',
        name = 'effect',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GType',
        name = 'gtype',
      ),
      Param(
        type = 'gsize',
        name = 'n_values',
      ),
    ],
  ),
  'clutter_shader_effect_set_uniform_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterShaderEffect *',
        name = 'effect',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_shader_effect_get_shader': Spec(
    return_type = 'CoglHandle',
    parameters = [
      Param(
        type = 'ClutterShaderEffect *',
        name = 'effect',
      ),
    ],
  ),
  'clutter_shader_effect_get_program': Spec(
    return_type = 'CoglHandle',
    parameters = [
      Param(
        type = 'ClutterShaderEffect *',
        name = 'effect',
      ),
    ],
  ),
  'clutter_shader_float_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_shader_int_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_shader_matrix_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_value_set_shader_float': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gint',
        name = 'size',
      ),
      Param(
        type = 'const gfloat *',
        name = 'floats',
      ),
    ],
  ),
  'clutter_value_set_shader_int': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gint',
        name = 'size',
      ),
      Param(
        type = 'const gint *',
        name = 'ints',
      ),
    ],
  ),
  'clutter_value_set_shader_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gint',
        name = 'size',
      ),
      Param(
        type = 'const gfloat *',
        name = 'matrix',
      ),
    ],
  ),
  'clutter_value_get_shader_float': Spec(
    return_type = 'const gfloat *',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'clutter_value_get_shader_int': Spec(
    return_type = 'const gint *',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'clutter_value_get_shader_matrix': Spec(
    return_type = 'const gfloat *',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'clutter_swipe_action_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_swipe_action_new': Spec(
    return_type = 'ClutterAction *',
    parameters = [
    ],
  ),
  'clutter_snap_constraint_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_snap_constraint_new': Spec(
    return_type = 'ClutterConstraint *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'source',
      ),
      Param(
        type = 'ClutterSnapEdge',
        name = 'from_edge',
      ),
      Param(
        type = 'ClutterSnapEdge',
        name = 'to_edge',
      ),
      Param(
        type = 'gfloat',
        name = 'offset',
      ),
    ],
  ),
  'clutter_snap_constraint_set_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterSnapConstraint *',
        name = 'constraint',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'source',
      ),
    ],
  ),
  'clutter_snap_constraint_get_source': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterSnapConstraint *',
        name = 'constraint',
      ),
    ],
  ),
  'clutter_snap_constraint_set_edges': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterSnapConstraint *',
        name = 'constraint',
      ),
      Param(
        type = 'ClutterSnapEdge',
        name = 'from_edge',
      ),
      Param(
        type = 'ClutterSnapEdge',
        name = 'to_edge',
      ),
    ],
  ),
  'clutter_snap_constraint_get_edges': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterSnapConstraint *',
        name = 'constraint',
      ),
      Param(
        type = 'ClutterSnapEdge *',
        name = 'from_edge',
      ),
      Param(
        type = 'ClutterSnapEdge *',
        name = 'to_edge',
      ),
    ],
  ),
  'clutter_snap_constraint_set_offset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterSnapConstraint *',
        name = 'constraint',
      ),
      Param(
        type = 'gfloat',
        name = 'offset',
      ),
    ],
  ),
  'clutter_snap_constraint_get_offset': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'ClutterSnapConstraint *',
        name = 'constraint',
      ),
    ],
  ),
  'clutter_stage_manager_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_stage_manager_get_default': Spec(
    return_type = 'ClutterStageManager *',
    parameters = [
    ],
  ),
  'clutter_stage_manager_get_default_stage': Spec(
    return_type = 'ClutterStage *',
    parameters = [
      Param(
        type = 'ClutterStageManager *',
        name = 'stage_manager',
      ),
    ],
  ),
  'clutter_stage_manager_list_stages': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'ClutterStageManager *',
        name = 'stage_manager',
      ),
    ],
  ),
  'clutter_stage_manager_peek_stages': Spec(
    return_type = 'const GSList *',
    parameters = [
      Param(
        type = 'ClutterStageManager *',
        name = 'stage_manager',
      ),
    ],
  ),
  'clutter_table_layout_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_table_layout_new': Spec(
    return_type = 'ClutterLayoutManager *',
    parameters = [
    ],
  ),
  'clutter_table_layout_pack': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTableLayout *',
        name = 'layout',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
    ],
  ),
  'clutter_table_layout_set_column_spacing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTableLayout *',
        name = 'layout',
      ),
      Param(
        type = 'guint',
        name = 'spacing',
      ),
    ],
  ),
  'clutter_table_layout_set_row_spacing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTableLayout *',
        name = 'layout',
      ),
      Param(
        type = 'guint',
        name = 'spacing',
      ),
    ],
  ),
  'clutter_table_layout_get_column_spacing': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterTableLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_table_layout_get_row_spacing': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterTableLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_table_layout_set_span': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTableLayout *',
        name = 'layout',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'gint',
        name = 'column_span',
      ),
      Param(
        type = 'gint',
        name = 'row_span',
      ),
    ],
  ),
  'clutter_table_layout_get_span': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTableLayout *',
        name = 'layout',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'gint *',
        name = 'column_span',
      ),
      Param(
        type = 'gint *',
        name = 'row_span',
      ),
    ],
  ),
  'clutter_table_layout_set_alignment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTableLayout *',
        name = 'layout',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'ClutterTableAlignment',
        name = 'x_align',
      ),
      Param(
        type = 'ClutterTableAlignment',
        name = 'y_align',
      ),
    ],
  ),
  'clutter_table_layout_get_alignment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTableLayout *',
        name = 'layout',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'ClutterTableAlignment *',
        name = 'x_align',
      ),
      Param(
        type = 'ClutterTableAlignment *',
        name = 'y_align',
      ),
    ],
  ),
  'clutter_table_layout_set_fill': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTableLayout *',
        name = 'layout',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'gboolean',
        name = 'x_fill',
      ),
      Param(
        type = 'gboolean',
        name = 'y_fill',
      ),
    ],
  ),
  'clutter_table_layout_get_fill': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTableLayout *',
        name = 'layout',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'gboolean *',
        name = 'x_fill',
      ),
      Param(
        type = 'gboolean *',
        name = 'y_fill',
      ),
    ],
  ),
  'clutter_table_layout_set_expand': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTableLayout *',
        name = 'layout',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'gboolean',
        name = 'x_expand',
      ),
      Param(
        type = 'gboolean',
        name = 'y_expand',
      ),
    ],
  ),
  'clutter_table_layout_get_expand': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTableLayout *',
        name = 'layout',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'gboolean *',
        name = 'x_expand',
      ),
      Param(
        type = 'gboolean *',
        name = 'y_expand',
      ),
    ],
  ),
  'clutter_table_layout_get_row_count': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'ClutterTableLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_table_layout_get_column_count': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'ClutterTableLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_table_layout_set_use_animations': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTableLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gboolean',
        name = 'animate',
      ),
    ],
  ),
  'clutter_table_layout_get_use_animations': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterTableLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_table_layout_set_easing_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTableLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gulong',
        name = 'mode',
      ),
    ],
  ),
  'clutter_table_layout_get_easing_mode': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'ClutterTableLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_table_layout_set_easing_duration': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTableLayout *',
        name = 'layout',
      ),
      Param(
        type = 'guint',
        name = 'msecs',
      ),
    ],
  ),
  'clutter_table_layout_get_easing_duration': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterTableLayout *',
        name = 'layout',
      ),
    ],
  ),
  'clutter_texture_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'clutter_texture_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_text_buffer_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_text_buffer_new': Spec(
    return_type = 'ClutterTextBuffer *',
    parameters = [
    ],
  ),
  'clutter_text_buffer_new_with_text': Spec(
    return_type = 'ClutterTextBuffer *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'gssize',
        name = 'text_len',
      ),
    ],
  ),
  'clutter_text_buffer_get_bytes': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'ClutterTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'clutter_text_buffer_get_length': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'clutter_text_buffer_get_text': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'ClutterTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'clutter_text_buffer_set_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'const gchar *',
        name = 'chars',
      ),
      Param(
        type = 'gint',
        name = 'n_chars',
      ),
    ],
  ),
  'clutter_text_buffer_set_max_length': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'gint',
        name = 'max_length',
      ),
    ],
  ),
  'clutter_text_buffer_get_max_length': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'ClutterTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'clutter_text_buffer_insert_text': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'guint',
        name = 'position',
      ),
      Param(
        type = 'const gchar *',
        name = 'chars',
      ),
      Param(
        type = 'gint',
        name = 'n_chars',
      ),
    ],
  ),
  'clutter_text_buffer_delete_text': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'guint',
        name = 'position',
      ),
      Param(
        type = 'gint',
        name = 'n_chars',
      ),
    ],
  ),
  'clutter_text_buffer_emit_inserted_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'guint',
        name = 'position',
      ),
      Param(
        type = 'const gchar *',
        name = 'chars',
      ),
      Param(
        type = 'guint',
        name = 'n_chars',
      ),
    ],
  ),
  'clutter_text_buffer_emit_deleted_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'guint',
        name = 'position',
      ),
      Param(
        type = 'guint',
        name = 'n_chars',
      ),
    ],
  ),
  'clutter_text_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_text_new': Spec(
    return_type = 'ClutterActor *',
    parameters = [
    ],
  ),
  'clutter_text_new_full': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'font_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'const ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_text_new_with_text': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'font_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'clutter_text_new_with_buffer': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'clutter_text_get_buffer': Spec(
    return_type = 'ClutterTextBuffer *',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_set_buffer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'ClutterTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'clutter_text_get_text': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_set_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'clutter_text_set_markup': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'markup',
      ),
    ],
  ),
  'clutter_text_set_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'const ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_text_get_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_text_set_font_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'font_name',
      ),
    ],
  ),
  'clutter_text_get_font_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_set_font_description': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'PangoFontDescription *',
        name = 'font_desc',
      ),
    ],
  ),
  'clutter_text_get_font_description': Spec(
    return_type = 'PangoFontDescription *',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_set_ellipsize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'PangoEllipsizeMode',
        name = 'mode',
      ),
    ],
  ),
  'clutter_text_get_ellipsize': Spec(
    return_type = 'PangoEllipsizeMode',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_set_line_wrap': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'gboolean',
        name = 'line_wrap',
      ),
    ],
  ),
  'clutter_text_get_line_wrap': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_set_line_wrap_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'PangoWrapMode',
        name = 'wrap_mode',
      ),
    ],
  ),
  'clutter_text_get_line_wrap_mode': Spec(
    return_type = 'PangoWrapMode',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_get_layout': Spec(
    return_type = 'PangoLayout *',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_set_attributes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'PangoAttrList *',
        name = 'attrs',
      ),
    ],
  ),
  'clutter_text_get_attributes': Spec(
    return_type = 'PangoAttrList *',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_set_use_markup': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'clutter_text_get_use_markup': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_set_line_alignment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'PangoAlignment',
        name = 'alignment',
      ),
    ],
  ),
  'clutter_text_get_line_alignment': Spec(
    return_type = 'PangoAlignment',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_set_justify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'gboolean',
        name = 'justify',
      ),
    ],
  ),
  'clutter_text_get_justify': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_insert_unichar': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'gunichar',
        name = 'wc',
      ),
    ],
  ),
  'clutter_text_delete_chars': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'guint',
        name = 'n_chars',
      ),
    ],
  ),
  'clutter_text_insert_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'gssize',
        name = 'position',
      ),
    ],
  ),
  'clutter_text_delete_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'gssize',
        name = 'start_pos',
      ),
      Param(
        type = 'gssize',
        name = 'end_pos',
      ),
    ],
  ),
  'clutter_text_get_chars': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'gssize',
        name = 'start_pos',
      ),
      Param(
        type = 'gssize',
        name = 'end_pos',
      ),
    ],
  ),
  'clutter_text_set_editable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'gboolean',
        name = 'editable',
      ),
    ],
  ),
  'clutter_text_get_editable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_set_activatable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'gboolean',
        name = 'activatable',
      ),
    ],
  ),
  'clutter_text_get_activatable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_get_cursor_position': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_set_cursor_position': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'clutter_text_set_cursor_visible': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'gboolean',
        name = 'cursor_visible',
      ),
    ],
  ),
  'clutter_text_get_cursor_visible': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_set_cursor_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'const ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_text_get_cursor_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_text_set_cursor_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'gint',
        name = 'size',
      ),
    ],
  ),
  'clutter_text_get_cursor_size': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_set_selectable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'gboolean',
        name = 'selectable',
      ),
    ],
  ),
  'clutter_text_get_selectable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_set_selection_bound': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'gint',
        name = 'selection_bound',
      ),
    ],
  ),
  'clutter_text_get_selection_bound': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_set_selection': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'gssize',
        name = 'start_pos',
      ),
      Param(
        type = 'gssize',
        name = 'end_pos',
      ),
    ],
  ),
  'clutter_text_get_selection': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_set_selection_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'const ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_text_get_selection_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_text_delete_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_set_password_char': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'gunichar',
        name = 'wc',
      ),
    ],
  ),
  'clutter_text_get_password_char': Spec(
    return_type = 'gunichar',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_set_max_length': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'gint',
        name = 'max',
      ),
    ],
  ),
  'clutter_text_get_max_length': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_set_single_line_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'gboolean',
        name = 'single_line',
      ),
    ],
  ),
  'clutter_text_get_single_line_mode': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_set_selected_text_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'const ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_text_get_selected_text_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_text_activate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
    ],
  ),
  'clutter_text_coords_to_position': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'x',
      ),
      Param(
        type = 'gfloat',
        name = 'y',
      ),
    ],
  ),
  'clutter_text_position_to_coords': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
      Param(
        type = 'gfloat *',
        name = 'x',
      ),
      Param(
        type = 'gfloat *',
        name = 'y',
      ),
      Param(
        type = 'gfloat *',
        name = 'line_height',
      ),
    ],
  ),
  'clutter_text_set_preedit_string': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'preedit_str',
      ),
      Param(
        type = 'PangoAttrList *',
        name = 'preedit_attrs',
      ),
      Param(
        type = 'guint',
        name = 'cursor_pos',
      ),
    ],
  ),
  'clutter_text_get_layout_offsets': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterText *',
        name = 'self',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
    ],
  ),
  'clutter_transition_group_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_transition_group_new': Spec(
    return_type = 'ClutterTransition *',
    parameters = [
    ],
  ),
  'clutter_transition_group_add_transition': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTransitionGroup *',
        name = 'group',
      ),
      Param(
        type = 'ClutterTransition *',
        name = 'transition',
      ),
    ],
  ),
  'clutter_transition_group_remove_transition': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTransitionGroup *',
        name = 'group',
      ),
      Param(
        type = 'ClutterTransition *',
        name = 'transition',
      ),
    ],
  ),
  'clutter_transition_group_remove_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTransitionGroup *',
        name = 'group',
      ),
    ],
  ),
  'clutter_units_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_units_get_unit_type': Spec(
    return_type = 'ClutterUnitType',
    parameters = [
      Param(
        type = 'const ClutterUnits *',
        name = 'units',
      ),
    ],
  ),
  'clutter_units_get_unit_value': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'const ClutterUnits *',
        name = 'units',
      ),
    ],
  ),
  'clutter_units_copy': Spec(
    return_type = 'ClutterUnits *',
    parameters = [
      Param(
        type = 'const ClutterUnits *',
        name = 'units',
      ),
    ],
  ),
  'clutter_units_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterUnits *',
        name = 'units',
      ),
    ],
  ),
  'clutter_units_from_pixels': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterUnits *',
        name = 'units',
      ),
      Param(
        type = 'gint',
        name = 'px',
      ),
    ],
  ),
  'clutter_units_from_em': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterUnits *',
        name = 'units',
      ),
      Param(
        type = 'gfloat',
        name = 'em',
      ),
    ],
  ),
  'clutter_units_from_em_for_font': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterUnits *',
        name = 'units',
      ),
      Param(
        type = 'const gchar *',
        name = 'font_name',
      ),
      Param(
        type = 'gfloat',
        name = 'em',
      ),
    ],
  ),
  'clutter_units_from_mm': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterUnits *',
        name = 'units',
      ),
      Param(
        type = 'gfloat',
        name = 'mm',
      ),
    ],
  ),
  'clutter_units_from_cm': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterUnits *',
        name = 'units',
      ),
      Param(
        type = 'gfloat',
        name = 'cm',
      ),
    ],
  ),
  'clutter_units_from_pt': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterUnits *',
        name = 'units',
      ),
      Param(
        type = 'gfloat',
        name = 'pt',
      ),
    ],
  ),
  'clutter_units_to_pixels': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'ClutterUnits *',
        name = 'units',
      ),
    ],
  ),
  'clutter_units_from_string': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterUnits *',
        name = 'units',
      ),
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
    ],
  ),
  'clutter_units_to_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const ClutterUnits *',
        name = 'units',
      ),
    ],
  ),
  'clutter_param_units_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_param_spec_units': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'ClutterUnitType',
        name = 'default_type',
      ),
      Param(
        type = 'gfloat',
        name = 'minimum',
      ),
      Param(
        type = 'gfloat',
        name = 'maximum',
      ),
      Param(
        type = 'gfloat',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'clutter_value_set_units': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'const ClutterUnits *',
        name = 'units',
      ),
    ],
  ),
  'clutter_value_get_units': Spec(
    return_type = 'const ClutterUnits *',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_zoom_action_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_zoom_action_new': Spec(
    return_type = 'ClutterAction *',
    parameters = [
    ],
  ),
  'clutter_zoom_action_set_zoom_axis': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterZoomAction *',
        name = 'action',
      ),
      Param(
        type = 'ClutterZoomAxis',
        name = 'axis',
      ),
    ],
  ),
  'clutter_zoom_action_get_zoom_axis': Spec(
    return_type = 'ClutterZoomAxis',
    parameters = [
      Param(
        type = 'ClutterZoomAction *',
        name = 'action',
      ),
    ],
  ),
  'clutter_zoom_action_get_focal_point': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterZoomAction *',
        name = 'action',
      ),
      Param(
        type = 'ClutterPoint *',
        name = 'point',
      ),
    ],
  ),
  'clutter_zoom_action_get_transformed_focal_point': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterZoomAction *',
        name = 'action',
      ),
      Param(
        type = 'ClutterPoint *',
        name = 'point',
      ),
    ],
  ),
  'clutter_gravity_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_rotate_axis_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_rotate_direction_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_request_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_animation_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_font_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_text_direction_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_shader_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_modifier_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_actor_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_offscreen_redirect_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_allocation_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_align_axis_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_interpolation_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_bin_alignment_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_bind_coordinate_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_effect_paint_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_box_alignment_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_long_press_state_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_static_color_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_drag_axis_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_event_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_event_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_scroll_direction_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_stage_state_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_feature_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_flow_orientation_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_input_device_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_input_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_input_axis_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_snap_edge_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_pick_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_swipe_direction_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_pan_axis_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_table_alignment_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_texture_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_texture_quality_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_timeline_direction_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_unit_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_path_node_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_actor_align_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_repaint_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_content_gravity_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_scaling_filter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_orientation_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_scroll_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_grid_position_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_content_repeat_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_step_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_zoom_axis_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_image_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_init_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_script_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_texture_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_x11_filter_return_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_x11_xinput_event_types_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_actor_set_geometry': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const ClutterGeometry *',
        name = 'geometry',
      ),
    ],
  ),
  'clutter_actor_get_geometry': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterGeometry *',
        name = 'geometry',
      ),
    ],
  ),
  'clutter_actor_get_gid': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_get_actor_by_gid': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'guint32',
        name = 'id_',
      ),
    ],
  ),
  'clutter_actor_reparent': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'new_parent',
      ),
    ],
  ),
  'clutter_actor_set_parent': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'parent',
      ),
    ],
  ),
  'clutter_actor_unparent': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_raise': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'below',
      ),
    ],
  ),
  'clutter_actor_lower': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'above',
      ),
    ],
  ),
  'clutter_actor_raise_top': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_lower_bottom': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_push_internal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_pop_internal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_show_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_hide_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_depth': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'depth',
      ),
    ],
  ),
  'clutter_actor_get_depth': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_rotation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterRotateAxis',
        name = 'axis',
      ),
      Param(
        type = 'gdouble',
        name = 'angle',
      ),
      Param(
        type = 'gfloat',
        name = 'x',
      ),
      Param(
        type = 'gfloat',
        name = 'y',
      ),
      Param(
        type = 'gfloat',
        name = 'z',
      ),
    ],
  ),
  'clutter_actor_set_z_rotation_from_gravity': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gdouble',
        name = 'angle',
      ),
      Param(
        type = 'ClutterGravity',
        name = 'gravity',
      ),
    ],
  ),
  'clutter_actor_get_rotation': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterRotateAxis',
        name = 'axis',
      ),
      Param(
        type = 'gfloat *',
        name = 'x',
      ),
      Param(
        type = 'gfloat *',
        name = 'y',
      ),
      Param(
        type = 'gfloat *',
        name = 'z',
      ),
    ],
  ),
  'clutter_actor_get_z_rotation_gravity': Spec(
    return_type = 'ClutterGravity',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_scale_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gdouble',
        name = 'scale_x',
      ),
      Param(
        type = 'gdouble',
        name = 'scale_y',
      ),
      Param(
        type = 'gfloat',
        name = 'center_x',
      ),
      Param(
        type = 'gfloat',
        name = 'center_y',
      ),
    ],
  ),
  'clutter_actor_set_scale_with_gravity': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gdouble',
        name = 'scale_x',
      ),
      Param(
        type = 'gdouble',
        name = 'scale_y',
      ),
      Param(
        type = 'ClutterGravity',
        name = 'gravity',
      ),
    ],
  ),
  'clutter_actor_get_scale_center': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat *',
        name = 'center_x',
      ),
      Param(
        type = 'gfloat *',
        name = 'center_y',
      ),
    ],
  ),
  'clutter_actor_get_scale_gravity': Spec(
    return_type = 'ClutterGravity',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_anchor_point': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'anchor_x',
      ),
      Param(
        type = 'gfloat',
        name = 'anchor_y',
      ),
    ],
  ),
  'clutter_actor_move_anchor_point': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat',
        name = 'anchor_x',
      ),
      Param(
        type = 'gfloat',
        name = 'anchor_y',
      ),
    ],
  ),
  'clutter_actor_get_anchor_point': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'gfloat *',
        name = 'anchor_x',
      ),
      Param(
        type = 'gfloat *',
        name = 'anchor_y',
      ),
    ],
  ),
  'clutter_actor_get_anchor_point_gravity': Spec(
    return_type = 'ClutterGravity',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_anchor_point_from_gravity': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterGravity',
        name = 'gravity',
      ),
    ],
  ),
  'clutter_actor_move_anchor_point_from_gravity': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterGravity',
        name = 'gravity',
      ),
    ],
  ),
  'clutter_actor_get_transformation_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'clutter_actor_get_allocation_geometry': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterGeometry *',
        name = 'geom',
      ),
    ],
  ),
  'clutter_alpha_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_alpha_new': Spec(
    return_type = 'ClutterAlpha *',
    parameters = [
    ],
  ),
  'clutter_alpha_new_full': Spec(
    return_type = 'ClutterAlpha *',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
      Param(
        type = 'gulong',
        name = 'mode',
      ),
    ],
  ),
  'clutter_alpha_new_with_func': Spec(
    return_type = 'ClutterAlpha *',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
      Param(
        type = 'ClutterAlphaFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'clutter_alpha_get_alpha': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'ClutterAlpha *',
        name = 'alpha',
      ),
    ],
  ),
  'clutter_alpha_set_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAlpha *',
        name = 'alpha',
      ),
      Param(
        type = 'ClutterAlphaFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'clutter_alpha_set_closure': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAlpha *',
        name = 'alpha',
      ),
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
    ],
  ),
  'clutter_alpha_set_timeline': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAlpha *',
        name = 'alpha',
      ),
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
    ],
  ),
  'clutter_alpha_get_timeline': Spec(
    return_type = 'ClutterTimeline *',
    parameters = [
      Param(
        type = 'ClutterAlpha *',
        name = 'alpha',
      ),
    ],
  ),
  'clutter_alpha_set_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAlpha *',
        name = 'alpha',
      ),
      Param(
        type = 'gulong',
        name = 'mode',
      ),
    ],
  ),
  'clutter_alpha_get_mode': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'ClutterAlpha *',
        name = 'alpha',
      ),
    ],
  ),
  'clutter_alpha_register_func': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'ClutterAlphaFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'clutter_alpha_register_closure': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
    ],
  ),
  'clutter_animatable_animate_property': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterAnimatable *',
        name = 'animatable',
      ),
      Param(
        type = 'ClutterAnimation *',
        name = 'animation',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'const GValue *',
        name = 'initial_value',
      ),
      Param(
        type = 'const GValue *',
        name = 'final_value',
      ),
      Param(
        type = 'gdouble',
        name = 'progress',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_animation_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_animation_new': Spec(
    return_type = 'ClutterAnimation *',
    parameters = [
    ],
  ),
  'clutter_animation_set_object': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAnimation *',
        name = 'animation',
      ),
      Param(
        type = 'GObject *',
        name = 'object',
      ),
    ],
  ),
  'clutter_animation_get_object': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'ClutterAnimation *',
        name = 'animation',
      ),
    ],
  ),
  'clutter_animation_set_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAnimation *',
        name = 'animation',
      ),
      Param(
        type = 'gulong',
        name = 'mode',
      ),
    ],
  ),
  'clutter_animation_get_mode': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'ClutterAnimation *',
        name = 'animation',
      ),
    ],
  ),
  'clutter_animation_set_duration': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAnimation *',
        name = 'animation',
      ),
      Param(
        type = 'guint',
        name = 'msecs',
      ),
    ],
  ),
  'clutter_animation_get_duration': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterAnimation *',
        name = 'animation',
      ),
    ],
  ),
  'clutter_animation_set_loop': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAnimation *',
        name = 'animation',
      ),
      Param(
        type = 'gboolean',
        name = 'loop',
      ),
    ],
  ),
  'clutter_animation_get_loop': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterAnimation *',
        name = 'animation',
      ),
    ],
  ),
  'clutter_animation_set_timeline': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAnimation *',
        name = 'animation',
      ),
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
    ],
  ),
  'clutter_animation_get_timeline': Spec(
    return_type = 'ClutterTimeline *',
    parameters = [
      Param(
        type = 'ClutterAnimation *',
        name = 'animation',
      ),
    ],
  ),
  'clutter_animation_set_alpha': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAnimation *',
        name = 'animation',
      ),
      Param(
        type = 'ClutterAlpha *',
        name = 'alpha',
      ),
    ],
  ),
  'clutter_animation_get_alpha': Spec(
    return_type = 'ClutterAlpha *',
    parameters = [
      Param(
        type = 'ClutterAnimation *',
        name = 'animation',
      ),
    ],
  ),
  'clutter_animation_bind': Spec(
    return_type = 'ClutterAnimation *',
    parameters = [
      Param(
        type = 'ClutterAnimation *',
        name = 'animation',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'const GValue *',
        name = 'final',
      ),
    ],
  ),
  'clutter_animation_bind_interval': Spec(
    return_type = 'ClutterAnimation *',
    parameters = [
      Param(
        type = 'ClutterAnimation *',
        name = 'animation',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'ClutterInterval *',
        name = 'interval',
      ),
    ],
  ),
  'clutter_animation_has_property': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterAnimation *',
        name = 'animation',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
    ],
  ),
  'clutter_animation_update': Spec(
    return_type = 'ClutterAnimation *',
    parameters = [
      Param(
        type = 'ClutterAnimation *',
        name = 'animation',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'const GValue *',
        name = 'final',
      ),
    ],
  ),
  'clutter_animation_update_interval': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAnimation *',
        name = 'animation',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'ClutterInterval *',
        name = 'interval',
      ),
    ],
  ),
  'clutter_animation_unbind_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAnimation *',
        name = 'animation',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
    ],
  ),
  'clutter_animation_get_interval': Spec(
    return_type = 'ClutterInterval *',
    parameters = [
      Param(
        type = 'ClutterAnimation *',
        name = 'animation',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
    ],
  ),
  'clutter_animation_completed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAnimation *',
        name = 'animation',
      ),
    ],
  ),
  'clutter_actor_animate': Spec(
    return_type = 'ClutterAnimation *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'gulong',
        name = 'mode',
      ),
      Param(
        type = 'guint',
        name = 'duration',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
    ],
  ),
  'clutter_actor_animate_with_timeline': Spec(
    return_type = 'ClutterAnimation *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'gulong',
        name = 'mode',
      ),
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
    ],
  ),
  'clutter_actor_animatev': Spec(
    return_type = 'ClutterAnimation *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'gulong',
        name = 'mode',
      ),
      Param(
        type = 'guint',
        name = 'duration',
      ),
      Param(
        type = 'gint',
        name = 'n_properties',
      ),
      Param(
        type = 'const gchar *const []',
        name = 'properties',
      ),
      Param(
        type = 'const GValue *',
        name = 'values',
      ),
    ],
  ),
  'clutter_actor_animate_with_timelinev': Spec(
    return_type = 'ClutterAnimation *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'gulong',
        name = 'mode',
      ),
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
      Param(
        type = 'gint',
        name = 'n_properties',
      ),
      Param(
        type = 'const gchar *const []',
        name = 'properties',
      ),
      Param(
        type = 'const GValue *',
        name = 'values',
      ),
    ],
  ),
  'clutter_actor_animate_with_alpha': Spec(
    return_type = 'ClutterAnimation *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'ClutterAlpha *',
        name = 'alpha',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
    ],
  ),
  'clutter_actor_animate_with_alphav': Spec(
    return_type = 'ClutterAnimation *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'ClutterAlpha *',
        name = 'alpha',
      ),
      Param(
        type = 'gint',
        name = 'n_properties',
      ),
      Param(
        type = 'const gchar *const []',
        name = 'properties',
      ),
      Param(
        type = 'const GValue *',
        name = 'values',
      ),
    ],
  ),
  'clutter_actor_get_animation': Spec(
    return_type = 'ClutterAnimation *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_actor_detach_animation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_animator_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_animator_new': Spec(
    return_type = 'ClutterAnimator *',
    parameters = [
    ],
  ),
  'clutter_animator_set_key': Spec(
    return_type = 'ClutterAnimator *',
    parameters = [
      Param(
        type = 'ClutterAnimator *',
        name = 'animator',
      ),
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'guint',
        name = 'mode',
      ),
      Param(
        type = 'gdouble',
        name = 'progress',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_animator_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAnimator *',
        name = 'animator',
      ),
      Param(
        type = 'gpointer',
        name = 'first_object',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
      Param(
        type = 'guint',
        name = 'first_mode',
      ),
      Param(
        type = 'gdouble',
        name = 'first_progress',
      ),
    ],
  ),
  'clutter_animator_get_keys': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'ClutterAnimator *',
        name = 'animator',
      ),
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'gdouble',
        name = 'progress',
      ),
    ],
  ),
  'clutter_animator_remove_key': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAnimator *',
        name = 'animator',
      ),
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'gdouble',
        name = 'progress',
      ),
    ],
  ),
  'clutter_animator_start': Spec(
    return_type = 'ClutterTimeline *',
    parameters = [
      Param(
        type = 'ClutterAnimator *',
        name = 'animator',
      ),
    ],
  ),
  'clutter_animator_compute_value': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterAnimator *',
        name = 'animator',
      ),
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'gdouble',
        name = 'progress',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_animator_get_timeline': Spec(
    return_type = 'ClutterTimeline *',
    parameters = [
      Param(
        type = 'ClutterAnimator *',
        name = 'animator',
      ),
    ],
  ),
  'clutter_animator_set_timeline': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAnimator *',
        name = 'animator',
      ),
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
    ],
  ),
  'clutter_animator_get_duration': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterAnimator *',
        name = 'animator',
      ),
    ],
  ),
  'clutter_animator_set_duration': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAnimator *',
        name = 'animator',
      ),
      Param(
        type = 'guint',
        name = 'duration',
      ),
    ],
  ),
  'clutter_animator_property_get_ease_in': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterAnimator *',
        name = 'animator',
      ),
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
    ],
  ),
  'clutter_animator_property_set_ease_in': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAnimator *',
        name = 'animator',
      ),
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'gboolean',
        name = 'ease_in',
      ),
    ],
  ),
  'clutter_animator_property_get_interpolation': Spec(
    return_type = 'ClutterInterpolation',
    parameters = [
      Param(
        type = 'ClutterAnimator *',
        name = 'animator',
      ),
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
    ],
  ),
  'clutter_animator_property_set_interpolation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterAnimator *',
        name = 'animator',
      ),
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'ClutterInterpolation',
        name = 'interpolation',
      ),
    ],
  ),
  'clutter_animator_key_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_animator_key_get_object': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'const ClutterAnimatorKey *',
        name = 'key',
      ),
    ],
  ),
  'clutter_animator_key_get_property_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const ClutterAnimatorKey *',
        name = 'key',
      ),
    ],
  ),
  'clutter_animator_key_get_property_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'const ClutterAnimatorKey *',
        name = 'key',
      ),
    ],
  ),
  'clutter_animator_key_get_mode': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'const ClutterAnimatorKey *',
        name = 'key',
      ),
    ],
  ),
  'clutter_animator_key_get_progress': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'const ClutterAnimatorKey *',
        name = 'key',
      ),
    ],
  ),
  'clutter_animator_key_get_value': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const ClutterAnimatorKey *',
        name = 'key',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_backend_set_resolution': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBackend *',
        name = 'backend',
      ),
      Param(
        type = 'gdouble',
        name = 'dpi',
      ),
    ],
  ),
  'clutter_backend_set_double_click_time': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBackend *',
        name = 'backend',
      ),
      Param(
        type = 'guint',
        name = 'msec',
      ),
    ],
  ),
  'clutter_backend_get_double_click_time': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterBackend *',
        name = 'backend',
      ),
    ],
  ),
  'clutter_backend_set_double_click_distance': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBackend *',
        name = 'backend',
      ),
      Param(
        type = 'guint',
        name = 'distance',
      ),
    ],
  ),
  'clutter_backend_get_double_click_distance': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterBackend *',
        name = 'backend',
      ),
    ],
  ),
  'clutter_backend_set_font_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBackend *',
        name = 'backend',
      ),
      Param(
        type = 'const gchar *',
        name = 'font_name',
      ),
    ],
  ),
  'clutter_backend_get_font_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'ClutterBackend *',
        name = 'backend',
      ),
    ],
  ),
  'clutter_behaviour_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_behaviour_apply': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviour *',
        name = 'behave',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_behaviour_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviour *',
        name = 'behave',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_behaviour_remove_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviour *',
        name = 'behave',
      ),
    ],
  ),
  'clutter_behaviour_actors_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviour *',
        name = 'behave',
      ),
      Param(
        type = 'ClutterBehaviourForeachFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'clutter_behaviour_get_n_actors': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'ClutterBehaviour *',
        name = 'behave',
      ),
    ],
  ),
  'clutter_behaviour_get_nth_actor': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterBehaviour *',
        name = 'behave',
      ),
      Param(
        type = 'gint',
        name = 'index_',
      ),
    ],
  ),
  'clutter_behaviour_get_actors': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'ClutterBehaviour *',
        name = 'behave',
      ),
    ],
  ),
  'clutter_behaviour_get_alpha': Spec(
    return_type = 'ClutterAlpha *',
    parameters = [
      Param(
        type = 'ClutterBehaviour *',
        name = 'behave',
      ),
    ],
  ),
  'clutter_behaviour_set_alpha': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviour *',
        name = 'behave',
      ),
      Param(
        type = 'ClutterAlpha *',
        name = 'alpha',
      ),
    ],
  ),
  'clutter_behaviour_is_applied': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterBehaviour *',
        name = 'behave',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_behaviour_depth_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_behaviour_depth_new': Spec(
    return_type = 'ClutterBehaviour *',
    parameters = [
      Param(
        type = 'ClutterAlpha *',
        name = 'alpha',
      ),
      Param(
        type = 'gint',
        name = 'depth_start',
      ),
      Param(
        type = 'gint',
        name = 'depth_end',
      ),
    ],
  ),
  'clutter_behaviour_depth_set_bounds': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviourDepth *',
        name = 'behaviour',
      ),
      Param(
        type = 'gint',
        name = 'depth_start',
      ),
      Param(
        type = 'gint',
        name = 'depth_end',
      ),
    ],
  ),
  'clutter_behaviour_depth_get_bounds': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviourDepth *',
        name = 'behaviour',
      ),
      Param(
        type = 'gint *',
        name = 'depth_start',
      ),
      Param(
        type = 'gint *',
        name = 'depth_end',
      ),
    ],
  ),
  'clutter_behaviour_ellipse_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_behaviour_ellipse_new': Spec(
    return_type = 'ClutterBehaviour *',
    parameters = [
      Param(
        type = 'ClutterAlpha *',
        name = 'alpha',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
      Param(
        type = 'ClutterRotateDirection',
        name = 'direction',
      ),
      Param(
        type = 'gdouble',
        name = 'start',
      ),
      Param(
        type = 'gdouble',
        name = 'end',
      ),
    ],
  ),
  'clutter_behaviour_ellipse_set_center': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviourEllipse *',
        name = 'self',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'clutter_behaviour_ellipse_get_center': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviourEllipse *',
        name = 'self',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
    ],
  ),
  'clutter_behaviour_ellipse_set_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviourEllipse *',
        name = 'self',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
    ],
  ),
  'clutter_behaviour_ellipse_get_width': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'ClutterBehaviourEllipse *',
        name = 'self',
      ),
    ],
  ),
  'clutter_behaviour_ellipse_set_height': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviourEllipse *',
        name = 'self',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'clutter_behaviour_ellipse_get_height': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'ClutterBehaviourEllipse *',
        name = 'self',
      ),
    ],
  ),
  'clutter_behaviour_ellipse_set_angle_start': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviourEllipse *',
        name = 'self',
      ),
      Param(
        type = 'gdouble',
        name = 'angle_start',
      ),
    ],
  ),
  'clutter_behaviour_ellipse_get_angle_start': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'ClutterBehaviourEllipse *',
        name = 'self',
      ),
    ],
  ),
  'clutter_behaviour_ellipse_set_angle_end': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviourEllipse *',
        name = 'self',
      ),
      Param(
        type = 'gdouble',
        name = 'angle_end',
      ),
    ],
  ),
  'clutter_behaviour_ellipse_get_angle_end': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'ClutterBehaviourEllipse *',
        name = 'self',
      ),
    ],
  ),
  'clutter_behaviour_ellipse_set_angle_tilt': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviourEllipse *',
        name = 'self',
      ),
      Param(
        type = 'ClutterRotateAxis',
        name = 'axis',
      ),
      Param(
        type = 'gdouble',
        name = 'angle_tilt',
      ),
    ],
  ),
  'clutter_behaviour_ellipse_get_angle_tilt': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'ClutterBehaviourEllipse *',
        name = 'self',
      ),
      Param(
        type = 'ClutterRotateAxis',
        name = 'axis',
      ),
    ],
  ),
  'clutter_behaviour_ellipse_set_tilt': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviourEllipse *',
        name = 'self',
      ),
      Param(
        type = 'gdouble',
        name = 'angle_tilt_x',
      ),
      Param(
        type = 'gdouble',
        name = 'angle_tilt_y',
      ),
      Param(
        type = 'gdouble',
        name = 'angle_tilt_z',
      ),
    ],
  ),
  'clutter_behaviour_ellipse_get_tilt': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviourEllipse *',
        name = 'self',
      ),
      Param(
        type = 'gdouble *',
        name = 'angle_tilt_x',
      ),
      Param(
        type = 'gdouble *',
        name = 'angle_tilt_y',
      ),
      Param(
        type = 'gdouble *',
        name = 'angle_tilt_z',
      ),
    ],
  ),
  'clutter_behaviour_ellipse_get_direction': Spec(
    return_type = 'ClutterRotateDirection',
    parameters = [
      Param(
        type = 'ClutterBehaviourEllipse *',
        name = 'self',
      ),
    ],
  ),
  'clutter_behaviour_ellipse_set_direction': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviourEllipse *',
        name = 'self',
      ),
      Param(
        type = 'ClutterRotateDirection',
        name = 'direction',
      ),
    ],
  ),
  'clutter_behaviour_opacity_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_behaviour_opacity_new': Spec(
    return_type = 'ClutterBehaviour *',
    parameters = [
      Param(
        type = 'ClutterAlpha *',
        name = 'alpha',
      ),
      Param(
        type = 'guint8',
        name = 'opacity_start',
      ),
      Param(
        type = 'guint8',
        name = 'opacity_end',
      ),
    ],
  ),
  'clutter_behaviour_opacity_set_bounds': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviourOpacity *',
        name = 'behaviour',
      ),
      Param(
        type = 'guint8',
        name = 'opacity_start',
      ),
      Param(
        type = 'guint8',
        name = 'opacity_end',
      ),
    ],
  ),
  'clutter_behaviour_opacity_get_bounds': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviourOpacity *',
        name = 'behaviour',
      ),
      Param(
        type = 'guint8 *',
        name = 'opacity_start',
      ),
      Param(
        type = 'guint8 *',
        name = 'opacity_end',
      ),
    ],
  ),
  'clutter_behaviour_path_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_behaviour_path_new': Spec(
    return_type = 'ClutterBehaviour *',
    parameters = [
      Param(
        type = 'ClutterAlpha *',
        name = 'alpha',
      ),
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
    ],
  ),
  'clutter_behaviour_path_new_with_description': Spec(
    return_type = 'ClutterBehaviour *',
    parameters = [
      Param(
        type = 'ClutterAlpha *',
        name = 'alpha',
      ),
      Param(
        type = 'const gchar *',
        name = 'desc',
      ),
    ],
  ),
  'clutter_behaviour_path_new_with_knots': Spec(
    return_type = 'ClutterBehaviour *',
    parameters = [
      Param(
        type = 'ClutterAlpha *',
        name = 'alpha',
      ),
      Param(
        type = 'const ClutterKnot *',
        name = 'knots',
      ),
      Param(
        type = 'guint',
        name = 'n_knots',
      ),
    ],
  ),
  'clutter_behaviour_path_set_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviourPath *',
        name = 'pathb',
      ),
      Param(
        type = 'ClutterPath *',
        name = 'path',
      ),
    ],
  ),
  'clutter_behaviour_path_get_path': Spec(
    return_type = 'ClutterPath *',
    parameters = [
      Param(
        type = 'ClutterBehaviourPath *',
        name = 'pathb',
      ),
    ],
  ),
  'clutter_behaviour_rotate_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_behaviour_rotate_new': Spec(
    return_type = 'ClutterBehaviour *',
    parameters = [
      Param(
        type = 'ClutterAlpha *',
        name = 'alpha',
      ),
      Param(
        type = 'ClutterRotateAxis',
        name = 'axis',
      ),
      Param(
        type = 'ClutterRotateDirection',
        name = 'direction',
      ),
      Param(
        type = 'gdouble',
        name = 'angle_start',
      ),
      Param(
        type = 'gdouble',
        name = 'angle_end',
      ),
    ],
  ),
  'clutter_behaviour_rotate_get_center': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviourRotate *',
        name = 'rotate',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
      Param(
        type = 'gint *',
        name = 'z',
      ),
    ],
  ),
  'clutter_behaviour_rotate_set_center': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviourRotate *',
        name = 'rotate',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'z',
      ),
    ],
  ),
  'clutter_behaviour_rotate_get_axis': Spec(
    return_type = 'ClutterRotateAxis',
    parameters = [
      Param(
        type = 'ClutterBehaviourRotate *',
        name = 'rotate',
      ),
    ],
  ),
  'clutter_behaviour_rotate_set_axis': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviourRotate *',
        name = 'rotate',
      ),
      Param(
        type = 'ClutterRotateAxis',
        name = 'axis',
      ),
    ],
  ),
  'clutter_behaviour_rotate_get_direction': Spec(
    return_type = 'ClutterRotateDirection',
    parameters = [
      Param(
        type = 'ClutterBehaviourRotate *',
        name = 'rotate',
      ),
    ],
  ),
  'clutter_behaviour_rotate_set_direction': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviourRotate *',
        name = 'rotate',
      ),
      Param(
        type = 'ClutterRotateDirection',
        name = 'direction',
      ),
    ],
  ),
  'clutter_behaviour_rotate_get_bounds': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviourRotate *',
        name = 'rotate',
      ),
      Param(
        type = 'gdouble *',
        name = 'angle_start',
      ),
      Param(
        type = 'gdouble *',
        name = 'angle_end',
      ),
    ],
  ),
  'clutter_behaviour_rotate_set_bounds': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviourRotate *',
        name = 'rotate',
      ),
      Param(
        type = 'gdouble',
        name = 'angle_start',
      ),
      Param(
        type = 'gdouble',
        name = 'angle_end',
      ),
    ],
  ),
  'clutter_behaviour_scale_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_behaviour_scale_new': Spec(
    return_type = 'ClutterBehaviour *',
    parameters = [
      Param(
        type = 'ClutterAlpha *',
        name = 'alpha',
      ),
      Param(
        type = 'gdouble',
        name = 'x_scale_start',
      ),
      Param(
        type = 'gdouble',
        name = 'y_scale_start',
      ),
      Param(
        type = 'gdouble',
        name = 'x_scale_end',
      ),
      Param(
        type = 'gdouble',
        name = 'y_scale_end',
      ),
    ],
  ),
  'clutter_behaviour_scale_set_bounds': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviourScale *',
        name = 'scale',
      ),
      Param(
        type = 'gdouble',
        name = 'x_scale_start',
      ),
      Param(
        type = 'gdouble',
        name = 'y_scale_start',
      ),
      Param(
        type = 'gdouble',
        name = 'x_scale_end',
      ),
      Param(
        type = 'gdouble',
        name = 'y_scale_end',
      ),
    ],
  ),
  'clutter_behaviour_scale_get_bounds': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBehaviourScale *',
        name = 'scale',
      ),
      Param(
        type = 'gdouble *',
        name = 'x_scale_start',
      ),
      Param(
        type = 'gdouble *',
        name = 'y_scale_start',
      ),
      Param(
        type = 'gdouble *',
        name = 'x_scale_end',
      ),
      Param(
        type = 'gdouble *',
        name = 'y_scale_end',
      ),
    ],
  ),
  'clutter_bin_layout_set_alignment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBinLayout *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'child',
      ),
      Param(
        type = 'ClutterBinAlignment',
        name = 'x_align',
      ),
      Param(
        type = 'ClutterBinAlignment',
        name = 'y_align',
      ),
    ],
  ),
  'clutter_bin_layout_get_alignment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBinLayout *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'child',
      ),
      Param(
        type = 'ClutterBinAlignment *',
        name = 'x_align',
      ),
      Param(
        type = 'ClutterBinAlignment *',
        name = 'y_align',
      ),
    ],
  ),
  'clutter_bin_layout_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBinLayout *',
        name = 'self',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'child',
      ),
      Param(
        type = 'ClutterBinAlignment',
        name = 'x_align',
      ),
      Param(
        type = 'ClutterBinAlignment',
        name = 'y_align',
      ),
    ],
  ),
  'clutter_box_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_box_new': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterLayoutManager *',
        name = 'manager',
      ),
    ],
  ),
  'clutter_box_set_layout_manager': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBox *',
        name = 'box',
      ),
      Param(
        type = 'ClutterLayoutManager *',
        name = 'manager',
      ),
    ],
  ),
  'clutter_box_get_layout_manager': Spec(
    return_type = 'ClutterLayoutManager *',
    parameters = [
      Param(
        type = 'ClutterBox *',
        name = 'box',
      ),
    ],
  ),
  'clutter_box_set_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBox *',
        name = 'box',
      ),
      Param(
        type = 'const ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_box_get_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBox *',
        name = 'box',
      ),
      Param(
        type = 'ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_box_pack': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBox *',
        name = 'box',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property',
      ),
    ],
  ),
  'clutter_box_packv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBox *',
        name = 'box',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'guint',
        name = 'n_properties',
      ),
      Param(
        type = 'const gchar *const []',
        name = 'properties',
      ),
      Param(
        type = 'const GValue *',
        name = 'values',
      ),
    ],
  ),
  'clutter_box_pack_after': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBox *',
        name = 'box',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'sibling',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property',
      ),
    ],
  ),
  'clutter_box_pack_before': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBox *',
        name = 'box',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'sibling',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property',
      ),
    ],
  ),
  'clutter_box_pack_at': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterBox *',
        name = 'box',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property',
      ),
    ],
  ),
  'clutter_cairo_texture_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_cairo_texture_new': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'guint',
        name = 'width',
      ),
      Param(
        type = 'guint',
        name = 'height',
      ),
    ],
  ),
  'clutter_cairo_texture_set_surface_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterCairoTexture *',
        name = 'self',
      ),
      Param(
        type = 'guint',
        name = 'width',
      ),
      Param(
        type = 'guint',
        name = 'height',
      ),
    ],
  ),
  'clutter_cairo_texture_get_surface_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterCairoTexture *',
        name = 'self',
      ),
      Param(
        type = 'guint *',
        name = 'width',
      ),
      Param(
        type = 'guint *',
        name = 'height',
      ),
    ],
  ),
  'clutter_cairo_texture_set_auto_resize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterCairoTexture *',
        name = 'self',
      ),
      Param(
        type = 'gboolean',
        name = 'value',
      ),
    ],
  ),
  'clutter_cairo_texture_get_auto_resize': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterCairoTexture *',
        name = 'self',
      ),
    ],
  ),
  'clutter_cairo_texture_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterCairoTexture *',
        name = 'self',
      ),
    ],
  ),
  'clutter_cairo_texture_invalidate_rectangle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterCairoTexture *',
        name = 'self',
      ),
      Param(
        type = 'cairo_rectangle_int_t *',
        name = 'rect',
      ),
    ],
  ),
  'clutter_cairo_texture_invalidate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterCairoTexture *',
        name = 'self',
      ),
    ],
  ),
  'clutter_cairo_texture_create_region': Spec(
    return_type = 'cairo_t *',
    parameters = [
      Param(
        type = 'ClutterCairoTexture *',
        name = 'self',
      ),
      Param(
        type = 'gint',
        name = 'x_offset',
      ),
      Param(
        type = 'gint',
        name = 'y_offset',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'clutter_cairo_texture_create': Spec(
    return_type = 'cairo_t *',
    parameters = [
      Param(
        type = 'ClutterCairoTexture *',
        name = 'self',
      ),
    ],
  ),
  'clutter_container_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'first_actor',
      ),
    ],
  ),
  'clutter_container_add_actor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_container_add_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'first_actor',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'clutter_container_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'first_actor',
      ),
    ],
  ),
  'clutter_container_remove_actor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_container_remove_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'first_actor',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'clutter_container_get_children': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
    ],
  ),
  'clutter_container_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'ClutterCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'clutter_container_foreach_with_internals': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'ClutterCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'clutter_container_raise_child': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'sibling',
      ),
    ],
  ),
  'clutter_container_lower_child': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'ClutterActor *',
        name = 'sibling',
      ),
    ],
  ),
  'clutter_container_sort_depth_order': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterContainer *',
        name = 'container',
      ),
    ],
  ),
  'clutter_param_fixed_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_value_set_fixed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'CoglFixed',
        name = 'fixed_',
      ),
    ],
  ),
  'clutter_value_get_fixed': Spec(
    return_type = 'CoglFixed',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_param_spec_fixed': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'CoglFixed',
        name = 'minimum',
      ),
      Param(
        type = 'CoglFixed',
        name = 'maximum',
      ),
      Param(
        type = 'CoglFixed',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'clutter_frame_source_add': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'guint',
        name = 'fps',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'clutter_frame_source_add_full': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gint',
        name = 'priority',
      ),
      Param(
        type = 'guint',
        name = 'fps',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'clutter_group_new': Spec(
    return_type = 'ClutterActor *',
    parameters = [
    ],
  ),
  'clutter_group_get_nth_child': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterGroup *',
        name = 'self',
      ),
      Param(
        type = 'gint',
        name = 'index_',
      ),
    ],
  ),
  'clutter_group_get_n_children': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'ClutterGroup *',
        name = 'self',
      ),
    ],
  ),
  'clutter_group_remove_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterGroup *',
        name = 'self',
      ),
    ],
  ),
  'clutter_input_device_get_device_coords': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterInputDevice *',
        name = 'device',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
    ],
  ),
  'clutter_threads_init': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'clutter_threads_enter': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'clutter_threads_leave': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'clutter_threads_add_frame_source': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'guint',
        name = 'fps',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'clutter_threads_add_frame_source_full': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gint',
        name = 'priority',
      ),
      Param(
        type = 'guint',
        name = 'fps',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'clutter_set_motion_events_enabled': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'enable',
      ),
    ],
  ),
  'clutter_get_motion_events_enabled': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'clutter_redraw': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
    ],
  ),
  'clutter_clear_glyph_cache': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'clutter_set_font_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterFontFlags',
        name = 'flags',
      ),
    ],
  ),
  'clutter_get_font_flags': Spec(
    return_type = 'ClutterFontFlags',
    parameters = [
    ],
  ),
  'clutter_get_input_device_for_id': Spec(
    return_type = 'ClutterInputDevice *',
    parameters = [
      Param(
        type = 'gint',
        name = 'id_',
      ),
    ],
  ),
  'clutter_grab_pointer_for_device': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
      Param(
        type = 'gint',
        name = 'id_',
      ),
    ],
  ),
  'clutter_ungrab_pointer_for_device': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gint',
        name = 'id_',
      ),
    ],
  ),
  'clutter_set_default_frame_rate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'frames_per_sec',
      ),
    ],
  ),
  'clutter_get_timestamp': Spec(
    return_type = 'gulong',
    parameters = [
    ],
  ),
  'clutter_get_debug_enabled': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'clutter_get_show_fps': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'clutter_media_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_media_set_uri': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterMedia *',
        name = 'media',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
    ],
  ),
  'clutter_media_get_uri': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'ClutterMedia *',
        name = 'media',
      ),
    ],
  ),
  'clutter_media_set_filename': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterMedia *',
        name = 'media',
      ),
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
    ],
  ),
  'clutter_media_set_playing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterMedia *',
        name = 'media',
      ),
      Param(
        type = 'gboolean',
        name = 'playing',
      ),
    ],
  ),
  'clutter_media_get_playing': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterMedia *',
        name = 'media',
      ),
    ],
  ),
  'clutter_media_set_progress': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterMedia *',
        name = 'media',
      ),
      Param(
        type = 'gdouble',
        name = 'progress',
      ),
    ],
  ),
  'clutter_media_get_progress': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'ClutterMedia *',
        name = 'media',
      ),
    ],
  ),
  'clutter_media_set_subtitle_uri': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterMedia *',
        name = 'media',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
    ],
  ),
  'clutter_media_get_subtitle_uri': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'ClutterMedia *',
        name = 'media',
      ),
    ],
  ),
  'clutter_media_set_subtitle_font_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterMedia *',
        name = 'media',
      ),
      Param(
        type = 'const char *',
        name = 'font_name',
      ),
    ],
  ),
  'clutter_media_get_subtitle_font_name': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'ClutterMedia *',
        name = 'media',
      ),
    ],
  ),
  'clutter_media_set_audio_volume': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterMedia *',
        name = 'media',
      ),
      Param(
        type = 'gdouble',
        name = 'volume',
      ),
    ],
  ),
  'clutter_media_get_audio_volume': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'ClutterMedia *',
        name = 'media',
      ),
    ],
  ),
  'clutter_media_get_can_seek': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterMedia *',
        name = 'media',
      ),
    ],
  ),
  'clutter_media_get_buffer_fill': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'ClutterMedia *',
        name = 'media',
      ),
    ],
  ),
  'clutter_media_get_duration': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'ClutterMedia *',
        name = 'media',
      ),
    ],
  ),
  'clutter_rectangle_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_rectangle_new': Spec(
    return_type = 'ClutterActor *',
    parameters = [
    ],
  ),
  'clutter_rectangle_new_with_color': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'const ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_rectangle_get_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterRectangle *',
        name = 'rectangle',
      ),
      Param(
        type = 'ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_rectangle_set_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterRectangle *',
        name = 'rectangle',
      ),
      Param(
        type = 'const ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_rectangle_get_border_width': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterRectangle *',
        name = 'rectangle',
      ),
    ],
  ),
  'clutter_rectangle_set_border_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterRectangle *',
        name = 'rectangle',
      ),
      Param(
        type = 'guint',
        name = 'width',
      ),
    ],
  ),
  'clutter_rectangle_get_border_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterRectangle *',
        name = 'rectangle',
      ),
      Param(
        type = 'ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_rectangle_set_border_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterRectangle *',
        name = 'rectangle',
      ),
      Param(
        type = 'const ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_score_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_score_new': Spec(
    return_type = 'ClutterScore *',
    parameters = [
    ],
  ),
  'clutter_score_set_loop': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterScore *',
        name = 'score',
      ),
      Param(
        type = 'gboolean',
        name = 'loop',
      ),
    ],
  ),
  'clutter_score_get_loop': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterScore *',
        name = 'score',
      ),
    ],
  ),
  'clutter_score_append': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'ClutterScore *',
        name = 'score',
      ),
      Param(
        type = 'ClutterTimeline *',
        name = 'parent',
      ),
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
    ],
  ),
  'clutter_score_append_at_marker': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'ClutterScore *',
        name = 'score',
      ),
      Param(
        type = 'ClutterTimeline *',
        name = 'parent',
      ),
      Param(
        type = 'const gchar *',
        name = 'marker_name',
      ),
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
    ],
  ),
  'clutter_score_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterScore *',
        name = 'score',
      ),
      Param(
        type = 'gulong',
        name = 'id_',
      ),
    ],
  ),
  'clutter_score_remove_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterScore *',
        name = 'score',
      ),
    ],
  ),
  'clutter_score_get_timeline': Spec(
    return_type = 'ClutterTimeline *',
    parameters = [
      Param(
        type = 'ClutterScore *',
        name = 'score',
      ),
      Param(
        type = 'gulong',
        name = 'id_',
      ),
    ],
  ),
  'clutter_score_list_timelines': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'ClutterScore *',
        name = 'score',
      ),
    ],
  ),
  'clutter_score_start': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterScore *',
        name = 'score',
      ),
    ],
  ),
  'clutter_score_stop': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterScore *',
        name = 'score',
      ),
    ],
  ),
  'clutter_score_pause': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterScore *',
        name = 'score',
      ),
    ],
  ),
  'clutter_score_rewind': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterScore *',
        name = 'score',
      ),
    ],
  ),
  'clutter_score_is_playing': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterScore *',
        name = 'score',
      ),
    ],
  ),
  'clutter_shader_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'clutter_shader_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_shader_new': Spec(
    return_type = 'ClutterShader *',
    parameters = [
    ],
  ),
  'clutter_shader_set_is_enabled': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterShader *',
        name = 'shader',
      ),
      Param(
        type = 'gboolean',
        name = 'enabled',
      ),
    ],
  ),
  'clutter_shader_get_is_enabled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterShader *',
        name = 'shader',
      ),
    ],
  ),
  'clutter_shader_compile': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterShader *',
        name = 'shader',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'clutter_shader_release': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterShader *',
        name = 'shader',
      ),
    ],
  ),
  'clutter_shader_is_compiled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterShader *',
        name = 'shader',
      ),
    ],
  ),
  'clutter_shader_set_vertex_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterShader *',
        name = 'shader',
      ),
      Param(
        type = 'const gchar *',
        name = 'data',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
    ],
  ),
  'clutter_shader_set_fragment_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterShader *',
        name = 'shader',
      ),
      Param(
        type = 'const gchar *',
        name = 'data',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
    ],
  ),
  'clutter_shader_get_vertex_source': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'ClutterShader *',
        name = 'shader',
      ),
    ],
  ),
  'clutter_shader_get_fragment_source': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'ClutterShader *',
        name = 'shader',
      ),
    ],
  ),
  'clutter_shader_set_uniform': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterShader *',
        name = 'shader',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_shader_get_cogl_program': Spec(
    return_type = 'CoglHandle',
    parameters = [
      Param(
        type = 'ClutterShader *',
        name = 'shader',
      ),
    ],
  ),
  'clutter_shader_get_cogl_fragment_shader': Spec(
    return_type = 'CoglHandle',
    parameters = [
      Param(
        type = 'ClutterShader *',
        name = 'shader',
      ),
    ],
  ),
  'clutter_shader_get_cogl_vertex_shader': Spec(
    return_type = 'CoglHandle',
    parameters = [
      Param(
        type = 'ClutterShader *',
        name = 'shader',
      ),
    ],
  ),
  'clutter_actor_set_shader': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'ClutterShader *',
        name = 'shader',
      ),
    ],
  ),
  'clutter_actor_get_shader': Spec(
    return_type = 'ClutterShader *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
    ],
  ),
  'clutter_actor_set_shader_param': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'param',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_actor_set_shader_param_int': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'param',
      ),
      Param(
        type = 'gint',
        name = 'value',
      ),
    ],
  ),
  'clutter_actor_set_shader_param_float': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'param',
      ),
      Param(
        type = 'gfloat',
        name = 'value',
      ),
    ],
  ),
  'clutter_stage_manager_set_default_stage': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStageManager *',
        name = 'stage_manager',
      ),
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
    ],
  ),
  'clutter_stage_get_default': Spec(
    return_type = 'ClutterActor *',
    parameters = [
    ],
  ),
  'clutter_stage_is_default': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
    ],
  ),
  'clutter_stage_queue_redraw': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
    ],
  ),
  'clutter_stage_set_use_fog': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
      Param(
        type = 'gboolean',
        name = 'fog',
      ),
    ],
  ),
  'clutter_stage_get_use_fog': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
    ],
  ),
  'clutter_stage_set_fog': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
      Param(
        type = 'ClutterFog *',
        name = 'fog',
      ),
    ],
  ),
  'clutter_stage_get_fog': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
      Param(
        type = 'ClutterFog *',
        name = 'fog',
      ),
    ],
  ),
  'clutter_stage_set_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
      Param(
        type = 'const ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_stage_get_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterStage *',
        name = 'stage',
      ),
      Param(
        type = 'ClutterColor *',
        name = 'color',
      ),
    ],
  ),
  'clutter_state_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_state_new': Spec(
    return_type = 'ClutterState *',
    parameters = [
    ],
  ),
  'clutter_state_set_state': Spec(
    return_type = 'ClutterTimeline *',
    parameters = [
      Param(
        type = 'ClutterState *',
        name = 'state',
      ),
      Param(
        type = 'const gchar *',
        name = 'target_state_name',
      ),
    ],
  ),
  'clutter_state_warp_to_state': Spec(
    return_type = 'ClutterTimeline *',
    parameters = [
      Param(
        type = 'ClutterState *',
        name = 'state',
      ),
      Param(
        type = 'const gchar *',
        name = 'target_state_name',
      ),
    ],
  ),
  'clutter_state_set_key': Spec(
    return_type = 'ClutterState *',
    parameters = [
      Param(
        type = 'ClutterState *',
        name = 'state',
      ),
      Param(
        type = 'const gchar *',
        name = 'source_state_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'target_state_name',
      ),
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'guint',
        name = 'mode',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
      Param(
        type = 'gdouble',
        name = 'pre_delay',
      ),
      Param(
        type = 'gdouble',
        name = 'post_delay',
      ),
    ],
  ),
  'clutter_state_set_duration': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterState *',
        name = 'state',
      ),
      Param(
        type = 'const gchar *',
        name = 'source_state_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'target_state_name',
      ),
      Param(
        type = 'guint',
        name = 'duration',
      ),
    ],
  ),
  'clutter_state_get_duration': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterState *',
        name = 'state',
      ),
      Param(
        type = 'const gchar *',
        name = 'source_state_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'target_state_name',
      ),
    ],
  ),
  'clutter_state_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterState *',
        name = 'state',
      ),
      Param(
        type = 'const gchar *',
        name = 'source_state_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'target_state_name',
      ),
      Param(
        type = 'gpointer',
        name = 'first_object',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
      Param(
        type = 'gulong',
        name = 'first_mode',
      ),
    ],
  ),
  'clutter_state_get_states': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'ClutterState *',
        name = 'state',
      ),
    ],
  ),
  'clutter_state_get_keys': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'ClutterState *',
        name = 'state',
      ),
      Param(
        type = 'const gchar *',
        name = 'source_state_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'target_state_name',
      ),
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
    ],
  ),
  'clutter_state_remove_key': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterState *',
        name = 'state',
      ),
      Param(
        type = 'const gchar *',
        name = 'source_state_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'target_state_name',
      ),
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
    ],
  ),
  'clutter_state_get_timeline': Spec(
    return_type = 'ClutterTimeline *',
    parameters = [
      Param(
        type = 'ClutterState *',
        name = 'state',
      ),
    ],
  ),
  'clutter_state_set_animator': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterState *',
        name = 'state',
      ),
      Param(
        type = 'const gchar *',
        name = 'source_state_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'target_state_name',
      ),
      Param(
        type = 'ClutterAnimator *',
        name = 'animator',
      ),
    ],
  ),
  'clutter_state_get_animator': Spec(
    return_type = 'ClutterAnimator *',
    parameters = [
      Param(
        type = 'ClutterState *',
        name = 'state',
      ),
      Param(
        type = 'const gchar *',
        name = 'source_state_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'target_state_name',
      ),
    ],
  ),
  'clutter_state_get_state': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'ClutterState *',
        name = 'state',
      ),
    ],
  ),
  'clutter_state_key_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'clutter_state_key_get_pre_delay': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'const ClutterStateKey *',
        name = 'state_key',
      ),
    ],
  ),
  'clutter_state_key_get_post_delay': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'const ClutterStateKey *',
        name = 'state_key',
      ),
    ],
  ),
  'clutter_state_key_get_mode': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'const ClutterStateKey *',
        name = 'state_key',
      ),
    ],
  ),
  'clutter_state_key_get_value': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const ClutterStateKey *',
        name = 'state_key',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'clutter_state_key_get_property_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'const ClutterStateKey *',
        name = 'key',
      ),
    ],
  ),
  'clutter_state_key_get_object': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'const ClutterStateKey *',
        name = 'state_key',
      ),
    ],
  ),
  'clutter_state_key_get_property_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const ClutterStateKey *',
        name = 'state_key',
      ),
    ],
  ),
  'clutter_state_key_get_source_state_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const ClutterStateKey *',
        name = 'state_key',
      ),
    ],
  ),
  'clutter_state_key_get_target_state_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const ClutterStateKey *',
        name = 'state_key',
      ),
    ],
  ),
  'clutter_texture_new': Spec(
    return_type = 'ClutterActor *',
    parameters = [
    ],
  ),
  'clutter_texture_new_from_file': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'clutter_texture_set_from_file': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'clutter_texture_set_from_rgb_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
      Param(
        type = 'const guchar *',
        name = 'data',
      ),
      Param(
        type = 'gboolean',
        name = 'has_alpha',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
      Param(
        type = 'gint',
        name = 'rowstride',
      ),
      Param(
        type = 'gint',
        name = 'bpp',
      ),
      Param(
        type = 'ClutterTextureFlags',
        name = 'flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'clutter_texture_set_area_from_rgb_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
      Param(
        type = 'const guchar *',
        name = 'data',
      ),
      Param(
        type = 'gboolean',
        name = 'has_alpha',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
      Param(
        type = 'gint',
        name = 'rowstride',
      ),
      Param(
        type = 'gint',
        name = 'bpp',
      ),
      Param(
        type = 'ClutterTextureFlags',
        name = 'flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'clutter_texture_get_base_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
      Param(
        type = 'gint *',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'height',
      ),
    ],
  ),
  'clutter_texture_set_filter_quality': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
      Param(
        type = 'ClutterTextureQuality',
        name = 'filter_quality',
      ),
    ],
  ),
  'clutter_texture_get_filter_quality': Spec(
    return_type = 'ClutterTextureQuality',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
    ],
  ),
  'clutter_texture_get_cogl_texture': Spec(
    return_type = 'CoglHandle',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
    ],
  ),
  'clutter_texture_set_cogl_texture': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
      Param(
        type = 'CoglHandle',
        name = 'cogl_tex',
      ),
    ],
  ),
  'clutter_texture_get_cogl_material': Spec(
    return_type = 'CoglHandle',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
    ],
  ),
  'clutter_texture_set_cogl_material': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
      Param(
        type = 'CoglHandle',
        name = 'cogl_material',
      ),
    ],
  ),
  'clutter_texture_set_sync_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
      Param(
        type = 'gboolean',
        name = 'sync_size',
      ),
    ],
  ),
  'clutter_texture_get_sync_size': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
    ],
  ),
  'clutter_texture_set_repeat': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
      Param(
        type = 'gboolean',
        name = 'repeat_x',
      ),
      Param(
        type = 'gboolean',
        name = 'repeat_y',
      ),
    ],
  ),
  'clutter_texture_get_repeat': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
      Param(
        type = 'gboolean *',
        name = 'repeat_x',
      ),
      Param(
        type = 'gboolean *',
        name = 'repeat_y',
      ),
    ],
  ),
  'clutter_texture_get_pixel_format': Spec(
    return_type = 'CoglPixelFormat',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
    ],
  ),
  'clutter_texture_get_max_tile_waste': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
    ],
  ),
  'clutter_texture_set_keep_aspect_ratio': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
      Param(
        type = 'gboolean',
        name = 'keep_aspect',
      ),
    ],
  ),
  'clutter_texture_get_keep_aspect_ratio': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
    ],
  ),
  'clutter_texture_set_load_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
      Param(
        type = 'gboolean',
        name = 'load_async',
      ),
    ],
  ),
  'clutter_texture_get_load_async': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
    ],
  ),
  'clutter_texture_set_load_data_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
      Param(
        type = 'gboolean',
        name = 'load_async',
      ),
    ],
  ),
  'clutter_texture_get_load_data_async': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
    ],
  ),
  'clutter_texture_set_pick_with_alpha': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
      Param(
        type = 'gboolean',
        name = 'pick_with_alpha',
      ),
    ],
  ),
  'clutter_texture_get_pick_with_alpha': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
    ],
  ),
  'clutter_texture_new_from_actor': Spec(
    return_type = 'ClutterActor *',
    parameters = [
      Param(
        type = 'ClutterActor *',
        name = 'actor',
      ),
    ],
  ),
  'clutter_texture_set_from_yuv_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterTexture *',
        name = 'texture',
      ),
      Param(
        type = 'const guchar *',
        name = 'data',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
      Param(
        type = 'ClutterTextureFlags',
        name = 'flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'clutter_timeline_clone': Spec(
    return_type = 'ClutterTimeline *',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
    ],
  ),
  'clutter_timeline_set_loop': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
      Param(
        type = 'gboolean',
        name = 'loop',
      ),
    ],
  ),
  'clutter_timeline_get_loop': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'ClutterTimeline *',
        name = 'timeline',
      ),
    ],
  ),
  'clutter_timeout_pool_new': Spec(
    return_type = 'ClutterTimeoutPool *',
    parameters = [
      Param(
        type = 'gint',
        name = 'priority',
      ),
    ],
  ),
  'clutter_timeout_pool_add': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'ClutterTimeoutPool *',
        name = 'pool',
      ),
      Param(
        type = 'guint',
        name = 'fps',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'clutter_timeout_pool_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'ClutterTimeoutPool *',
        name = 'pool',
      ),
      Param(
        type = 'guint',
        name = 'id_',
      ),
    ],
  ),
  'clutter_util_next_p2': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gint',
        name = 'a',
      ),
    ],
  ),
  'gdk_pixbuf_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'gdk_pixbuf_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_pixbuf_ref': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_get_colorspace': Spec(
    return_type = 'GdkColorspace',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_get_n_channels': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_get_has_alpha': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_get_bits_per_sample': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_get_pixels': Spec(
    return_type = 'guchar *',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_get_width': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_get_height': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_get_rowstride': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_get_byte_length': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_get_pixels_with_length': Spec(
    return_type = 'guchar *',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'guint *',
        name = 'length',
      ),
    ],
  ),
  'gdk_pixbuf_new': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GdkColorspace',
        name = 'colorspace',
      ),
      Param(
        type = 'gboolean',
        name = 'has_alpha',
      ),
      Param(
        type = 'int',
        name = 'bits_per_sample',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'gdk_pixbuf_copy': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_new_subpixbuf': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'src_pixbuf',
      ),
      Param(
        type = 'int',
        name = 'src_x',
      ),
      Param(
        type = 'int',
        name = 'src_y',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_file': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'filename',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_file_at_size': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'filename',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_file_at_scale': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'filename',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
      Param(
        type = 'gboolean',
        name = 'preserve_aspect_ratio',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_resource': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'resource_path',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_resource_at_scale': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'resource_path',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
      Param(
        type = 'gboolean',
        name = 'preserve_aspect_ratio',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_data': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const guchar *',
        name = 'data',
      ),
      Param(
        type = 'GdkColorspace',
        name = 'colorspace',
      ),
      Param(
        type = 'gboolean',
        name = 'has_alpha',
      ),
      Param(
        type = 'int',
        name = 'bits_per_sample',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
      Param(
        type = 'int',
        name = 'rowstride',
      ),
      Param(
        type = 'GdkPixbufDestroyNotify',
        name = 'destroy_fn',
      ),
      Param(
        type = 'gpointer',
        name = 'destroy_fn_data',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_xpm_data': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const char **',
        name = 'data',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_inline': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'gint',
        name = 'data_length',
      ),
      Param(
        type = 'const guint8 *',
        name = 'data',
      ),
      Param(
        type = 'gboolean',
        name = 'copy_pixels',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_fill': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'guint32',
        name = 'pixel',
      ),
    ],
  ),
  'gdk_pixbuf_save': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'const char *',
        name = 'filename',
      ),
      Param(
        type = 'const char *',
        name = 'type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_savev': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'const char *',
        name = 'filename',
      ),
      Param(
        type = 'const char *',
        name = 'type',
      ),
      Param(
        type = 'char **',
        name = 'option_keys',
      ),
      Param(
        type = 'char **',
        name = 'option_values',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_save_to_callback': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'GdkPixbufSaveFunc',
        name = 'save_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'const char *',
        name = 'type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_save_to_callbackv': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'GdkPixbufSaveFunc',
        name = 'save_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'const char *',
        name = 'type',
      ),
      Param(
        type = 'char **',
        name = 'option_keys',
      ),
      Param(
        type = 'char **',
        name = 'option_values',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_save_to_buffer': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'gchar **',
        name = 'buffer',
      ),
      Param(
        type = 'gsize *',
        name = 'buffer_size',
      ),
      Param(
        type = 'const char *',
        name = 'type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_save_to_bufferv': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'gchar **',
        name = 'buffer',
      ),
      Param(
        type = 'gsize *',
        name = 'buffer_size',
      ),
      Param(
        type = 'const char *',
        name = 'type',
      ),
      Param(
        type = 'char **',
        name = 'option_keys',
      ),
      Param(
        type = 'char **',
        name = 'option_values',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_stream': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_stream_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_stream_finish': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'async_result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_stream_at_scale': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
      Param(
        type = 'gboolean',
        name = 'preserve_aspect_ratio',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_stream_at_scale_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
      Param(
        type = 'gboolean',
        name = 'preserve_aspect_ratio',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'gdk_pixbuf_save_to_stream': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const char *',
        name = 'type',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_save_to_stream_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const gchar *',
        name = 'type',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'gdk_pixbuf_save_to_stream_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'async_result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_add_alpha': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'gboolean',
        name = 'substitute_color',
      ),
      Param(
        type = 'guchar',
        name = 'r',
      ),
      Param(
        type = 'guchar',
        name = 'g',
      ),
      Param(
        type = 'guchar',
        name = 'b',
      ),
    ],
  ),
  'gdk_pixbuf_copy_area': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'src_pixbuf',
      ),
      Param(
        type = 'int',
        name = 'src_x',
      ),
      Param(
        type = 'int',
        name = 'src_y',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'dest_pixbuf',
      ),
      Param(
        type = 'int',
        name = 'dest_x',
      ),
      Param(
        type = 'int',
        name = 'dest_y',
      ),
    ],
  ),
  'gdk_pixbuf_saturate_and_pixelate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'src',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'dest',
      ),
      Param(
        type = 'gfloat',
        name = 'saturation',
      ),
      Param(
        type = 'gboolean',
        name = 'pixelate',
      ),
    ],
  ),
  'gdk_pixbuf_apply_embedded_orientation': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'src',
      ),
    ],
  ),
  'gdk_pixbuf_get_option': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'gdk_pixbuf_scale': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'src',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'dest',
      ),
      Param(
        type = 'int',
        name = 'dest_x',
      ),
      Param(
        type = 'int',
        name = 'dest_y',
      ),
      Param(
        type = 'int',
        name = 'dest_width',
      ),
      Param(
        type = 'int',
        name = 'dest_height',
      ),
      Param(
        type = 'double',
        name = 'offset_x',
      ),
      Param(
        type = 'double',
        name = 'offset_y',
      ),
      Param(
        type = 'double',
        name = 'scale_x',
      ),
      Param(
        type = 'double',
        name = 'scale_y',
      ),
      Param(
        type = 'GdkInterpType',
        name = 'interp_type',
      ),
    ],
  ),
  'gdk_pixbuf_composite': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'src',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'dest',
      ),
      Param(
        type = 'int',
        name = 'dest_x',
      ),
      Param(
        type = 'int',
        name = 'dest_y',
      ),
      Param(
        type = 'int',
        name = 'dest_width',
      ),
      Param(
        type = 'int',
        name = 'dest_height',
      ),
      Param(
        type = 'double',
        name = 'offset_x',
      ),
      Param(
        type = 'double',
        name = 'offset_y',
      ),
      Param(
        type = 'double',
        name = 'scale_x',
      ),
      Param(
        type = 'double',
        name = 'scale_y',
      ),
      Param(
        type = 'GdkInterpType',
        name = 'interp_type',
      ),
      Param(
        type = 'int',
        name = 'overall_alpha',
      ),
    ],
  ),
  'gdk_pixbuf_composite_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'src',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'dest',
      ),
      Param(
        type = 'int',
        name = 'dest_x',
      ),
      Param(
        type = 'int',
        name = 'dest_y',
      ),
      Param(
        type = 'int',
        name = 'dest_width',
      ),
      Param(
        type = 'int',
        name = 'dest_height',
      ),
      Param(
        type = 'double',
        name = 'offset_x',
      ),
      Param(
        type = 'double',
        name = 'offset_y',
      ),
      Param(
        type = 'double',
        name = 'scale_x',
      ),
      Param(
        type = 'double',
        name = 'scale_y',
      ),
      Param(
        type = 'GdkInterpType',
        name = 'interp_type',
      ),
      Param(
        type = 'int',
        name = 'overall_alpha',
      ),
      Param(
        type = 'int',
        name = 'check_x',
      ),
      Param(
        type = 'int',
        name = 'check_y',
      ),
      Param(
        type = 'int',
        name = 'check_size',
      ),
      Param(
        type = 'guint32',
        name = 'color1',
      ),
      Param(
        type = 'guint32',
        name = 'color2',
      ),
    ],
  ),
  'gdk_pixbuf_scale_simple': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'src',
      ),
      Param(
        type = 'int',
        name = 'dest_width',
      ),
      Param(
        type = 'int',
        name = 'dest_height',
      ),
      Param(
        type = 'GdkInterpType',
        name = 'interp_type',
      ),
    ],
  ),
  'gdk_pixbuf_composite_color_simple': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'src',
      ),
      Param(
        type = 'int',
        name = 'dest_width',
      ),
      Param(
        type = 'int',
        name = 'dest_height',
      ),
      Param(
        type = 'GdkInterpType',
        name = 'interp_type',
      ),
      Param(
        type = 'int',
        name = 'overall_alpha',
      ),
      Param(
        type = 'int',
        name = 'check_size',
      ),
      Param(
        type = 'guint32',
        name = 'color1',
      ),
      Param(
        type = 'guint32',
        name = 'color2',
      ),
    ],
  ),
  'gdk_pixbuf_rotate_simple': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'src',
      ),
      Param(
        type = 'GdkPixbufRotation',
        name = 'angle',
      ),
    ],
  ),
  'gdk_pixbuf_flip': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'src',
      ),
      Param(
        type = 'gboolean',
        name = 'horizontal',
      ),
    ],
  ),
  'gdk_pixbuf_animation_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_pixbuf_animation_new_from_file': Spec(
    return_type = 'GdkPixbufAnimation *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'filename',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_animation_ref': Spec(
    return_type = 'GdkPixbufAnimation *',
    parameters = [
      Param(
        type = 'GdkPixbufAnimation *',
        name = 'animation',
      ),
    ],
  ),
  'gdk_pixbuf_animation_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkPixbufAnimation *',
        name = 'animation',
      ),
    ],
  ),
  'gdk_pixbuf_animation_get_width': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GdkPixbufAnimation *',
        name = 'animation',
      ),
    ],
  ),
  'gdk_pixbuf_animation_get_height': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GdkPixbufAnimation *',
        name = 'animation',
      ),
    ],
  ),
  'gdk_pixbuf_animation_is_static_image': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbufAnimation *',
        name = 'animation',
      ),
    ],
  ),
  'gdk_pixbuf_animation_get_static_image': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GdkPixbufAnimation *',
        name = 'animation',
      ),
    ],
  ),
  'gdk_pixbuf_animation_get_iter': Spec(
    return_type = 'GdkPixbufAnimationIter *',
    parameters = [
      Param(
        type = 'GdkPixbufAnimation *',
        name = 'animation',
      ),
      Param(
        type = 'const GTimeVal *',
        name = 'start_time',
      ),
    ],
  ),
  'gdk_pixbuf_animation_iter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_pixbuf_animation_iter_get_delay_time': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GdkPixbufAnimationIter *',
        name = 'iter',
      ),
    ],
  ),
  'gdk_pixbuf_animation_iter_get_pixbuf': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GdkPixbufAnimationIter *',
        name = 'iter',
      ),
    ],
  ),
  'gdk_pixbuf_animation_iter_on_currently_loading_frame': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbufAnimationIter *',
        name = 'iter',
      ),
    ],
  ),
  'gdk_pixbuf_animation_iter_advance': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbufAnimationIter *',
        name = 'iter',
      ),
      Param(
        type = 'const GTimeVal *',
        name = 'current_time',
      ),
    ],
  ),
  'gdk_pixbuf_simple_anim_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_pixbuf_simple_anim_iter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_pixbuf_simple_anim_new': Spec(
    return_type = 'GdkPixbufSimpleAnim *',
    parameters = [
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
      Param(
        type = 'gfloat',
        name = 'rate',
      ),
    ],
  ),
  'gdk_pixbuf_simple_anim_add_frame': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkPixbufSimpleAnim *',
        name = 'animation',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_simple_anim_set_loop': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkPixbufSimpleAnim *',
        name = 'animation',
      ),
      Param(
        type = 'gboolean',
        name = 'loop',
      ),
    ],
  ),
  'gdk_pixbuf_simple_anim_get_loop': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbufSimpleAnim *',
        name = 'animation',
      ),
    ],
  ),
  'gdk_pixbuf_format_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_pixbuf_get_formats': Spec(
    return_type = 'GSList *',
    parameters = [
    ],
  ),
  'gdk_pixbuf_format_get_name': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GdkPixbufFormat *',
        name = 'format',
      ),
    ],
  ),
  'gdk_pixbuf_format_get_description': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GdkPixbufFormat *',
        name = 'format',
      ),
    ],
  ),
  'gdk_pixbuf_format_get_mime_types': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GdkPixbufFormat *',
        name = 'format',
      ),
    ],
  ),
  'gdk_pixbuf_format_get_extensions': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GdkPixbufFormat *',
        name = 'format',
      ),
    ],
  ),
  'gdk_pixbuf_format_is_writable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbufFormat *',
        name = 'format',
      ),
    ],
  ),
  'gdk_pixbuf_format_is_scalable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbufFormat *',
        name = 'format',
      ),
    ],
  ),
  'gdk_pixbuf_format_is_disabled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbufFormat *',
        name = 'format',
      ),
    ],
  ),
  'gdk_pixbuf_format_set_disabled': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkPixbufFormat *',
        name = 'format',
      ),
      Param(
        type = 'gboolean',
        name = 'disabled',
      ),
    ],
  ),
  'gdk_pixbuf_format_get_license': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GdkPixbufFormat *',
        name = 'format',
      ),
    ],
  ),
  'gdk_pixbuf_get_file_info': Spec(
    return_type = 'GdkPixbufFormat *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'gint *',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'height',
      ),
    ],
  ),
  'gdk_pixbuf_format_copy': Spec(
    return_type = 'GdkPixbufFormat *',
    parameters = [
      Param(
        type = 'const GdkPixbufFormat *',
        name = 'format',
      ),
    ],
  ),
  'gdk_pixbuf_format_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkPixbufFormat *',
        name = 'format',
      ),
    ],
  ),
  'gdk_pixbuf_loader_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_pixbuf_loader_new': Spec(
    return_type = 'GdkPixbufLoader *',
    parameters = [
    ],
  ),
  'gdk_pixbuf_loader_new_with_type': Spec(
    return_type = 'GdkPixbufLoader *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'image_type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_loader_new_with_mime_type': Spec(
    return_type = 'GdkPixbufLoader *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'mime_type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_loader_set_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkPixbufLoader *',
        name = 'loader',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'gdk_pixbuf_loader_write': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbufLoader *',
        name = 'loader',
      ),
      Param(
        type = 'const guchar *',
        name = 'buf',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_loader_get_pixbuf': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GdkPixbufLoader *',
        name = 'loader',
      ),
    ],
  ),
  'gdk_pixbuf_loader_get_animation': Spec(
    return_type = 'GdkPixbufAnimation *',
    parameters = [
      Param(
        type = 'GdkPixbufLoader *',
        name = 'loader',
      ),
    ],
  ),
  'gdk_pixbuf_loader_close': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbufLoader *',
        name = 'loader',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_loader_get_format': Spec(
    return_type = 'GdkPixbufFormat *',
    parameters = [
      Param(
        type = 'GdkPixbufLoader *',
        name = 'loader',
      ),
    ],
  ),
  'gdk_pixbuf_alpha_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_colorspace_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_pixbuf_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_interp_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_pixbuf_rotation_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_pixdata_serialize': Spec(
    return_type = 'guint8 *',
    parameters = [
      Param(
        type = 'const GdkPixdata *',
        name = 'pixdata',
      ),
      Param(
        type = 'guint *',
        name = 'stream_length_p',
      ),
    ],
  ),
  'gdk_pixdata_deserialize': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixdata *',
        name = 'pixdata',
      ),
      Param(
        type = 'guint',
        name = 'stream_length',
      ),
      Param(
        type = 'const guint8 *',
        name = 'stream',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixdata_from_pixbuf': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GdkPixdata *',
        name = 'pixdata',
      ),
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'gboolean',
        name = 'use_rle',
      ),
    ],
  ),
  'gdk_pixbuf_from_pixdata': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const GdkPixdata *',
        name = 'pixdata',
      ),
      Param(
        type = 'gboolean',
        name = 'copy_pixels',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixdata_to_csource': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GdkPixdata *',
        name = 'pixdata',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GdkPixdataDumpType',
        name = 'dump_type',
      ),
    ],
  ),
  '_gdk_pixbuf_marshal_VOID__INT_INT': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  '_gdk_pixbuf_marshal_VOID__INT_INT_INT_INT': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  '__builtin_bswap32': Spec(
    return_type = 'uint32_t',
    parameters = [
      Param(
        type = 'uint32_t',
        name = 'x',
      ),
    ],
  ),
  '__builtin_bswap64': Spec(
    return_type = 'uint64_t',
    parameters = [
      Param(
        type = 'uint64_t',
        name = 'x',
      ),
    ],
  ),
}