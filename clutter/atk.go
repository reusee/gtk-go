// this file is auto-generated by gtk-go

package clutter

// #cgo pkg-config: atk gobject-2.0 gtk+-3.0
// #include <string.h>
// #include <glib-object.h>
// #include <glib/gstdio.h>
// #include <glib-unix.h>
// #include <atk/atk.h>
/*
typedef unsigned long ulong;
typedef unsigned int uint;
typedef unsigned char uchar;
guint _atk_add_global_event_listener(GSignalEmissionHook listener, gchar * event_type) {
	return (guint)atk_add_global_event_listener(listener, (const gchar *)(event_type));
}
gchar * _atk_get_toolkit_name() {
	return (gchar *)atk_get_toolkit_name();
}
gchar * _atk_get_toolkit_version() {
	return (gchar *)atk_get_toolkit_version();
}
gchar * _atk_get_version() {
	return (gchar *)atk_get_version();
}
AtkRelationType _atk_relation_type_for_name(gchar * name) {
	return (AtkRelationType)atk_relation_type_for_name((const gchar *)(name));
}
gchar * _atk_relation_type_get_name(AtkRelationType type) {
	return (gchar *)atk_relation_type_get_name(type);
}
AtkRelationType _atk_relation_type_register(gchar * name) {
	return (AtkRelationType)atk_relation_type_register((const gchar *)(name));
}
AtkRole _atk_role_for_name(gchar * name) {
	return (AtkRole)atk_role_for_name((const gchar *)(name));
}
gchar * _atk_role_get_localized_name(AtkRole role) {
	return (gchar *)atk_role_get_localized_name(role);
}
gchar * _atk_role_get_name(AtkRole role) {
	return (gchar *)atk_role_get_name(role);
}
AtkRole _atk_role_register(gchar * name) {
	return (AtkRole)atk_role_register((const gchar *)(name));
}
AtkStateType _atk_state_type_for_name(gchar * name) {
	return (AtkStateType)atk_state_type_for_name((const gchar *)(name));
}
gchar * _atk_state_type_get_name(AtkStateType type) {
	return (gchar *)atk_state_type_get_name(type);
}
AtkStateType _atk_state_type_register(gchar * name) {
	return (AtkStateType)atk_state_type_register((const gchar *)(name));
}
AtkTextAttribute _atk_text_attribute_for_name(gchar * name) {
	return (AtkTextAttribute)atk_text_attribute_for_name((const gchar *)(name));
}
gchar * _atk_text_attribute_get_name(AtkTextAttribute attr) {
	return (gchar *)atk_text_attribute_get_name(attr);
}
gchar * _atk_text_attribute_get_value(AtkTextAttribute attr, gint index_) {
	return (gchar *)atk_text_attribute_get_value(attr, index_);
}
AtkTextAttribute _atk_text_attribute_register(gchar * name) {
	return (AtkTextAttribute)atk_text_attribute_register((const gchar *)(name));
}
void _atk_text_free_ranges(void * ranges) {
	(void)atk_text_free_ranges((AtkTextRange **)(ranges));
}
AtkMisc * _atk_misc_get_instance() {
	return (AtkMisc *)atk_misc_get_instance();
}
gchar * _atk_object_get_description(AtkObject * _self_) {
	return (gchar *)atk_object_get_description(_self_);
}
gchar * _atk_object_get_name(AtkObject * _self_) {
	return (gchar *)atk_object_get_name(_self_);
}
void _atk_object_set_description(AtkObject * _self_, gchar * description) {
	(void)atk_object_set_description(_self_, (const gchar *)(description));
}
void _atk_object_set_name(AtkObject * _self_, gchar * name) {
	(void)atk_object_set_name(_self_, (const gchar *)(name));
}
AtkRelation * _atk_relation_new(void * targets, gint n_targets, AtkRelationType relationship) {
	return (AtkRelation *)atk_relation_new((AtkObject **)(targets), n_targets, relationship);
}
gchar * _atk_action_get_description(AtkAction * _self_, gint i) {
	return (gchar *)atk_action_get_description(_self_, i);
}
gchar * _atk_action_get_keybinding(AtkAction * _self_, gint i) {
	return (gchar *)atk_action_get_keybinding(_self_, i);
}
gchar * _atk_action_get_localized_name(AtkAction * _self_, gint i) {
	return (gchar *)atk_action_get_localized_name(_self_, i);
}
gchar * _atk_action_get_name(AtkAction * _self_, gint i) {
	return (gchar *)atk_action_get_name(_self_, i);
}
gboolean _atk_action_set_description(AtkAction * _self_, gint i, gchar * desc) {
	return (gboolean)atk_action_set_description(_self_, i, (const gchar *)(desc));
}
gchar * _atk_document_get_attribute_value(AtkDocument * _self_, gchar * attribute_name) {
	return (gchar *)atk_document_get_attribute_value(_self_, (const gchar *)(attribute_name));
}
gchar * _atk_document_get_document_type(AtkDocument * _self_) {
	return (gchar *)atk_document_get_document_type(_self_);
}
gchar * _atk_document_get_locale(AtkDocument * _self_) {
	return (gchar *)atk_document_get_locale(_self_);
}
gboolean _atk_document_set_attribute_value(AtkDocument * _self_, gchar * attribute_name, gchar * attribute_value) {
	return (gboolean)atk_document_set_attribute_value(_self_, (const gchar *)(attribute_name), (const gchar *)(attribute_value));
}
void _atk_editable_text_insert_text(AtkEditableText * _self_, gchar * string, gint length, gint * position) {
	(void)atk_editable_text_insert_text(_self_, (const gchar *)(string), length, position);
}
void _atk_editable_text_set_text_contents(AtkEditableText * _self_, gchar * string) {
	(void)atk_editable_text_set_text_contents(_self_, (const gchar *)(string));
}
gchar * _atk_image_get_image_description(AtkImage * _self_) {
	return (gchar *)atk_image_get_image_description(_self_);
}
gchar * _atk_image_get_image_locale(AtkImage * _self_) {
	return (gchar *)atk_image_get_image_locale(_self_);
}
gboolean _atk_image_set_image_description(AtkImage * _self_, gchar * description) {
	return (gboolean)atk_image_set_image_description(_self_, (const gchar *)(description));
}
gchar * _atk_streamable_content_get_mime_type(AtkStreamableContent * _self_, gint i) {
	return (gchar *)atk_streamable_content_get_mime_type(_self_, i);
}
GIOChannel * _atk_streamable_content_get_stream(AtkStreamableContent * _self_, gchar * mime_type) {
	return (GIOChannel *)atk_streamable_content_get_stream(_self_, (const gchar *)(mime_type));
}
gchar * _atk_streamable_content_get_uri(AtkStreamableContent * _self_, gchar * mime_type) {
	return (gchar *)atk_streamable_content_get_uri(_self_, (const gchar *)(mime_type));
}
gchar * _atk_table_get_column_description(AtkTable * _self_, gint column) {
	return (gchar *)atk_table_get_column_description(_self_, column);
}
gchar * _atk_table_get_row_description(AtkTable * _self_, gint row) {
	return (gchar *)atk_table_get_row_description(_self_, row);
}
gint _atk_table_get_selected_columns(AtkTable * _self_, void * selected) {
	return (gint)atk_table_get_selected_columns(_self_, (gint **)(selected));
}
gint _atk_table_get_selected_rows(AtkTable * _self_, void * selected) {
	return (gint)atk_table_get_selected_rows(_self_, (gint **)(selected));
}
void _atk_table_set_column_description(AtkTable * _self_, gint column, gchar * description) {
	(void)atk_table_set_column_description(_self_, column, (const gchar *)(description));
}
void _atk_table_set_row_description(AtkTable * _self_, gint row, gchar * description) {
	(void)atk_table_set_row_description(_self_, row, (const gchar *)(description));
}
void * _atk_text_get_bounded_ranges(AtkText * _self_, AtkTextRectangle * rect, AtkCoordType coord_type, AtkTextClipType x_clip_type, AtkTextClipType y_clip_type) {
	return (void *)atk_text_get_bounded_ranges(_self_, rect, coord_type, x_clip_type, y_clip_type);
}
gboolean _atk_value_set_current_value(AtkValue * _self_, GValue * value) {
	return (gboolean)atk_value_set_current_value(_self_, (const GValue *)(value));
}
*/
import "C"
import (
	"unsafe"
)

type NoOpObjectFactoryClass C.AtkNoOpObjectFactoryClass
type HypertextIface C.AtkHypertextIface
type AtkObjectClass C.AtkObjectClass
type ImageIface C.AtkImageIface
type DocumentIface C.AtkDocumentIface
type WindowIface C.AtkWindowIface
type ValueIface C.AtkValueIface
type NoOpObjectClass C.AtkNoOpObjectClass
type TextRange C.AtkTextRange
type PlugClass C.AtkPlugClass
type EditableTextIface C.AtkEditableTextIface
type TextIface C.AtkTextIface
type RelationClass C.AtkRelationClass
type ActionIface C.AtkActionIface
type ComponentIface C.AtkComponentIface
type SelectionIface C.AtkSelectionIface
type MiscClass C.AtkMiscClass
type TableIface C.AtkTableIface
type StreamableContentIface C.AtkStreamableContentIface
type GObjectAccessibleClass C.AtkGObjectAccessibleClass
type RelationSetClass C.AtkRelationSetClass
type HyperlinkClass C.AtkHyperlinkClass
type AtkRectangle C.AtkRectangle
type KeyEventStruct C.AtkKeyEventStruct
type Attribute C.AtkAttribute
type StateSetClass C.AtkStateSetClass
type HyperlinkImplIface C.AtkHyperlinkImplIface
type TextRectangle C.AtkTextRectangle
type ObjectFactoryClass C.AtkObjectFactoryClass
type SocketClass C.AtkSocketClass
type Implementor C.AtkImplementor
type UtilClass C.AtkUtilClass
type Plug struct {
	AtkObject
	Component
	_value_ unsafe.Pointer
}
type PlugKind interface {
  _IsPlug()
  GetGObject() unsafe.Pointer
}
func (self Plug) _IsPlug() {}
func (self Plug) GetGObject() unsafe.Pointer { return self._value_ }
func ToPlug(value unsafe.Pointer) Plug {
	return Plug{
		ToAtkObject(value),
		ToComponent(value),
		value,
	}
}
func (self Plug) _IsComponent () {}
type StateSet struct {
	GObjectObject
	_value_ unsafe.Pointer
}
type StateSetKind interface {
  _IsStateSet()
  GetGObject() unsafe.Pointer
}
func (self StateSet) _IsStateSet() {}
func (self StateSet) GetGObject() unsafe.Pointer { return self._value_ }
func ToStateSet(value unsafe.Pointer) StateSet {
	return StateSet{
		ToGObjectObject(value),
		value,
	}
}
type ObjectFactory struct {
	GObjectObject
	_value_ unsafe.Pointer
}
type ObjectFactoryKind interface {
  _IsObjectFactory()
  GetGObject() unsafe.Pointer
}
func (self ObjectFactory) _IsObjectFactory() {}
func (self ObjectFactory) GetGObject() unsafe.Pointer { return self._value_ }
func ToObjectFactory(value unsafe.Pointer) ObjectFactory {
	return ObjectFactory{
		ToGObjectObject(value),
		value,
	}
}
type AtkImage struct {
	_value_ unsafe.Pointer
}
type AtkImageKind interface {
  _IsAtkImage()
  GetGObject() unsafe.Pointer
}
func (self AtkImage) _IsAtkImage() {}
func (self AtkImage) GetGObject() unsafe.Pointer { return self._value_ }
func ToAtkImage(value unsafe.Pointer) AtkImage {
	return AtkImage{
		value,
	}
}
type RelationSet struct {
	GObjectObject
	_value_ unsafe.Pointer
}
type RelationSetKind interface {
  _IsRelationSet()
  GetGObject() unsafe.Pointer
}
func (self RelationSet) _IsRelationSet() {}
func (self RelationSet) GetGObject() unsafe.Pointer { return self._value_ }
func ToRelationSet(value unsafe.Pointer) RelationSet {
	return RelationSet{
		ToGObjectObject(value),
		value,
	}
}
type Window struct {
	_value_ unsafe.Pointer
}
type WindowKind interface {
  _IsWindow()
  GetGObject() unsafe.Pointer
}
func (self Window) _IsWindow() {}
func (self Window) GetGObject() unsafe.Pointer { return self._value_ }
func ToWindow(value unsafe.Pointer) Window {
	return Window{
		value,
	}
}
type GObjectAccessible struct {
	AtkObject
	_value_ unsafe.Pointer
}
type GObjectAccessibleKind interface {
  _IsGObjectAccessible()
  GetGObject() unsafe.Pointer
}
func (self GObjectAccessible) _IsGObjectAccessible() {}
func (self GObjectAccessible) GetGObject() unsafe.Pointer { return self._value_ }
func ToGObjectAccessible(value unsafe.Pointer) GObjectAccessible {
	return GObjectAccessible{
		ToAtkObject(value),
		value,
	}
}
type Document struct {
	_value_ unsafe.Pointer
}
type DocumentKind interface {
  _IsDocument()
  GetGObject() unsafe.Pointer
}
func (self Document) _IsDocument() {}
func (self Document) GetGObject() unsafe.Pointer { return self._value_ }
func ToDocument(value unsafe.Pointer) Document {
	return Document{
		value,
	}
}
type EditableText struct {
	_value_ unsafe.Pointer
}
type EditableTextKind interface {
  _IsEditableText()
  GetGObject() unsafe.Pointer
}
func (self EditableText) _IsEditableText() {}
func (self EditableText) GetGObject() unsafe.Pointer { return self._value_ }
func ToEditableText(value unsafe.Pointer) EditableText {
	return EditableText{
		value,
	}
}
type Component struct {
	_value_ unsafe.Pointer
}
type ComponentKind interface {
  _IsComponent()
  GetGObject() unsafe.Pointer
}
func (self Component) _IsComponent() {}
func (self Component) GetGObject() unsafe.Pointer { return self._value_ }
func ToComponent(value unsafe.Pointer) Component {
	return Component{
		value,
	}
}
type StreamableContent struct {
	_value_ unsafe.Pointer
}
type StreamableContentKind interface {
  _IsStreamableContent()
  GetGObject() unsafe.Pointer
}
func (self StreamableContent) _IsStreamableContent() {}
func (self StreamableContent) GetGObject() unsafe.Pointer { return self._value_ }
func ToStreamableContent(value unsafe.Pointer) StreamableContent {
	return StreamableContent{
		value,
	}
}
type Util struct {
	GObjectObject
	_value_ unsafe.Pointer
}
type UtilKind interface {
  _IsUtil()
  GetGObject() unsafe.Pointer
}
func (self Util) _IsUtil() {}
func (self Util) GetGObject() unsafe.Pointer { return self._value_ }
func ToUtil(value unsafe.Pointer) Util {
	return Util{
		ToGObjectObject(value),
		value,
	}
}
type NoOpObject struct {
	AtkObject
	AtkAction
	Component
	Document
	EditableText
	Hypertext
	AtkImage
	Selection
	Table
	AtkText
	AtkValue
	Window
	_value_ unsafe.Pointer
}
type NoOpObjectKind interface {
  _IsNoOpObject()
  GetGObject() unsafe.Pointer
}
func (self NoOpObject) _IsNoOpObject() {}
func (self NoOpObject) GetGObject() unsafe.Pointer { return self._value_ }
func ToNoOpObject(value unsafe.Pointer) NoOpObject {
	return NoOpObject{
		ToAtkObject(value),
		ToAtkAction(value),
		ToComponent(value),
		ToDocument(value),
		ToEditableText(value),
		ToHypertext(value),
		ToAtkImage(value),
		ToSelection(value),
		ToTable(value),
		ToAtkText(value),
		ToAtkValue(value),
		ToWindow(value),
		value,
	}
}
func (self NoOpObject) _IsAtkAction () {}
func (self NoOpObject) _IsComponent () {}
func (self NoOpObject) _IsDocument () {}
func (self NoOpObject) _IsEditableText () {}
func (self NoOpObject) _IsHypertext () {}
func (self NoOpObject) _IsAtkImage () {}
func (self NoOpObject) _IsSelection () {}
func (self NoOpObject) _IsTable () {}
func (self NoOpObject) _IsAtkText () {}
func (self NoOpObject) _IsAtkValue () {}
func (self NoOpObject) _IsWindow () {}
type NoOpObjectFactory struct {
	ObjectFactory
	_value_ unsafe.Pointer
}
type NoOpObjectFactoryKind interface {
  _IsNoOpObjectFactory()
  GetGObject() unsafe.Pointer
}
func (self NoOpObjectFactory) _IsNoOpObjectFactory() {}
func (self NoOpObjectFactory) GetGObject() unsafe.Pointer { return self._value_ }
func ToNoOpObjectFactory(value unsafe.Pointer) NoOpObjectFactory {
	return NoOpObjectFactory{
		ToObjectFactory(value),
		value,
	}
}
type Socket struct {
	AtkObject
	Component
	_value_ unsafe.Pointer
}
type SocketKind interface {
  _IsSocket()
  GetGObject() unsafe.Pointer
}
func (self Socket) _IsSocket() {}
func (self Socket) GetGObject() unsafe.Pointer { return self._value_ }
func ToSocket(value unsafe.Pointer) Socket {
	return Socket{
		ToAtkObject(value),
		ToComponent(value),
		value,
	}
}
func (self Socket) _IsComponent () {}
type ImplementorIface struct {
	_value_ unsafe.Pointer
}
type ImplementorIfaceKind interface {
  _IsImplementorIface()
  GetGObject() unsafe.Pointer
}
func (self ImplementorIface) _IsImplementorIface() {}
func (self ImplementorIface) GetGObject() unsafe.Pointer { return self._value_ }
func ToImplementorIface(value unsafe.Pointer) ImplementorIface {
	return ImplementorIface{
		value,
	}
}
type Hyperlink struct {
	GObjectObject
	AtkAction
	_value_ unsafe.Pointer
}
type HyperlinkKind interface {
  _IsHyperlink()
  GetGObject() unsafe.Pointer
}
func (self Hyperlink) _IsHyperlink() {}
func (self Hyperlink) GetGObject() unsafe.Pointer { return self._value_ }
func ToHyperlink(value unsafe.Pointer) Hyperlink {
	return Hyperlink{
		ToGObjectObject(value),
		ToAtkAction(value),
		value,
	}
}
func (self Hyperlink) _IsAtkAction () {}
type AtkObject struct {
	GObjectObject
	_value_ unsafe.Pointer
}
type AtkObjectKind interface {
  _IsAtkObject()
  GetGObject() unsafe.Pointer
}
func (self AtkObject) _IsAtkObject() {}
func (self AtkObject) GetGObject() unsafe.Pointer { return self._value_ }
func ToAtkObject(value unsafe.Pointer) AtkObject {
	return AtkObject{
		ToGObjectObject(value),
		value,
	}
}
type HyperlinkImpl struct {
	_value_ unsafe.Pointer
}
type HyperlinkImplKind interface {
  _IsHyperlinkImpl()
  GetGObject() unsafe.Pointer
}
func (self HyperlinkImpl) _IsHyperlinkImpl() {}
func (self HyperlinkImpl) GetGObject() unsafe.Pointer { return self._value_ }
func ToHyperlinkImpl(value unsafe.Pointer) HyperlinkImpl {
	return HyperlinkImpl{
		value,
	}
}
type AtkText struct {
	_value_ unsafe.Pointer
}
type AtkTextKind interface {
  _IsAtkText()
  GetGObject() unsafe.Pointer
}
func (self AtkText) _IsAtkText() {}
func (self AtkText) GetGObject() unsafe.Pointer { return self._value_ }
func ToAtkText(value unsafe.Pointer) AtkText {
	return AtkText{
		value,
	}
}
type Selection struct {
	_value_ unsafe.Pointer
}
type SelectionKind interface {
  _IsSelection()
  GetGObject() unsafe.Pointer
}
func (self Selection) _IsSelection() {}
func (self Selection) GetGObject() unsafe.Pointer { return self._value_ }
func ToSelection(value unsafe.Pointer) Selection {
	return Selection{
		value,
	}
}
type Hypertext struct {
	_value_ unsafe.Pointer
}
type HypertextKind interface {
  _IsHypertext()
  GetGObject() unsafe.Pointer
}
func (self Hypertext) _IsHypertext() {}
func (self Hypertext) GetGObject() unsafe.Pointer { return self._value_ }
func ToHypertext(value unsafe.Pointer) Hypertext {
	return Hypertext{
		value,
	}
}
type AtkValue struct {
	_value_ unsafe.Pointer
}
type AtkValueKind interface {
  _IsAtkValue()
  GetGObject() unsafe.Pointer
}
func (self AtkValue) _IsAtkValue() {}
func (self AtkValue) GetGObject() unsafe.Pointer { return self._value_ }
func ToAtkValue(value unsafe.Pointer) AtkValue {
	return AtkValue{
		value,
	}
}
type Misc struct {
	GObjectObject
	_value_ unsafe.Pointer
}
type MiscKind interface {
  _IsMisc()
  GetGObject() unsafe.Pointer
}
func (self Misc) _IsMisc() {}
func (self Misc) GetGObject() unsafe.Pointer { return self._value_ }
func ToMisc(value unsafe.Pointer) Misc {
	return Misc{
		ToGObjectObject(value),
		value,
	}
}
type AtkAction struct {
	_value_ unsafe.Pointer
}
type AtkActionKind interface {
  _IsAtkAction()
  GetGObject() unsafe.Pointer
}
func (self AtkAction) _IsAtkAction() {}
func (self AtkAction) GetGObject() unsafe.Pointer { return self._value_ }
func ToAtkAction(value unsafe.Pointer) AtkAction {
	return AtkAction{
		value,
	}
}
type Relation struct {
	GObjectObject
	_value_ unsafe.Pointer
}
type RelationKind interface {
  _IsRelation()
  GetGObject() unsafe.Pointer
}
func (self Relation) _IsRelation() {}
func (self Relation) GetGObject() unsafe.Pointer { return self._value_ }
func ToRelation(value unsafe.Pointer) Relation {
	return Relation{
		ToGObjectObject(value),
		value,
	}
}
type Table struct {
	_value_ unsafe.Pointer
}
type TableKind interface {
  _IsTable()
  GetGObject() unsafe.Pointer
}
func (self Table) _IsTable() {}
func (self Table) GetGObject() unsafe.Pointer { return self._value_ }
func ToTable(value unsafe.Pointer) Table {
	return Table{
		value,
	}
}
func AddFocusTracker(focus_tracker C.AtkEventListener) (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.atk_add_focus_tracker(focus_tracker)
	_go__return__ = (uint)(_return_)
	return
}

func AddGlobalEventListener(listener C.GSignalEmissionHook, event_type string) (_go__return__ uint) {
	var _return_ C.guint
	_cstring_event_type_ := C.CString(event_type)
	_cgo_event_type_ := (*C.gchar)(unsafe.Pointer(_cstring_event_type_))
	defer C.free(unsafe.Pointer(_cstring_event_type_))
	_return_ = C._atk_add_global_event_listener(listener, _cgo_event_type_)
	_go__return__ = (uint)(_return_)
	return
}

func AddKeyEventListener(listener C.AtkKeySnoopFunc, data C.gpointer) (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.atk_add_key_event_listener(listener, data)
	_go__return__ = (uint)(_return_)
	return
}

func AttributeSetFree(attrib_set *C.AtkAttributeSet) () {
	C.atk_attribute_set_free(attrib_set)
	return
}

func FocusTrackerInit(init C.AtkEventListenerInit) () {
	C.atk_focus_tracker_init(init)
	return
}

func FocusTrackerNotify(object AtkObjectKind) () {
	_cgo_object_ := (*C.AtkObject)(object.GetGObject())
	C.atk_focus_tracker_notify(_cgo_object_)
	return
}

func GetDefaultRegistry() (_return_ *C.AtkRegistry) {
	_return_ = C.atk_get_default_registry()
	return
}

func GetFocusObject() (_go__return__ AtkObject) {
	var _return_ *C.AtkObject
	_return_ = C.atk_get_focus_object()
	_go__return__ = ToAtkObject(unsafe.Pointer(_return_))
	return
}

func GetRoot() (_go__return__ AtkObject) {
	var _return_ *C.AtkObject
	_return_ = C.atk_get_root()
	_go__return__ = ToAtkObject(unsafe.Pointer(_return_))
	return
}

func GetToolkitName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_get_toolkit_name()
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func GetToolkitVersion() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_get_toolkit_version()
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func GetVersion() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_get_version()
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func RelationTypeForName(name string) (_return_ C.AtkRelationType) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._atk_relation_type_for_name(_cgo_name_)
	return
}

func RelationTypeGetName(type_ C.AtkRelationType) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_relation_type_get_name(type_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func RelationTypeRegister(name string) (_return_ C.AtkRelationType) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._atk_relation_type_register(_cgo_name_)
	return
}

func RemoveFocusTracker(tracker_id uint) () {
	_cgo_tracker_id_ := (C.guint)(tracker_id)
	C.atk_remove_focus_tracker(_cgo_tracker_id_)
	return
}

func RemoveGlobalEventListener(listener_id uint) () {
	_cgo_listener_id_ := (C.guint)(listener_id)
	C.atk_remove_global_event_listener(_cgo_listener_id_)
	return
}

func RemoveKeyEventListener(listener_id uint) () {
	_cgo_listener_id_ := (C.guint)(listener_id)
	C.atk_remove_key_event_listener(_cgo_listener_id_)
	return
}

func RoleForName(name string) (_return_ C.AtkRole) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._atk_role_for_name(_cgo_name_)
	return
}

func RoleGetLocalizedName(role C.AtkRole) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_role_get_localized_name(role)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func RoleGetName(role C.AtkRole) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_role_get_name(role)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func RoleRegister(name string) (_return_ C.AtkRole) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._atk_role_register(_cgo_name_)
	return
}

func StateTypeForName(name string) (_return_ C.AtkStateType) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._atk_state_type_for_name(_cgo_name_)
	return
}

func StateTypeGetName(type_ C.AtkStateType) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_state_type_get_name(type_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func StateTypeRegister(name string) (_return_ C.AtkStateType) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._atk_state_type_register(_cgo_name_)
	return
}

func TextAttributeForName(name string) (_return_ C.AtkTextAttribute) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._atk_text_attribute_for_name(_cgo_name_)
	return
}

func TextAttributeGetName(attr C.AtkTextAttribute) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_text_attribute_get_name(attr)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func TextAttributeGetValue(attr C.AtkTextAttribute, index_ int) (_go__return__ string) {
	_cgo_index__ := (C.gint)(index_)
	var _return_ *C.gchar
	_return_ = C._atk_text_attribute_get_value(attr, _cgo_index__)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func TextAttributeRegister(name string) (_return_ C.AtkTextAttribute) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._atk_text_attribute_register(_cgo_name_)
	return
}

func TextFreeRanges(ranges *TextRange) () {
	_cgo_ranges_ := (unsafe.Pointer)(unsafe.Pointer(ranges))
	C._atk_text_free_ranges(_cgo_ranges_)
	return
}

func GObjectAccessibleForObject(obj *C.GObject) (_go__return__ AtkObject) {
	var _return_ *C.AtkObject
	_return_ = C.atk_gobject_accessible_for_object(obj)
	_go__return__ = ToAtkObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *GObjectAccessible) GetObject() (_return_ *C.GObject) {
	_return_ = C.atk_gobject_accessible_get_object((*C.AtkGObjectAccessible)(_self_._value_))
	return
}

func (_self_ *Hyperlink) GetEndIndex() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.atk_hyperlink_get_end_index((*C.AtkHyperlink)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Hyperlink) GetNAnchors() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.atk_hyperlink_get_n_anchors((*C.AtkHyperlink)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Hyperlink) GetObject(i int) (_go__return__ AtkObject) {
	var _return_ *C.AtkObject
	_cgo_i_ := (C.gint)(i)
	_return_ = C.atk_hyperlink_get_object((*C.AtkHyperlink)(_self_._value_), _cgo_i_)
	_go__return__ = ToAtkObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *Hyperlink) GetStartIndex() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.atk_hyperlink_get_start_index((*C.AtkHyperlink)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Hyperlink) GetUri(i int) (_go__return__ string) {
	_cgo_i_ := (C.gint)(i)
	var _return_ *C.gchar
	_return_ = C.atk_hyperlink_get_uri((*C.AtkHyperlink)(_self_._value_), _cgo_i_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Hyperlink) IsInline() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.atk_hyperlink_is_inline((*C.AtkHyperlink)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Hyperlink) IsValid() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.atk_hyperlink_is_valid((*C.AtkHyperlink)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func MiscGetInstance() (_go__return__ Misc) {
	var _return_ *C.AtkMisc
	_return_ = C._atk_misc_get_instance()
	_go__return__ = ToMisc(unsafe.Pointer(_return_))
	return
}

func (_self_ *Misc) ThreadsEnter() () {
	C.atk_misc_threads_enter((*C.AtkMisc)(_self_._value_))
	return
}

func (_self_ *Misc) ThreadsLeave() () {
	C.atk_misc_threads_leave((*C.AtkMisc)(_self_._value_))
	return
}

func NoOpObjectNew(obj *C.GObject) (_go__return__ NoOpObject) {
	var _return_ *C.AtkObject
	_return_ = C.atk_no_op_object_new(obj)
	_go__return__ = ToNoOpObject(unsafe.Pointer(_return_))
	return
}

func NoOpObjectFactoryNew() (_go__return__ NoOpObjectFactory) {
	var _return_ *C.AtkObjectFactory
	_return_ = C.atk_no_op_object_factory_new()
	_go__return__ = ToNoOpObjectFactory(unsafe.Pointer(_return_))
	return
}

func (_self_ *AtkObject) AddRelationship(relationship C.AtkRelationType, target AtkObjectKind) (_go__return__ bool) {
	_cgo_target_ := (*C.AtkObject)(target.GetGObject())
	var _return_ C.gboolean
	_return_ = C.atk_object_add_relationship((*C.AtkObject)(_self_._value_), relationship, _cgo_target_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *AtkObject) ConnectPropertyChangeHandler(handler *C.AtkPropertyChangeHandler) (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.atk_object_connect_property_change_handler((*C.AtkObject)(_self_._value_), handler)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *AtkObject) GetAttributes() (_return_ *C.AtkAttributeSet) {
	_return_ = C.atk_object_get_attributes((*C.AtkObject)(_self_._value_))
	return
}

func (_self_ *AtkObject) GetDescription() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_object_get_description((*C.AtkObject)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AtkObject) GetIndexInParent() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.atk_object_get_index_in_parent((*C.AtkObject)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *AtkObject) GetNAccessibleChildren() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.atk_object_get_n_accessible_children((*C.AtkObject)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *AtkObject) GetName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_object_get_name((*C.AtkObject)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AtkObject) GetParent() (_go__return__ AtkObject) {
	var _return_ *C.AtkObject
	_return_ = C.atk_object_get_parent((*C.AtkObject)(_self_._value_))
	_go__return__ = ToAtkObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *AtkObject) GetRole() (_return_ C.AtkRole) {
	_return_ = C.atk_object_get_role((*C.AtkObject)(_self_._value_))
	return
}

func (_self_ *AtkObject) Initialize(data C.gpointer) () {
	C.atk_object_initialize((*C.AtkObject)(_self_._value_), data)
	return
}

func (_self_ *AtkObject) NotifyStateChange(state C.AtkState, value bool) () {
	_cgo_value_ := (C.gboolean)(C.FALSE)
	if value { _cgo_value_ = (C.gboolean)(C.TRUE) }
	C.atk_object_notify_state_change((*C.AtkObject)(_self_._value_), state, _cgo_value_)
	return
}

func (_self_ *AtkObject) RefAccessibleChild(i int) (_go__return__ AtkObject) {
	var _return_ *C.AtkObject
	_cgo_i_ := (C.gint)(i)
	_return_ = C.atk_object_ref_accessible_child((*C.AtkObject)(_self_._value_), _cgo_i_)
	_go__return__ = ToAtkObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *AtkObject) RefRelationSet() (_go__return__ RelationSet) {
	var _return_ *C.AtkRelationSet
	_return_ = C.atk_object_ref_relation_set((*C.AtkObject)(_self_._value_))
	_go__return__ = ToRelationSet(unsafe.Pointer(_return_))
	return
}

func (_self_ *AtkObject) RefStateSet() (_go__return__ StateSet) {
	var _return_ *C.AtkStateSet
	_return_ = C.atk_object_ref_state_set((*C.AtkObject)(_self_._value_))
	_go__return__ = ToStateSet(unsafe.Pointer(_return_))
	return
}

func (_self_ *AtkObject) RemovePropertyChangeHandler(handler_id uint) () {
	_cgo_handler_id_ := (C.guint)(handler_id)
	C.atk_object_remove_property_change_handler((*C.AtkObject)(_self_._value_), _cgo_handler_id_)
	return
}

func (_self_ *AtkObject) RemoveRelationship(relationship C.AtkRelationType, target AtkObjectKind) (_go__return__ bool) {
	_cgo_target_ := (*C.AtkObject)(target.GetGObject())
	var _return_ C.gboolean
	_return_ = C.atk_object_remove_relationship((*C.AtkObject)(_self_._value_), relationship, _cgo_target_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *AtkObject) SetDescription(description string) () {
	_cstring_description_ := C.CString(description)
	_cgo_description_ := (*C.gchar)(unsafe.Pointer(_cstring_description_))
	defer C.free(unsafe.Pointer(_cstring_description_))
	C._atk_object_set_description((*C.AtkObject)(_self_._value_), _cgo_description_)
	return
}

func (_self_ *AtkObject) SetName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._atk_object_set_name((*C.AtkObject)(_self_._value_), _cgo_name_)
	return
}

func (_self_ *AtkObject) SetParent(parent AtkObjectKind) () {
	_cgo_parent_ := (*C.AtkObject)(parent.GetGObject())
	C.atk_object_set_parent((*C.AtkObject)(_self_._value_), _cgo_parent_)
	return
}

func (_self_ *AtkObject) SetRole(role C.AtkRole) () {
	C.atk_object_set_role((*C.AtkObject)(_self_._value_), role)
	return
}

func (_self_ *ObjectFactory) CreateAccessible(obj *C.GObject) (_go__return__ AtkObject) {
	var _return_ *C.AtkObject
	_return_ = C.atk_object_factory_create_accessible((*C.AtkObjectFactory)(_self_._value_), obj)
	_go__return__ = ToAtkObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *ObjectFactory) GetAccessibleType() (_return_ C.GType) {
	_return_ = C.atk_object_factory_get_accessible_type((*C.AtkObjectFactory)(_self_._value_))
	return
}

func (_self_ *ObjectFactory) Invalidate() () {
	C.atk_object_factory_invalidate((*C.AtkObjectFactory)(_self_._value_))
	return
}

func PlugNew() (_go__return__ Plug) {
	var _return_ *C.AtkObject
	_return_ = C.atk_plug_new()
	_go__return__ = ToPlug(unsafe.Pointer(_return_))
	return
}

func (_self_ *Plug) GetId() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.atk_plug_get_id((*C.AtkPlug)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func RelationNew(targets AtkObjectKind, n_targets int, relationship C.AtkRelationType) (_go__return__ Relation) {
	_cgo_targets_ := (unsafe.Pointer)(targets.GetGObject())
	var _return_ *C.AtkRelation
	_cgo_n_targets_ := (C.gint)(n_targets)
	_return_ = C._atk_relation_new(_cgo_targets_, _cgo_n_targets_, relationship)
	_go__return__ = ToRelation(unsafe.Pointer(_return_))
	return
}

func (_self_ *Relation) AddTarget(target AtkObjectKind) () {
	_cgo_target_ := (*C.AtkObject)(target.GetGObject())
	C.atk_relation_add_target((*C.AtkRelation)(_self_._value_), _cgo_target_)
	return
}

func (_self_ *Relation) GetRelationType() (_return_ C.AtkRelationType) {
	_return_ = C.atk_relation_get_relation_type((*C.AtkRelation)(_self_._value_))
	return
}

func (_self_ *Relation) GetTarget() (_return_ *C.GPtrArray) {
	_return_ = C.atk_relation_get_target((*C.AtkRelation)(_self_._value_))
	return
}

func (_self_ *Relation) RemoveTarget(target AtkObjectKind) (_go__return__ bool) {
	_cgo_target_ := (*C.AtkObject)(target.GetGObject())
	var _return_ C.gboolean
	_return_ = C.atk_relation_remove_target((*C.AtkRelation)(_self_._value_), _cgo_target_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func RelationSetNew() (_go__return__ RelationSet) {
	var _return_ *C.AtkRelationSet
	_return_ = C.atk_relation_set_new()
	_go__return__ = ToRelationSet(unsafe.Pointer(_return_))
	return
}

func (_self_ *RelationSet) Add(relation RelationKind) () {
	_cgo_relation_ := (*C.AtkRelation)(relation.GetGObject())
	C.atk_relation_set_add((*C.AtkRelationSet)(_self_._value_), _cgo_relation_)
	return
}

func (_self_ *RelationSet) AddRelationByType(relationship C.AtkRelationType, target AtkObjectKind) () {
	_cgo_target_ := (*C.AtkObject)(target.GetGObject())
	C.atk_relation_set_add_relation_by_type((*C.AtkRelationSet)(_self_._value_), relationship, _cgo_target_)
	return
}

func (_self_ *RelationSet) Contains(relationship C.AtkRelationType) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.atk_relation_set_contains((*C.AtkRelationSet)(_self_._value_), relationship)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *RelationSet) ContainsTarget(relationship C.AtkRelationType, targe AtkObjectKind) (_go__return__ bool) {
	_cgo_targe_ := (*C.AtkObject)(targe.GetGObject())
	var _return_ C.gboolean
	_return_ = C.atk_relation_set_contains_target((*C.AtkRelationSet)(_self_._value_), relationship, _cgo_targe_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *RelationSet) GetNRelations() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.atk_relation_set_get_n_relations((*C.AtkRelationSet)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *RelationSet) GetRelation(i int) (_go__return__ Relation) {
	var _return_ *C.AtkRelation
	_cgo_i_ := (C.gint)(i)
	_return_ = C.atk_relation_set_get_relation((*C.AtkRelationSet)(_self_._value_), _cgo_i_)
	_go__return__ = ToRelation(unsafe.Pointer(_return_))
	return
}

func (_self_ *RelationSet) GetRelationByType(relationship C.AtkRelationType) (_go__return__ Relation) {
	var _return_ *C.AtkRelation
	_return_ = C.atk_relation_set_get_relation_by_type((*C.AtkRelationSet)(_self_._value_), relationship)
	_go__return__ = ToRelation(unsafe.Pointer(_return_))
	return
}

func (_self_ *RelationSet) Remove(relation RelationKind) () {
	_cgo_relation_ := (*C.AtkRelation)(relation.GetGObject())
	C.atk_relation_set_remove((*C.AtkRelationSet)(_self_._value_), _cgo_relation_)
	return
}

func SocketNew() (_go__return__ Socket) {
	var _return_ *C.AtkObject
	_return_ = C.atk_socket_new()
	_go__return__ = ToSocket(unsafe.Pointer(_return_))
	return
}

func (_self_ *Socket) Embed(plug_id string) () {
	_cstring_plug_id_ := C.CString(plug_id)
	_cgo_plug_id_ := (*C.gchar)(unsafe.Pointer(_cstring_plug_id_))
	defer C.free(unsafe.Pointer(_cstring_plug_id_))
	C.atk_socket_embed((*C.AtkSocket)(_self_._value_), _cgo_plug_id_)
	return
}

func (_self_ *Socket) IsOccupied() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.atk_socket_is_occupied((*C.AtkSocket)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func StateSetNew() (_go__return__ StateSet) {
	var _return_ *C.AtkStateSet
	_return_ = C.atk_state_set_new()
	_go__return__ = ToStateSet(unsafe.Pointer(_return_))
	return
}

func (_self_ *StateSet) AddState(type_ C.AtkStateType) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.atk_state_set_add_state((*C.AtkStateSet)(_self_._value_), type_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *StateSet) AddStates(types *C.AtkStateType, n_types int) () {
	_cgo_n_types_ := (C.gint)(n_types)
	C.atk_state_set_add_states((*C.AtkStateSet)(_self_._value_), types, _cgo_n_types_)
	return
}

func (_self_ *StateSet) AndSets(compare_set StateSetKind) (_go__return__ StateSet) {
	_cgo_compare_set_ := (*C.AtkStateSet)(compare_set.GetGObject())
	var _return_ *C.AtkStateSet
	_return_ = C.atk_state_set_and_sets((*C.AtkStateSet)(_self_._value_), _cgo_compare_set_)
	_go__return__ = ToStateSet(unsafe.Pointer(_return_))
	return
}

func (_self_ *StateSet) ClearStates() () {
	C.atk_state_set_clear_states((*C.AtkStateSet)(_self_._value_))
	return
}

func (_self_ *StateSet) ContainsState(type_ C.AtkStateType) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.atk_state_set_contains_state((*C.AtkStateSet)(_self_._value_), type_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *StateSet) ContainsStates(types *C.AtkStateType, n_types int) (_go__return__ bool) {
	_cgo_n_types_ := (C.gint)(n_types)
	var _return_ C.gboolean
	_return_ = C.atk_state_set_contains_states((*C.AtkStateSet)(_self_._value_), types, _cgo_n_types_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *StateSet) IsEmpty() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.atk_state_set_is_empty((*C.AtkStateSet)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *StateSet) OrSets(compare_set StateSetKind) (_go__return__ StateSet) {
	_cgo_compare_set_ := (*C.AtkStateSet)(compare_set.GetGObject())
	var _return_ *C.AtkStateSet
	_return_ = C.atk_state_set_or_sets((*C.AtkStateSet)(_self_._value_), _cgo_compare_set_)
	_go__return__ = ToStateSet(unsafe.Pointer(_return_))
	return
}

func (_self_ *StateSet) RemoveState(type_ C.AtkStateType) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.atk_state_set_remove_state((*C.AtkStateSet)(_self_._value_), type_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *StateSet) XorSets(compare_set StateSetKind) (_go__return__ StateSet) {
	_cgo_compare_set_ := (*C.AtkStateSet)(compare_set.GetGObject())
	var _return_ *C.AtkStateSet
	_return_ = C.atk_state_set_xor_sets((*C.AtkStateSet)(_self_._value_), _cgo_compare_set_)
	_go__return__ = ToStateSet(unsafe.Pointer(_return_))
	return
}

func (_self_ *Implementor) RefAccessible() (_go__return__ AtkObject) {
	var _return_ *C.AtkObject
	_return_ = C.atk_implementor_ref_accessible((*C.AtkImplementor)(_self_))
	_go__return__ = ToAtkObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *AtkAction) DoAction(i int) (_go__return__ bool) {
	_cgo_i_ := (C.gint)(i)
	var _return_ C.gboolean
	_return_ = C.atk_action_do_action((*C.AtkAction)(_self_._value_), _cgo_i_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *AtkAction) GetDescription(i int) (_go__return__ string) {
	_cgo_i_ := (C.gint)(i)
	var _return_ *C.gchar
	_return_ = C._atk_action_get_description((*C.AtkAction)(_self_._value_), _cgo_i_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AtkAction) GetKeybinding(i int) (_go__return__ string) {
	_cgo_i_ := (C.gint)(i)
	var _return_ *C.gchar
	_return_ = C._atk_action_get_keybinding((*C.AtkAction)(_self_._value_), _cgo_i_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AtkAction) GetLocalizedName(i int) (_go__return__ string) {
	_cgo_i_ := (C.gint)(i)
	var _return_ *C.gchar
	_return_ = C._atk_action_get_localized_name((*C.AtkAction)(_self_._value_), _cgo_i_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AtkAction) GetNActions() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.atk_action_get_n_actions((*C.AtkAction)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *AtkAction) GetName(i int) (_go__return__ string) {
	_cgo_i_ := (C.gint)(i)
	var _return_ *C.gchar
	_return_ = C._atk_action_get_name((*C.AtkAction)(_self_._value_), _cgo_i_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AtkAction) SetDescription(i int, desc string) (_go__return__ bool) {
	_cgo_i_ := (C.gint)(i)
	_cstring_desc_ := C.CString(desc)
	_cgo_desc_ := (*C.gchar)(unsafe.Pointer(_cstring_desc_))
	defer C.free(unsafe.Pointer(_cstring_desc_))
	var _return_ C.gboolean
	_return_ = C._atk_action_set_description((*C.AtkAction)(_self_._value_), _cgo_i_, _cgo_desc_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Component) AddFocusHandler(handler C.AtkFocusHandler) (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.atk_component_add_focus_handler((*C.AtkComponent)(_self_._value_), handler)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Component) Contains(x int, y int, coord_type C.AtkCoordType) (_go__return__ bool) {
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	var _return_ C.gboolean
	_return_ = C.atk_component_contains((*C.AtkComponent)(_self_._value_), _cgo_x_, _cgo_y_, coord_type)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Component) GetAlpha() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.atk_component_get_alpha((*C.AtkComponent)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Component) GetExtents(x *C.gint, y *C.gint, width *C.gint, height *C.gint, coord_type C.AtkCoordType) () {
	C.atk_component_get_extents((*C.AtkComponent)(_self_._value_), x, y, width, height, coord_type)
	return
}

func (_self_ *Component) GetLayer() (_return_ C.AtkLayer) {
	_return_ = C.atk_component_get_layer((*C.AtkComponent)(_self_._value_))
	return
}

func (_self_ *Component) GetMdiZorder() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.atk_component_get_mdi_zorder((*C.AtkComponent)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Component) GetPosition(x *C.gint, y *C.gint, coord_type C.AtkCoordType) () {
	C.atk_component_get_position((*C.AtkComponent)(_self_._value_), x, y, coord_type)
	return
}

func (_self_ *Component) GetSize(width *C.gint, height *C.gint) () {
	C.atk_component_get_size((*C.AtkComponent)(_self_._value_), width, height)
	return
}

func (_self_ *Component) GrabFocus() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.atk_component_grab_focus((*C.AtkComponent)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Component) RefAccessibleAtPoint(x int, y int, coord_type C.AtkCoordType) (_go__return__ AtkObject) {
	var _return_ *C.AtkObject
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	_return_ = C.atk_component_ref_accessible_at_point((*C.AtkComponent)(_self_._value_), _cgo_x_, _cgo_y_, coord_type)
	_go__return__ = ToAtkObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *Component) RemoveFocusHandler(handler_id uint) () {
	_cgo_handler_id_ := (C.guint)(handler_id)
	C.atk_component_remove_focus_handler((*C.AtkComponent)(_self_._value_), _cgo_handler_id_)
	return
}

func (_self_ *Component) SetExtents(x int, y int, width int, height int, coord_type C.AtkCoordType) (_go__return__ bool) {
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	var _return_ C.gboolean
	_return_ = C.atk_component_set_extents((*C.AtkComponent)(_self_._value_), _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_, coord_type)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Component) SetPosition(x int, y int, coord_type C.AtkCoordType) (_go__return__ bool) {
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	var _return_ C.gboolean
	_return_ = C.atk_component_set_position((*C.AtkComponent)(_self_._value_), _cgo_x_, _cgo_y_, coord_type)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Component) SetSize(width int, height int) (_go__return__ bool) {
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	var _return_ C.gboolean
	_return_ = C.atk_component_set_size((*C.AtkComponent)(_self_._value_), _cgo_width_, _cgo_height_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Document) GetAttributeValue(attribute_name string) (_go__return__ string) {
	_cstring_attribute_name_ := C.CString(attribute_name)
	_cgo_attribute_name_ := (*C.gchar)(unsafe.Pointer(_cstring_attribute_name_))
	defer C.free(unsafe.Pointer(_cstring_attribute_name_))
	var _return_ *C.gchar
	_return_ = C._atk_document_get_attribute_value((*C.AtkDocument)(_self_._value_), _cgo_attribute_name_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Document) GetAttributes() (_return_ *C.AtkAttributeSet) {
	_return_ = C.atk_document_get_attributes((*C.AtkDocument)(_self_._value_))
	return
}

func (_self_ *Document) GetDocument() (_return_ C.gpointer) {
	_return_ = C.atk_document_get_document((*C.AtkDocument)(_self_._value_))
	return
}

func (_self_ *Document) GetDocumentType() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_document_get_document_type((*C.AtkDocument)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Document) GetLocale() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_document_get_locale((*C.AtkDocument)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Document) SetAttributeValue(attribute_name string, attribute_value string) (_go__return__ bool) {
	_cstring_attribute_name_ := C.CString(attribute_name)
	_cgo_attribute_name_ := (*C.gchar)(unsafe.Pointer(_cstring_attribute_name_))
	defer C.free(unsafe.Pointer(_cstring_attribute_name_))
	_cstring_attribute_value_ := C.CString(attribute_value)
	_cgo_attribute_value_ := (*C.gchar)(unsafe.Pointer(_cstring_attribute_value_))
	defer C.free(unsafe.Pointer(_cstring_attribute_value_))
	var _return_ C.gboolean
	_return_ = C._atk_document_set_attribute_value((*C.AtkDocument)(_self_._value_), _cgo_attribute_name_, _cgo_attribute_value_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *EditableText) CopyText(start_pos int, end_pos int) () {
	_cgo_start_pos_ := (C.gint)(start_pos)
	_cgo_end_pos_ := (C.gint)(end_pos)
	C.atk_editable_text_copy_text((*C.AtkEditableText)(_self_._value_), _cgo_start_pos_, _cgo_end_pos_)
	return
}

func (_self_ *EditableText) CutText(start_pos int, end_pos int) () {
	_cgo_start_pos_ := (C.gint)(start_pos)
	_cgo_end_pos_ := (C.gint)(end_pos)
	C.atk_editable_text_cut_text((*C.AtkEditableText)(_self_._value_), _cgo_start_pos_, _cgo_end_pos_)
	return
}

func (_self_ *EditableText) DeleteText(start_pos int, end_pos int) () {
	_cgo_start_pos_ := (C.gint)(start_pos)
	_cgo_end_pos_ := (C.gint)(end_pos)
	C.atk_editable_text_delete_text((*C.AtkEditableText)(_self_._value_), _cgo_start_pos_, _cgo_end_pos_)
	return
}

func (_self_ *EditableText) InsertText(string_ string, length int, position *C.gint) () {
	_cgo_length_ := (C.gint)(length)
	_cstring_string__ := C.CString(string_)
	_cgo_string__ := (*C.gchar)(unsafe.Pointer(_cstring_string__))
	defer C.free(unsafe.Pointer(_cstring_string__))
	C._atk_editable_text_insert_text((*C.AtkEditableText)(_self_._value_), _cgo_string__, _cgo_length_, position)
	return
}

func (_self_ *EditableText) PasteText(position int) () {
	_cgo_position_ := (C.gint)(position)
	C.atk_editable_text_paste_text((*C.AtkEditableText)(_self_._value_), _cgo_position_)
	return
}

func (_self_ *EditableText) SetRunAttributes(attrib_set *C.AtkAttributeSet, start_offset int, end_offset int) (_go__return__ bool) {
	_cgo_start_offset_ := (C.gint)(start_offset)
	_cgo_end_offset_ := (C.gint)(end_offset)
	var _return_ C.gboolean
	_return_ = C.atk_editable_text_set_run_attributes((*C.AtkEditableText)(_self_._value_), attrib_set, _cgo_start_offset_, _cgo_end_offset_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *EditableText) SetTextContents(string_ string) () {
	_cstring_string__ := C.CString(string_)
	_cgo_string__ := (*C.gchar)(unsafe.Pointer(_cstring_string__))
	defer C.free(unsafe.Pointer(_cstring_string__))
	C._atk_editable_text_set_text_contents((*C.AtkEditableText)(_self_._value_), _cgo_string__)
	return
}

func (_self_ *HyperlinkImpl) GetHyperlink() (_go__return__ Hyperlink) {
	var _return_ *C.AtkHyperlink
	_return_ = C.atk_hyperlink_impl_get_hyperlink((*C.AtkHyperlinkImpl)(_self_._value_))
	_go__return__ = ToHyperlink(unsafe.Pointer(_return_))
	return
}

func (_self_ *Hypertext) GetLink(link_index int) (_go__return__ Hyperlink) {
	var _return_ *C.AtkHyperlink
	_cgo_link_index_ := (C.gint)(link_index)
	_return_ = C.atk_hypertext_get_link((*C.AtkHypertext)(_self_._value_), _cgo_link_index_)
	_go__return__ = ToHyperlink(unsafe.Pointer(_return_))
	return
}

func (_self_ *Hypertext) GetLinkIndex(char_index int) (_go__return__ int) {
	_cgo_char_index_ := (C.gint)(char_index)
	var _return_ C.gint
	_return_ = C.atk_hypertext_get_link_index((*C.AtkHypertext)(_self_._value_), _cgo_char_index_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Hypertext) GetNLinks() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.atk_hypertext_get_n_links((*C.AtkHypertext)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *AtkImage) GetImageDescription() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_image_get_image_description((*C.AtkImage)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AtkImage) GetImageLocale() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_image_get_image_locale((*C.AtkImage)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AtkImage) GetImagePosition(x *C.gint, y *C.gint, coord_type C.AtkCoordType) () {
	C.atk_image_get_image_position((*C.AtkImage)(_self_._value_), x, y, coord_type)
	return
}

func (_self_ *AtkImage) GetImageSize(width *C.gint, height *C.gint) () {
	C.atk_image_get_image_size((*C.AtkImage)(_self_._value_), width, height)
	return
}

func (_self_ *AtkImage) SetImageDescription(description string) (_go__return__ bool) {
	_cstring_description_ := C.CString(description)
	_cgo_description_ := (*C.gchar)(unsafe.Pointer(_cstring_description_))
	defer C.free(unsafe.Pointer(_cstring_description_))
	var _return_ C.gboolean
	_return_ = C._atk_image_set_image_description((*C.AtkImage)(_self_._value_), _cgo_description_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Selection) AddSelection(i int) (_go__return__ bool) {
	_cgo_i_ := (C.gint)(i)
	var _return_ C.gboolean
	_return_ = C.atk_selection_add_selection((*C.AtkSelection)(_self_._value_), _cgo_i_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Selection) ClearSelection() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.atk_selection_clear_selection((*C.AtkSelection)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Selection) GetSelectionCount() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.atk_selection_get_selection_count((*C.AtkSelection)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Selection) IsChildSelected(i int) (_go__return__ bool) {
	_cgo_i_ := (C.gint)(i)
	var _return_ C.gboolean
	_return_ = C.atk_selection_is_child_selected((*C.AtkSelection)(_self_._value_), _cgo_i_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Selection) RefSelection(i int) (_go__return__ AtkObject) {
	var _return_ *C.AtkObject
	_cgo_i_ := (C.gint)(i)
	_return_ = C.atk_selection_ref_selection((*C.AtkSelection)(_self_._value_), _cgo_i_)
	_go__return__ = ToAtkObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *Selection) RemoveSelection(i int) (_go__return__ bool) {
	_cgo_i_ := (C.gint)(i)
	var _return_ C.gboolean
	_return_ = C.atk_selection_remove_selection((*C.AtkSelection)(_self_._value_), _cgo_i_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Selection) SelectAllSelection() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.atk_selection_select_all_selection((*C.AtkSelection)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *StreamableContent) GetMimeType(i int) (_go__return__ string) {
	_cgo_i_ := (C.gint)(i)
	var _return_ *C.gchar
	_return_ = C._atk_streamable_content_get_mime_type((*C.AtkStreamableContent)(_self_._value_), _cgo_i_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *StreamableContent) GetNMimeTypes() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.atk_streamable_content_get_n_mime_types((*C.AtkStreamableContent)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *StreamableContent) GetStream(mime_type string) (_return_ *C.GIOChannel) {
	_cstring_mime_type_ := C.CString(mime_type)
	_cgo_mime_type_ := (*C.gchar)(unsafe.Pointer(_cstring_mime_type_))
	defer C.free(unsafe.Pointer(_cstring_mime_type_))
	_return_ = C._atk_streamable_content_get_stream((*C.AtkStreamableContent)(_self_._value_), _cgo_mime_type_)
	return
}

func (_self_ *StreamableContent) GetUri(mime_type string) (_go__return__ string) {
	_cstring_mime_type_ := C.CString(mime_type)
	_cgo_mime_type_ := (*C.gchar)(unsafe.Pointer(_cstring_mime_type_))
	defer C.free(unsafe.Pointer(_cstring_mime_type_))
	var _return_ *C.gchar
	_return_ = C._atk_streamable_content_get_uri((*C.AtkStreamableContent)(_self_._value_), _cgo_mime_type_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Table) AddColumnSelection(column int) (_go__return__ bool) {
	_cgo_column_ := (C.gint)(column)
	var _return_ C.gboolean
	_return_ = C.atk_table_add_column_selection((*C.AtkTable)(_self_._value_), _cgo_column_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Table) AddRowSelection(row int) (_go__return__ bool) {
	_cgo_row_ := (C.gint)(row)
	var _return_ C.gboolean
	_return_ = C.atk_table_add_row_selection((*C.AtkTable)(_self_._value_), _cgo_row_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Table) GetCaption() (_go__return__ AtkObject) {
	var _return_ *C.AtkObject
	_return_ = C.atk_table_get_caption((*C.AtkTable)(_self_._value_))
	_go__return__ = ToAtkObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *Table) GetColumnAtIndex(index_ int) (_go__return__ int) {
	_cgo_index__ := (C.gint)(index_)
	var _return_ C.gint
	_return_ = C.atk_table_get_column_at_index((*C.AtkTable)(_self_._value_), _cgo_index__)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Table) GetColumnDescription(column int) (_go__return__ string) {
	_cgo_column_ := (C.gint)(column)
	var _return_ *C.gchar
	_return_ = C._atk_table_get_column_description((*C.AtkTable)(_self_._value_), _cgo_column_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Table) GetColumnExtentAt(row int, column int) (_go__return__ int) {
	_cgo_row_ := (C.gint)(row)
	_cgo_column_ := (C.gint)(column)
	var _return_ C.gint
	_return_ = C.atk_table_get_column_extent_at((*C.AtkTable)(_self_._value_), _cgo_row_, _cgo_column_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Table) GetColumnHeader(column int) (_go__return__ AtkObject) {
	var _return_ *C.AtkObject
	_cgo_column_ := (C.gint)(column)
	_return_ = C.atk_table_get_column_header((*C.AtkTable)(_self_._value_), _cgo_column_)
	_go__return__ = ToAtkObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *Table) GetIndexAt(row int, column int) (_go__return__ int) {
	_cgo_row_ := (C.gint)(row)
	_cgo_column_ := (C.gint)(column)
	var _return_ C.gint
	_return_ = C.atk_table_get_index_at((*C.AtkTable)(_self_._value_), _cgo_row_, _cgo_column_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Table) GetNColumns() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.atk_table_get_n_columns((*C.AtkTable)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Table) GetNRows() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.atk_table_get_n_rows((*C.AtkTable)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Table) GetRowAtIndex(index_ int) (_go__return__ int) {
	_cgo_index__ := (C.gint)(index_)
	var _return_ C.gint
	_return_ = C.atk_table_get_row_at_index((*C.AtkTable)(_self_._value_), _cgo_index__)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Table) GetRowDescription(row int) (_go__return__ string) {
	_cgo_row_ := (C.gint)(row)
	var _return_ *C.gchar
	_return_ = C._atk_table_get_row_description((*C.AtkTable)(_self_._value_), _cgo_row_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Table) GetRowExtentAt(row int, column int) (_go__return__ int) {
	_cgo_row_ := (C.gint)(row)
	_cgo_column_ := (C.gint)(column)
	var _return_ C.gint
	_return_ = C.atk_table_get_row_extent_at((*C.AtkTable)(_self_._value_), _cgo_row_, _cgo_column_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Table) GetRowHeader(row int) (_go__return__ AtkObject) {
	var _return_ *C.AtkObject
	_cgo_row_ := (C.gint)(row)
	_return_ = C.atk_table_get_row_header((*C.AtkTable)(_self_._value_), _cgo_row_)
	_go__return__ = ToAtkObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *Table) GetSelectedColumns(selected unsafe.Pointer) (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._atk_table_get_selected_columns((*C.AtkTable)(_self_._value_), selected)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Table) GetSelectedRows(selected unsafe.Pointer) (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._atk_table_get_selected_rows((*C.AtkTable)(_self_._value_), selected)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Table) GetSummary() (_go__return__ AtkObject) {
	var _return_ *C.AtkObject
	_return_ = C.atk_table_get_summary((*C.AtkTable)(_self_._value_))
	_go__return__ = ToAtkObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *Table) IsColumnSelected(column int) (_go__return__ bool) {
	_cgo_column_ := (C.gint)(column)
	var _return_ C.gboolean
	_return_ = C.atk_table_is_column_selected((*C.AtkTable)(_self_._value_), _cgo_column_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Table) IsRowSelected(row int) (_go__return__ bool) {
	_cgo_row_ := (C.gint)(row)
	var _return_ C.gboolean
	_return_ = C.atk_table_is_row_selected((*C.AtkTable)(_self_._value_), _cgo_row_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Table) IsSelected(row int, column int) (_go__return__ bool) {
	_cgo_row_ := (C.gint)(row)
	_cgo_column_ := (C.gint)(column)
	var _return_ C.gboolean
	_return_ = C.atk_table_is_selected((*C.AtkTable)(_self_._value_), _cgo_row_, _cgo_column_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Table) RefAt(row int, column int) (_go__return__ AtkObject) {
	var _return_ *C.AtkObject
	_cgo_row_ := (C.gint)(row)
	_cgo_column_ := (C.gint)(column)
	_return_ = C.atk_table_ref_at((*C.AtkTable)(_self_._value_), _cgo_row_, _cgo_column_)
	_go__return__ = ToAtkObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *Table) RemoveColumnSelection(column int) (_go__return__ bool) {
	_cgo_column_ := (C.gint)(column)
	var _return_ C.gboolean
	_return_ = C.atk_table_remove_column_selection((*C.AtkTable)(_self_._value_), _cgo_column_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Table) RemoveRowSelection(row int) (_go__return__ bool) {
	_cgo_row_ := (C.gint)(row)
	var _return_ C.gboolean
	_return_ = C.atk_table_remove_row_selection((*C.AtkTable)(_self_._value_), _cgo_row_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Table) SetCaption(caption AtkObjectKind) () {
	_cgo_caption_ := (*C.AtkObject)(caption.GetGObject())
	C.atk_table_set_caption((*C.AtkTable)(_self_._value_), _cgo_caption_)
	return
}

func (_self_ *Table) SetColumnDescription(column int, description string) () {
	_cgo_column_ := (C.gint)(column)
	_cstring_description_ := C.CString(description)
	_cgo_description_ := (*C.gchar)(unsafe.Pointer(_cstring_description_))
	defer C.free(unsafe.Pointer(_cstring_description_))
	C._atk_table_set_column_description((*C.AtkTable)(_self_._value_), _cgo_column_, _cgo_description_)
	return
}

func (_self_ *Table) SetColumnHeader(column int, header AtkObjectKind) () {
	_cgo_header_ := (*C.AtkObject)(header.GetGObject())
	_cgo_column_ := (C.gint)(column)
	C.atk_table_set_column_header((*C.AtkTable)(_self_._value_), _cgo_column_, _cgo_header_)
	return
}

func (_self_ *Table) SetRowDescription(row int, description string) () {
	_cgo_row_ := (C.gint)(row)
	_cstring_description_ := C.CString(description)
	_cgo_description_ := (*C.gchar)(unsafe.Pointer(_cstring_description_))
	defer C.free(unsafe.Pointer(_cstring_description_))
	C._atk_table_set_row_description((*C.AtkTable)(_self_._value_), _cgo_row_, _cgo_description_)
	return
}

func (_self_ *Table) SetRowHeader(row int, header AtkObjectKind) () {
	_cgo_header_ := (*C.AtkObject)(header.GetGObject())
	_cgo_row_ := (C.gint)(row)
	C.atk_table_set_row_header((*C.AtkTable)(_self_._value_), _cgo_row_, _cgo_header_)
	return
}

func (_self_ *Table) SetSummary(accessible AtkObjectKind) () {
	_cgo_accessible_ := (*C.AtkObject)(accessible.GetGObject())
	C.atk_table_set_summary((*C.AtkTable)(_self_._value_), _cgo_accessible_)
	return
}

func (_self_ *AtkText) AddSelection(start_offset int, end_offset int) (_go__return__ bool) {
	_cgo_start_offset_ := (C.gint)(start_offset)
	_cgo_end_offset_ := (C.gint)(end_offset)
	var _return_ C.gboolean
	_return_ = C.atk_text_add_selection((*C.AtkText)(_self_._value_), _cgo_start_offset_, _cgo_end_offset_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *AtkText) GetBoundedRanges(rect *TextRectangle, coord_type C.AtkCoordType, x_clip_type C.AtkTextClipType, y_clip_type C.AtkTextClipType) (_return_ unsafe.Pointer) {
	_cgo_rect_ := (*C.AtkTextRectangle)(unsafe.Pointer(rect))
	_return_ = C._atk_text_get_bounded_ranges((*C.AtkText)(_self_._value_), _cgo_rect_, coord_type, x_clip_type, y_clip_type)
	return
}

func (_self_ *AtkText) GetCaretOffset() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.atk_text_get_caret_offset((*C.AtkText)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *AtkText) GetCharacterAtOffset(offset int) (_return_ C.gunichar) {
	_cgo_offset_ := (C.gint)(offset)
	_return_ = C.atk_text_get_character_at_offset((*C.AtkText)(_self_._value_), _cgo_offset_)
	return
}

func (_self_ *AtkText) GetCharacterCount() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.atk_text_get_character_count((*C.AtkText)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *AtkText) GetCharacterExtents(offset int, x *C.gint, y *C.gint, width *C.gint, height *C.gint, coords C.AtkCoordType) () {
	_cgo_offset_ := (C.gint)(offset)
	C.atk_text_get_character_extents((*C.AtkText)(_self_._value_), _cgo_offset_, x, y, width, height, coords)
	return
}

func (_self_ *AtkText) GetDefaultAttributes() (_return_ *C.AtkAttributeSet) {
	_return_ = C.atk_text_get_default_attributes((*C.AtkText)(_self_._value_))
	return
}

func (_self_ *AtkText) GetNSelections() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.atk_text_get_n_selections((*C.AtkText)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *AtkText) GetOffsetAtPoint(x int, y int, coords C.AtkCoordType) (_go__return__ int) {
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	var _return_ C.gint
	_return_ = C.atk_text_get_offset_at_point((*C.AtkText)(_self_._value_), _cgo_x_, _cgo_y_, coords)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *AtkText) GetRangeExtents(start_offset int, end_offset int, coord_type C.AtkCoordType, rect *TextRectangle) () {
	_cgo_rect_ := (*C.AtkTextRectangle)(unsafe.Pointer(rect))
	_cgo_start_offset_ := (C.gint)(start_offset)
	_cgo_end_offset_ := (C.gint)(end_offset)
	C.atk_text_get_range_extents((*C.AtkText)(_self_._value_), _cgo_start_offset_, _cgo_end_offset_, coord_type, _cgo_rect_)
	return
}

func (_self_ *AtkText) GetRunAttributes(offset int, start_offset *C.gint, end_offset *C.gint) (_return_ *C.AtkAttributeSet) {
	_cgo_offset_ := (C.gint)(offset)
	_return_ = C.atk_text_get_run_attributes((*C.AtkText)(_self_._value_), _cgo_offset_, start_offset, end_offset)
	return
}

func (_self_ *AtkText) GetSelection(selection_num int, start_offset *C.gint, end_offset *C.gint) (_go__return__ string) {
	_cgo_selection_num_ := (C.gint)(selection_num)
	var _return_ *C.gchar
	_return_ = C.atk_text_get_selection((*C.AtkText)(_self_._value_), _cgo_selection_num_, start_offset, end_offset)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AtkText) GetText(start_offset int, end_offset int) (_go__return__ string) {
	_cgo_start_offset_ := (C.gint)(start_offset)
	_cgo_end_offset_ := (C.gint)(end_offset)
	var _return_ *C.gchar
	_return_ = C.atk_text_get_text((*C.AtkText)(_self_._value_), _cgo_start_offset_, _cgo_end_offset_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AtkText) GetTextAfterOffset(offset int, boundary_type C.AtkTextBoundary, start_offset *C.gint, end_offset *C.gint) (_go__return__ string) {
	_cgo_offset_ := (C.gint)(offset)
	var _return_ *C.gchar
	_return_ = C.atk_text_get_text_after_offset((*C.AtkText)(_self_._value_), _cgo_offset_, boundary_type, start_offset, end_offset)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AtkText) GetTextAtOffset(offset int, boundary_type C.AtkTextBoundary, start_offset *C.gint, end_offset *C.gint) (_go__return__ string) {
	_cgo_offset_ := (C.gint)(offset)
	var _return_ *C.gchar
	_return_ = C.atk_text_get_text_at_offset((*C.AtkText)(_self_._value_), _cgo_offset_, boundary_type, start_offset, end_offset)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AtkText) GetTextBeforeOffset(offset int, boundary_type C.AtkTextBoundary, start_offset *C.gint, end_offset *C.gint) (_go__return__ string) {
	_cgo_offset_ := (C.gint)(offset)
	var _return_ *C.gchar
	_return_ = C.atk_text_get_text_before_offset((*C.AtkText)(_self_._value_), _cgo_offset_, boundary_type, start_offset, end_offset)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AtkText) RemoveSelection(selection_num int) (_go__return__ bool) {
	_cgo_selection_num_ := (C.gint)(selection_num)
	var _return_ C.gboolean
	_return_ = C.atk_text_remove_selection((*C.AtkText)(_self_._value_), _cgo_selection_num_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *AtkText) SetCaretOffset(offset int) (_go__return__ bool) {
	_cgo_offset_ := (C.gint)(offset)
	var _return_ C.gboolean
	_return_ = C.atk_text_set_caret_offset((*C.AtkText)(_self_._value_), _cgo_offset_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *AtkText) SetSelection(selection_num int, start_offset int, end_offset int) (_go__return__ bool) {
	_cgo_selection_num_ := (C.gint)(selection_num)
	_cgo_start_offset_ := (C.gint)(start_offset)
	_cgo_end_offset_ := (C.gint)(end_offset)
	var _return_ C.gboolean
	_return_ = C.atk_text_set_selection((*C.AtkText)(_self_._value_), _cgo_selection_num_, _cgo_start_offset_, _cgo_end_offset_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *AtkValue) GetCurrentValue(value *C.GValue) () {
	C.atk_value_get_current_value((*C.AtkValue)(_self_._value_), value)
	return
}

func (_self_ *AtkValue) GetMaximumValue(value *C.GValue) () {
	C.atk_value_get_maximum_value((*C.AtkValue)(_self_._value_), value)
	return
}

func (_self_ *AtkValue) GetMinimumIncrement(value *C.GValue) () {
	C.atk_value_get_minimum_increment((*C.AtkValue)(_self_._value_), value)
	return
}

func (_self_ *AtkValue) GetMinimumValue(value *C.GValue) () {
	C.atk_value_get_minimum_value((*C.AtkValue)(_self_._value_), value)
	return
}

func (_self_ *AtkValue) SetCurrentValue(value *C.GValue) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._atk_value_set_current_value((*C.AtkValue)(_self_._value_), value)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

const ATK_STATE_EXPANDED = C.ATK_STATE_EXPANDED
const ATK_STATE_VERTICAL = C.ATK_STATE_VERTICAL
const ATK_STATE_SELECTABLE_TEXT = C.ATK_STATE_SELECTABLE_TEXT
const ATK_RELATION_PARENT_WINDOW_OF = C.ATK_RELATION_PARENT_WINDOW_OF
const ATK_ROLE_SECTION = C.ATK_ROLE_SECTION
const ATK_ROLE_TABLE_CELL = C.ATK_ROLE_TABLE_CELL
const ATK_ROLE_FILLER = C.ATK_ROLE_FILLER
const ATK_TEXT_ATTR_JUSTIFICATION = C.ATK_TEXT_ATTR_JUSTIFICATION
const ATK_ROLE_TOGGLE_BUTTON = C.ATK_ROLE_TOGGLE_BUTTON
const ATK_ROLE_PAGE = C.ATK_ROLE_PAGE
const ATK_ROLE_PROGRESS_BAR = C.ATK_ROLE_PROGRESS_BAR
const ATK_ROLE_DIALOG = C.ATK_ROLE_DIALOG
const ATK_STATE_FOCUSABLE = C.ATK_STATE_FOCUSABLE
const ATK_ROLE_GLASS_PANE = C.ATK_ROLE_GLASS_PANE
const ATK_STATE_BUSY = C.ATK_STATE_BUSY
const ATK_TEXT_ATTR_WRAP_MODE = C.ATK_TEXT_ATTR_WRAP_MODE
const ATK_ROLE_DIAL = C.ATK_ROLE_DIAL
const ATK_LAYER_INVALID = C.ATK_LAYER_INVALID
const ATK_ROLE_DOCUMENT_SPREADSHEET = C.ATK_ROLE_DOCUMENT_SPREADSHEET
const ATK_RELATION_DESCRIBED_BY = C.ATK_RELATION_DESCRIBED_BY
const ATK_ROLE_TOOL_BAR = C.ATK_ROLE_TOOL_BAR
const ATK_ROLE_ALERT = C.ATK_ROLE_ALERT
const ATK_ROLE_COMMENT = C.ATK_ROLE_COMMENT
const ATK_STATE_DEFUNCT = C.ATK_STATE_DEFUNCT
const ATK_TEXT_CLIP_MAX = C.ATK_TEXT_CLIP_MAX
const ATK_ROLE_PAGE_TAB = C.ATK_ROLE_PAGE_TAB
const ATK_RELATION_FLOWS_FROM = C.ATK_RELATION_FLOWS_FROM
const ATK_STATE_FOCUSED = C.ATK_STATE_FOCUSED
const ATK_ROLE_CHART = C.ATK_ROLE_CHART
const ATK_ROLE_ROW_HEADER = C.ATK_ROLE_ROW_HEADER
const ATK_TEXT_ATTR_DIRECTION = C.ATK_TEXT_ATTR_DIRECTION
const ATK_LAYER_MDI = C.ATK_LAYER_MDI
const ATK_TEXT_ATTR_STRETCH = C.ATK_TEXT_ATTR_STRETCH
const ATK_STATE_MULTI_LINE = C.ATK_STATE_MULTI_LINE
const ATK_TEXT_CLIP_BOTH = C.ATK_TEXT_CLIP_BOTH
const ATK_TEXT_ATTR_SCALE = C.ATK_TEXT_ATTR_SCALE
const ATK_STATE_ACTIVE = C.ATK_STATE_ACTIVE
const ATK_STATE_OPAQUE = C.ATK_STATE_OPAQUE
const ATK_TEXT_ATTR_RISE = C.ATK_TEXT_ATTR_RISE
const ATK_ROLE_CALENDAR = C.ATK_ROLE_CALENDAR
const ATK_STATE_TRUNCATED = C.ATK_STATE_TRUNCATED
const ATK_ROLE_COMBO_BOX = C.ATK_ROLE_COMBO_BOX
const ATK_ROLE_SCROLL_BAR = C.ATK_ROLE_SCROLL_BAR
const ATK_ROLE_LAST_DEFINED = C.ATK_ROLE_LAST_DEFINED
const ATK_ROLE_DOCUMENT_TEXT = C.ATK_ROLE_DOCUMENT_TEXT
const ATK_STATE_MULTISELECTABLE = C.ATK_STATE_MULTISELECTABLE
const ATK_ROLE_TOOL_TIP = C.ATK_ROLE_TOOL_TIP
const ATK_TEXT_ATTR_STYLE = C.ATK_TEXT_ATTR_STYLE
const ATK_TEXT_ATTR_BG_COLOR = C.ATK_TEXT_ATTR_BG_COLOR
const ATK_ROLE_SPIN_BUTTON = C.ATK_ROLE_SPIN_BUTTON
const ATK_ROLE_MENU = C.ATK_ROLE_MENU
const ATK_ROLE_FRAME = C.ATK_ROLE_FRAME
const ATK_TEXT_ATTR_LEFT_MARGIN = C.ATK_TEXT_ATTR_LEFT_MARGIN
const ATK_ROLE_FOOTER = C.ATK_ROLE_FOOTER
const ATK_LAYER_BACKGROUND = C.ATK_LAYER_BACKGROUND
const ATK_ROLE_FONT_CHOOSER = C.ATK_ROLE_FONT_CHOOSER
const ATK_ROLE_TERMINAL = C.ATK_ROLE_TERMINAL
const ATK_TEXT_ATTR_BG_FULL_HEIGHT = C.ATK_TEXT_ATTR_BG_FULL_HEIGHT
const ATK_LAYER_OVERLAY = C.ATK_LAYER_OVERLAY
const ATK_ROLE_LINK = C.ATK_ROLE_LINK
const ATK_ROLE_DOCUMENT_FRAME = C.ATK_ROLE_DOCUMENT_FRAME
const ATK_ROLE_HTML_CONTAINER = C.ATK_ROLE_HTML_CONTAINER
const ATK_ROLE_FORM = C.ATK_ROLE_FORM
const ATK_ROLE_TEXT = C.ATK_ROLE_TEXT
const ATK_STATE_SUPPORTS_AUTOCOMPLETION = C.ATK_STATE_SUPPORTS_AUTOCOMPLETION
const ATK_RELATION_NODE_CHILD_OF = C.ATK_RELATION_NODE_CHILD_OF
const ATK_ROLE_CAPTION = C.ATK_ROLE_CAPTION
const ATK_ROLE_REDUNDANT_OBJECT = C.ATK_ROLE_REDUNDANT_OBJECT
const ATK_TEXT_ATTR_WEIGHT = C.ATK_TEXT_ATTR_WEIGHT
const ATK_ROLE_IMAGE_MAP = C.ATK_ROLE_IMAGE_MAP
const ATK_ROLE_CANVAS = C.ATK_ROLE_CANVAS
const ATK_ROLE_TABLE_COLUMN_HEADER = C.ATK_ROLE_TABLE_COLUMN_HEADER
const ATK_RELATION_EMBEDS = C.ATK_RELATION_EMBEDS
const ATK_TEXT_ATTR_FG_STIPPLE = C.ATK_TEXT_ATTR_FG_STIPPLE
const ATK_TEXT_ATTR_LAST_DEFINED = C.ATK_TEXT_ATTR_LAST_DEFINED
const ATK_ROLE_ARROW = C.ATK_ROLE_ARROW
const ATK_ROLE_INTERNAL_FRAME = C.ATK_ROLE_INTERNAL_FRAME
const ATK_ROLE_SEPARATOR = C.ATK_ROLE_SEPARATOR
const ATK_TEXT_ATTR_RIGHT_MARGIN = C.ATK_TEXT_ATTR_RIGHT_MARGIN
const ATK_ROLE_TREE = C.ATK_ROLE_TREE
const ATK_XY_SCREEN = C.ATK_XY_SCREEN
const ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP = C.ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP
const ATK_ROLE_ENTRY = C.ATK_ROLE_ENTRY
const ATK_ROLE_PASSWORD_TEXT = C.ATK_ROLE_PASSWORD_TEXT
const ATK_STATE_TRANSIENT = C.ATK_STATE_TRANSIENT
const ATK_RELATION_MEMBER_OF = C.ATK_RELATION_MEMBER_OF
const ATK_STATE_INVALID = C.ATK_STATE_INVALID
const ATK_ROLE_RADIO_MENU_ITEM = C.ATK_ROLE_RADIO_MENU_ITEM
const ATK_TEXT_ATTR_PIXELS_BELOW_LINES = C.ATK_TEXT_ATTR_PIXELS_BELOW_LINES
const ATK_LAYER_CANVAS = C.ATK_LAYER_CANVAS
const ATK_ROLE_DOCUMENT_WEB = C.ATK_ROLE_DOCUMENT_WEB
const ATK_ROLE_PAGE_TAB_LIST = C.ATK_ROLE_PAGE_TAB_LIST
const ATK_LAYER_WINDOW = C.ATK_LAYER_WINDOW
const ATK_STATE_MANAGES_DESCENDANTS = C.ATK_STATE_MANAGES_DESCENDANTS
const ATK_ROLE_EMBEDDED = C.ATK_ROLE_EMBEDDED
const ATK_ROLE_SCROLL_PANE = C.ATK_ROLE_SCROLL_PANE
const ATK_ROLE_EDITBAR = C.ATK_ROLE_EDITBAR
const ATK_ROLE_RADIO_BUTTON = C.ATK_ROLE_RADIO_BUTTON
const ATK_ROLE_APPLICATION = C.ATK_ROLE_APPLICATION
const ATK_STATE_CHECKED = C.ATK_STATE_CHECKED
const ATK_RELATION_CONTROLLED_BY = C.ATK_RELATION_CONTROLLED_BY
const ATK_ROLE_DESKTOP_FRAME = C.ATK_ROLE_DESKTOP_FRAME
const ATK_ROLE_MENU_ITEM = C.ATK_ROLE_MENU_ITEM
const ATK_ROLE_CHECK_MENU_ITEM = C.ATK_ROLE_CHECK_MENU_ITEM
const ATK_ROLE_AUTOCOMPLETE = C.ATK_ROLE_AUTOCOMPLETE
const ATK_RELATION_POPUP_FOR = C.ATK_RELATION_POPUP_FOR
const ATK_STATE_ENABLED = C.ATK_STATE_ENABLED
const ATK_ROLE_TREE_ITEM = C.ATK_ROLE_TREE_ITEM
const ATK_STATE_LAST_DEFINED = C.ATK_STATE_LAST_DEFINED
const ATK_STATE_REQUIRED = C.ATK_STATE_REQUIRED
const ATK_ROLE_LIST_BOX = C.ATK_ROLE_LIST_BOX
const ATK_ROLE_SLIDER = C.ATK_ROLE_SLIDER
const ATK_TEXT_ATTR_VARIANT = C.ATK_TEXT_ATTR_VARIANT
const ATK_ROLE_RULER = C.ATK_ROLE_RULER
const ATK_STATE_VISIBLE = C.ATK_STATE_VISIBLE
const ATK_ROLE_TABLE_ROW = C.ATK_ROLE_TABLE_ROW
const ATK_KEY_EVENT_RELEASE = C.ATK_KEY_EVENT_RELEASE
const ATK_RELATION_EMBEDDED_BY = C.ATK_RELATION_EMBEDDED_BY
const ATK_STATE_INDETERMINATE = C.ATK_STATE_INDETERMINATE
const ATK_ROLE_PARAGRAPH = C.ATK_ROLE_PARAGRAPH
const ATK_RELATION_NODE_PARENT_OF = C.ATK_RELATION_NODE_PARENT_OF
const ATK_RELATION_LAST_DEFINED = C.ATK_RELATION_LAST_DEFINED
const ATK_STATE_RESIZABLE = C.ATK_STATE_RESIZABLE
const ATK_RELATION_FLOWS_TO = C.ATK_RELATION_FLOWS_TO
const ATK_ROLE_GROUPING = C.ATK_ROLE_GROUPING
const ATK_ROLE_LAYERED_PANE = C.ATK_ROLE_LAYERED_PANE
const ATK_STATE_VISITED = C.ATK_STATE_VISITED
const ATK_ROLE_LIST_ITEM = C.ATK_ROLE_LIST_ITEM
const ATK_RELATION_SUBWINDOW_OF = C.ATK_RELATION_SUBWINDOW_OF
const ATK_ROLE_DATE_EDITOR = C.ATK_ROLE_DATE_EDITOR
const ATK_STATE_HORIZONTAL = C.ATK_STATE_HORIZONTAL
const ATK_STATE_EDITABLE = C.ATK_STATE_EDITABLE
const ATK_XY_WINDOW = C.ATK_XY_WINDOW
const ATK_TEXT_CLIP_NONE = C.ATK_TEXT_CLIP_NONE
const ATK_TEXT_ATTR_PIXELS_ABOVE_LINES = C.ATK_TEXT_ATTR_PIXELS_ABOVE_LINES
const ATK_ROLE_FILE_CHOOSER = C.ATK_ROLE_FILE_CHOOSER
const ATK_STATE_SENSITIVE = C.ATK_STATE_SENSITIVE
const ATK_ROLE_COLOR_CHOOSER = C.ATK_ROLE_COLOR_CHOOSER
const ATK_LAYER_POPUP = C.ATK_LAYER_POPUP
const ATK_STATE_MODAL = C.ATK_STATE_MODAL
const ATK_LAYER_WIDGET = C.ATK_LAYER_WIDGET
const ATK_STATE_SELECTABLE = C.ATK_STATE_SELECTABLE
const ATK_TEXT_ATTR_UNDERLINE = C.ATK_TEXT_ATTR_UNDERLINE
const ATK_STATE_ARMED = C.ATK_STATE_ARMED
const ATK_ROLE_DOCUMENT_PRESENTATION = C.ATK_ROLE_DOCUMENT_PRESENTATION
const ATK_STATE_DEFAULT = C.ATK_STATE_DEFAULT
const ATK_ROLE_OPTION_PANE = C.ATK_ROLE_OPTION_PANE
const ATK_RELATION_LABELLED_BY = C.ATK_RELATION_LABELLED_BY
const ATK_TEXT_BOUNDARY_LINE_START = C.ATK_TEXT_BOUNDARY_LINE_START
const ATK_STATE_SINGLE_LINE = C.ATK_STATE_SINGLE_LINE
const ATK_ROLE_TABLE = C.ATK_ROLE_TABLE
const ATK_TEXT_ATTR_STRIKETHROUGH = C.ATK_TEXT_ATTR_STRIKETHROUGH
const ATK_ROLE_COLUMN_HEADER = C.ATK_ROLE_COLUMN_HEADER
const ATK_ROLE_DOCUMENT_EMAIL = C.ATK_ROLE_DOCUMENT_EMAIL
const ATK_STATE_INVALID_ENTRY = C.ATK_STATE_INVALID_ENTRY
const ATK_ROLE_DESKTOP_ICON = C.ATK_ROLE_DESKTOP_ICON
const ATK_HYPERLINK_IS_INLINE = C.ATK_HYPERLINK_IS_INLINE
const ATK_ROLE_HEADER = C.ATK_ROLE_HEADER
const ATK_ROLE_ACCEL_LABEL = C.ATK_ROLE_ACCEL_LABEL
const ATK_RELATION_CONTROLLER_FOR = C.ATK_RELATION_CONTROLLER_FOR
const ATK_ROLE_INVALID = C.ATK_ROLE_INVALID
const ATK_ROLE_HEADING = C.ATK_ROLE_HEADING
const ATK_ROLE_INFO_BAR = C.ATK_ROLE_INFO_BAR
const ATK_TEXT_BOUNDARY_LINE_END = C.ATK_TEXT_BOUNDARY_LINE_END
const ATK_ROLE_UNKNOWN = C.ATK_ROLE_UNKNOWN
const ATK_STATE_ICONIFIED = C.ATK_STATE_ICONIFIED
const ATK_KEY_EVENT_LAST_DEFINED = C.ATK_KEY_EVENT_LAST_DEFINED
const ATK_ROLE_PUSH_BUTTON = C.ATK_ROLE_PUSH_BUTTON
const ATK_ROLE_PANEL = C.ATK_ROLE_PANEL
const ATK_ROLE_LIST = C.ATK_ROLE_LIST
const ATK_RELATION_LABEL_FOR = C.ATK_RELATION_LABEL_FOR
const ATK_STATE_SELECTED = C.ATK_STATE_SELECTED
const ATK_ROLE_MENU_BAR = C.ATK_ROLE_MENU_BAR
const ATK_TEXT_ATTR_INDENT = C.ATK_TEXT_ATTR_INDENT
const ATK_TEXT_BOUNDARY_SENTENCE_START = C.ATK_TEXT_BOUNDARY_SENTENCE_START
const ATK_RELATION_NULL = C.ATK_RELATION_NULL
const ATK_ROLE_INPUT_METHOD_WINDOW = C.ATK_ROLE_INPUT_METHOD_WINDOW
const ATK_STATE_EXPANDABLE = C.ATK_STATE_EXPANDABLE
const ATK_TEXT_ATTR_EDITABLE = C.ATK_TEXT_ATTR_EDITABLE
const ATK_TEXT_ATTR_BG_STIPPLE = C.ATK_TEXT_ATTR_BG_STIPPLE
const ATK_STATE_SHOWING = C.ATK_STATE_SHOWING
const ATK_KEY_EVENT_PRESS = C.ATK_KEY_EVENT_PRESS
const ATK_ROLE_TREE_TABLE = C.ATK_ROLE_TREE_TABLE
const ATK_ROLE_TABLE_ROW_HEADER = C.ATK_ROLE_TABLE_ROW_HEADER
const ATK_TEXT_BOUNDARY_WORD_START = C.ATK_TEXT_BOUNDARY_WORD_START
const ATK_ROLE_DIRECTORY_PANE = C.ATK_ROLE_DIRECTORY_PANE
const ATK_ROLE_SPLIT_PANE = C.ATK_ROLE_SPLIT_PANE
const ATK_ROLE_LABEL = C.ATK_ROLE_LABEL
const ATK_ROLE_NOTIFICATION = C.ATK_ROLE_NOTIFICATION
const ATK_TEXT_ATTR_LANGUAGE = C.ATK_TEXT_ATTR_LANGUAGE
const ATK_ROLE_ROOT_PANE = C.ATK_ROLE_ROOT_PANE
const ATK_TEXT_CLIP_MIN = C.ATK_TEXT_CLIP_MIN
const ATK_ROLE_DRAWING_AREA = C.ATK_ROLE_DRAWING_AREA
const ATK_STATE_STALE = C.ATK_STATE_STALE
const ATK_ROLE_ICON = C.ATK_ROLE_ICON
const ATK_TEXT_ATTR_FAMILY_NAME = C.ATK_TEXT_ATTR_FAMILY_NAME
const ATK_ROLE_TEAR_OFF_MENU_ITEM = C.ATK_ROLE_TEAR_OFF_MENU_ITEM
const ATK_ROLE_WINDOW = C.ATK_ROLE_WINDOW
const ATK_STATE_ANIMATED = C.ATK_STATE_ANIMATED
const ATK_TEXT_ATTR_INVALID = C.ATK_TEXT_ATTR_INVALID
const ATK_TEXT_ATTR_FG_COLOR = C.ATK_TEXT_ATTR_FG_COLOR
const ATK_ROLE_VIEWPORT = C.ATK_ROLE_VIEWPORT
const ATK_TEXT_BOUNDARY_WORD_END = C.ATK_TEXT_BOUNDARY_WORD_END
const ATK_TEXT_BOUNDARY_CHAR = C.ATK_TEXT_BOUNDARY_CHAR
const ATK_ROLE_CHECK_BOX = C.ATK_ROLE_CHECK_BOX
const ATK_TEXT_ATTR_INVISIBLE = C.ATK_TEXT_ATTR_INVISIBLE
const ATK_ROLE_POPUP_MENU = C.ATK_ROLE_POPUP_MENU
const ATK_ROLE_ANIMATION = C.ATK_ROLE_ANIMATION
const ATK_ROLE_IMAGE = C.ATK_ROLE_IMAGE
const ATK_RELATION_DESCRIPTION_FOR = C.ATK_RELATION_DESCRIPTION_FOR
const ATK_ROLE_STATUSBAR = C.ATK_ROLE_STATUSBAR
const ATK_TEXT_BOUNDARY_SENTENCE_END = C.ATK_TEXT_BOUNDARY_SENTENCE_END
const ATK_TEXT_ATTR_SIZE = C.ATK_TEXT_ATTR_SIZE
const ATK_STATE_PRESSED = C.ATK_STATE_PRESSED
